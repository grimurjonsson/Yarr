/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// ManualImportReprocessResource
    /// </summary>
    [DataContract(Name = "ManualImportReprocessResource")]
    public partial class ManualImportReprocessResource : IEquatable<ManualImportReprocessResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualImportReprocessResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="path">path.</param>
        /// <param name="movieId">movieId.</param>
        /// <param name="movie">movie.</param>
        /// <param name="quality">quality.</param>
        /// <param name="languages">languages.</param>
        /// <param name="releaseGroup">releaseGroup.</param>
        /// <param name="downloadId">downloadId.</param>
        /// <param name="customFormats">customFormats.</param>
        /// <param name="customFormatScore">customFormatScore.</param>
        /// <param name="rejections">rejections.</param>
        public ManualImportReprocessResource(int id = default(int), string path = default(string), int movieId = default(int), MovieResource movie = default(MovieResource), QualityModel quality = default(QualityModel), List<Language> languages = default(List<Language>), string releaseGroup = default(string), string downloadId = default(string), List<CustomFormatResource> customFormats = default(List<CustomFormatResource>), int customFormatScore = default(int), List<Rejection> rejections = default(List<Rejection>))
        {
            this.Id = id;
            this.Path = path;
            this.MovieId = movieId;
            this.Movie = movie;
            this.Quality = quality;
            this.Languages = languages;
            this.ReleaseGroup = releaseGroup;
            this.DownloadId = downloadId;
            this.CustomFormats = customFormats;
            this.CustomFormatScore = customFormatScore;
            this.Rejections = rejections;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets MovieId
        /// </summary>
        [DataMember(Name = "movieId", EmitDefaultValue = false)]
        public int MovieId { get; set; }

        /// <summary>
        /// Gets or Sets Movie
        /// </summary>
        [DataMember(Name = "movie", EmitDefaultValue = false)]
        public MovieResource Movie { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroup
        /// </summary>
        [DataMember(Name = "releaseGroup", EmitDefaultValue = true)]
        public string ReleaseGroup { get; set; }

        /// <summary>
        /// Gets or Sets DownloadId
        /// </summary>
        [DataMember(Name = "downloadId", EmitDefaultValue = true)]
        public string DownloadId { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormats
        /// </summary>
        [DataMember(Name = "customFormats", EmitDefaultValue = true)]
        public List<CustomFormatResource> CustomFormats { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormatScore
        /// </summary>
        [DataMember(Name = "customFormatScore", EmitDefaultValue = false)]
        public int CustomFormatScore { get; set; }

        /// <summary>
        /// Gets or Sets Rejections
        /// </summary>
        [DataMember(Name = "rejections", EmitDefaultValue = true)]
        public List<Rejection> Rejections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManualImportReprocessResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  MovieId: ").Append(MovieId).Append("\n");
            sb.Append("  Movie: ").Append(Movie).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  ReleaseGroup: ").Append(ReleaseGroup).Append("\n");
            sb.Append("  DownloadId: ").Append(DownloadId).Append("\n");
            sb.Append("  CustomFormats: ").Append(CustomFormats).Append("\n");
            sb.Append("  CustomFormatScore: ").Append(CustomFormatScore).Append("\n");
            sb.Append("  Rejections: ").Append(Rejections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualImportReprocessResource);
        }

        /// <summary>
        /// Returns true if ManualImportReprocessResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualImportReprocessResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualImportReprocessResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.MovieId == input.MovieId ||
                    this.MovieId.Equals(input.MovieId)
                ) && 
                (
                    this.Movie == input.Movie ||
                    (this.Movie != null &&
                    this.Movie.Equals(input.Movie))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.ReleaseGroup == input.ReleaseGroup ||
                    (this.ReleaseGroup != null &&
                    this.ReleaseGroup.Equals(input.ReleaseGroup))
                ) && 
                (
                    this.DownloadId == input.DownloadId ||
                    (this.DownloadId != null &&
                    this.DownloadId.Equals(input.DownloadId))
                ) && 
                (
                    this.CustomFormats == input.CustomFormats ||
                    this.CustomFormats != null &&
                    input.CustomFormats != null &&
                    this.CustomFormats.SequenceEqual(input.CustomFormats)
                ) && 
                (
                    this.CustomFormatScore == input.CustomFormatScore ||
                    this.CustomFormatScore.Equals(input.CustomFormatScore)
                ) && 
                (
                    this.Rejections == input.Rejections ||
                    this.Rejections != null &&
                    input.Rejections != null &&
                    this.Rejections.SequenceEqual(input.Rejections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.MovieId.GetHashCode();
                if (this.Movie != null)
                    hashCode = hashCode * 59 + this.Movie.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.ReleaseGroup != null)
                    hashCode = hashCode * 59 + this.ReleaseGroup.GetHashCode();
                if (this.DownloadId != null)
                    hashCode = hashCode * 59 + this.DownloadId.GetHashCode();
                if (this.CustomFormats != null)
                    hashCode = hashCode * 59 + this.CustomFormats.GetHashCode();
                hashCode = hashCode * 59 + this.CustomFormatScore.GetHashCode();
                if (this.Rejections != null)
                    hashCode = hashCode * 59 + this.Rejections.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
