/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// LogFileResource
    /// </summary>
    [DataContract(Name = "LogFileResource")]
    public partial class LogFileResource : IEquatable<LogFileResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogFileResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="filename">filename.</param>
        /// <param name="lastWriteTime">lastWriteTime.</param>
        /// <param name="contentsUrl">contentsUrl.</param>
        /// <param name="downloadUrl">downloadUrl.</param>
        public LogFileResource(int id = default(int), string filename = default(string), DateTime lastWriteTime = default(DateTime), string contentsUrl = default(string), string downloadUrl = default(string))
        {
            this.Id = id;
            this.Filename = filename;
            this.LastWriteTime = lastWriteTime;
            this.ContentsUrl = contentsUrl;
            this.DownloadUrl = downloadUrl;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name = "filename", EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets LastWriteTime
        /// </summary>
        [DataMember(Name = "lastWriteTime", EmitDefaultValue = false)]
        public DateTime LastWriteTime { get; set; }

        /// <summary>
        /// Gets or Sets ContentsUrl
        /// </summary>
        [DataMember(Name = "contentsUrl", EmitDefaultValue = true)]
        public string ContentsUrl { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [DataMember(Name = "downloadUrl", EmitDefaultValue = true)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogFileResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  LastWriteTime: ").Append(LastWriteTime).Append("\n");
            sb.Append("  ContentsUrl: ").Append(ContentsUrl).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogFileResource);
        }

        /// <summary>
        /// Returns true if LogFileResource instances are equal
        /// </summary>
        /// <param name="input">Instance of LogFileResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogFileResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.LastWriteTime == input.LastWriteTime ||
                    (this.LastWriteTime != null &&
                    this.LastWriteTime.Equals(input.LastWriteTime))
                ) && 
                (
                    this.ContentsUrl == input.ContentsUrl ||
                    (this.ContentsUrl != null &&
                    this.ContentsUrl.Equals(input.ContentsUrl))
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.LastWriteTime != null)
                    hashCode = hashCode * 59 + this.LastWriteTime.GetHashCode();
                if (this.ContentsUrl != null)
                    hashCode = hashCode * 59 + this.ContentsUrl.GetHashCode();
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
