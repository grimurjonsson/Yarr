/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// ParseResource
    /// </summary>
    [DataContract(Name = "ParseResource")]
    public partial class ParseResource : IEquatable<ParseResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="parsedMovieInfo">parsedMovieInfo.</param>
        /// <param name="movie">movie.</param>
        /// <param name="languages">languages.</param>
        /// <param name="customFormats">customFormats.</param>
        /// <param name="customFormatScore">customFormatScore.</param>
        public ParseResource(int id = default(int), string title = default(string), ParsedMovieInfo parsedMovieInfo = default(ParsedMovieInfo), MovieResource movie = default(MovieResource), List<Language> languages = default(List<Language>), List<CustomFormatResource> customFormats = default(List<CustomFormatResource>), int customFormatScore = default(int))
        {
            this.Id = id;
            this.Title = title;
            this.ParsedMovieInfo = parsedMovieInfo;
            this.Movie = movie;
            this.Languages = languages;
            this.CustomFormats = customFormats;
            this.CustomFormatScore = customFormatScore;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ParsedMovieInfo
        /// </summary>
        [DataMember(Name = "parsedMovieInfo", EmitDefaultValue = false)]
        public ParsedMovieInfo ParsedMovieInfo { get; set; }

        /// <summary>
        /// Gets or Sets Movie
        /// </summary>
        [DataMember(Name = "movie", EmitDefaultValue = false)]
        public MovieResource Movie { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormats
        /// </summary>
        [DataMember(Name = "customFormats", EmitDefaultValue = true)]
        public List<CustomFormatResource> CustomFormats { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormatScore
        /// </summary>
        [DataMember(Name = "customFormatScore", EmitDefaultValue = false)]
        public int CustomFormatScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ParsedMovieInfo: ").Append(ParsedMovieInfo).Append("\n");
            sb.Append("  Movie: ").Append(Movie).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  CustomFormats: ").Append(CustomFormats).Append("\n");
            sb.Append("  CustomFormatScore: ").Append(CustomFormatScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParseResource);
        }

        /// <summary>
        /// Returns true if ParseResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ParsedMovieInfo == input.ParsedMovieInfo ||
                    (this.ParsedMovieInfo != null &&
                    this.ParsedMovieInfo.Equals(input.ParsedMovieInfo))
                ) && 
                (
                    this.Movie == input.Movie ||
                    (this.Movie != null &&
                    this.Movie.Equals(input.Movie))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.CustomFormats == input.CustomFormats ||
                    this.CustomFormats != null &&
                    input.CustomFormats != null &&
                    this.CustomFormats.SequenceEqual(input.CustomFormats)
                ) && 
                (
                    this.CustomFormatScore == input.CustomFormatScore ||
                    this.CustomFormatScore.Equals(input.CustomFormatScore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ParsedMovieInfo != null)
                    hashCode = hashCode * 59 + this.ParsedMovieInfo.GetHashCode();
                if (this.Movie != null)
                    hashCode = hashCode * 59 + this.Movie.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.CustomFormats != null)
                    hashCode = hashCode * 59 + this.CustomFormats.GetHashCode();
                hashCode = hashCode * 59 + this.CustomFormatScore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
