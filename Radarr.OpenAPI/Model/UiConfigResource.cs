/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// UiConfigResource
    /// </summary>
    [DataContract(Name = "UiConfigResource")]
    public partial class UiConfigResource : IEquatable<UiConfigResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MovieRuntimeFormat
        /// </summary>
        [DataMember(Name = "movieRuntimeFormat", EmitDefaultValue = false)]
        public MovieRuntimeFormatType? MovieRuntimeFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UiConfigResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstDayOfWeek">firstDayOfWeek.</param>
        /// <param name="calendarWeekColumnHeader">calendarWeekColumnHeader.</param>
        /// <param name="movieRuntimeFormat">movieRuntimeFormat.</param>
        /// <param name="shortDateFormat">shortDateFormat.</param>
        /// <param name="longDateFormat">longDateFormat.</param>
        /// <param name="timeFormat">timeFormat.</param>
        /// <param name="showRelativeDates">showRelativeDates.</param>
        /// <param name="enableColorImpairedMode">enableColorImpairedMode.</param>
        /// <param name="movieInfoLanguage">movieInfoLanguage.</param>
        /// <param name="uiLanguage">uiLanguage.</param>
        /// <param name="theme">theme.</param>
        public UiConfigResource(int id = default(int), int firstDayOfWeek = default(int), string calendarWeekColumnHeader = default(string), MovieRuntimeFormatType? movieRuntimeFormat = default(MovieRuntimeFormatType?), string shortDateFormat = default(string), string longDateFormat = default(string), string timeFormat = default(string), bool showRelativeDates = default(bool), bool enableColorImpairedMode = default(bool), int movieInfoLanguage = default(int), int uiLanguage = default(int), string theme = default(string))
        {
            this.Id = id;
            this.FirstDayOfWeek = firstDayOfWeek;
            this.CalendarWeekColumnHeader = calendarWeekColumnHeader;
            this.MovieRuntimeFormat = movieRuntimeFormat;
            this.ShortDateFormat = shortDateFormat;
            this.LongDateFormat = longDateFormat;
            this.TimeFormat = timeFormat;
            this.ShowRelativeDates = showRelativeDates;
            this.EnableColorImpairedMode = enableColorImpairedMode;
            this.MovieInfoLanguage = movieInfoLanguage;
            this.UiLanguage = uiLanguage;
            this.Theme = theme;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstDayOfWeek
        /// </summary>
        [DataMember(Name = "firstDayOfWeek", EmitDefaultValue = false)]
        public int FirstDayOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets CalendarWeekColumnHeader
        /// </summary>
        [DataMember(Name = "calendarWeekColumnHeader", EmitDefaultValue = true)]
        public string CalendarWeekColumnHeader { get; set; }

        /// <summary>
        /// Gets or Sets ShortDateFormat
        /// </summary>
        [DataMember(Name = "shortDateFormat", EmitDefaultValue = true)]
        public string ShortDateFormat { get; set; }

        /// <summary>
        /// Gets or Sets LongDateFormat
        /// </summary>
        [DataMember(Name = "longDateFormat", EmitDefaultValue = true)]
        public string LongDateFormat { get; set; }

        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name = "timeFormat", EmitDefaultValue = true)]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Gets or Sets ShowRelativeDates
        /// </summary>
        [DataMember(Name = "showRelativeDates", EmitDefaultValue = true)]
        public bool ShowRelativeDates { get; set; }

        /// <summary>
        /// Gets or Sets EnableColorImpairedMode
        /// </summary>
        [DataMember(Name = "enableColorImpairedMode", EmitDefaultValue = true)]
        public bool EnableColorImpairedMode { get; set; }

        /// <summary>
        /// Gets or Sets MovieInfoLanguage
        /// </summary>
        [DataMember(Name = "movieInfoLanguage", EmitDefaultValue = false)]
        public int MovieInfoLanguage { get; set; }

        /// <summary>
        /// Gets or Sets UiLanguage
        /// </summary>
        [DataMember(Name = "uiLanguage", EmitDefaultValue = false)]
        public int UiLanguage { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name = "theme", EmitDefaultValue = true)]
        public string Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UiConfigResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstDayOfWeek: ").Append(FirstDayOfWeek).Append("\n");
            sb.Append("  CalendarWeekColumnHeader: ").Append(CalendarWeekColumnHeader).Append("\n");
            sb.Append("  MovieRuntimeFormat: ").Append(MovieRuntimeFormat).Append("\n");
            sb.Append("  ShortDateFormat: ").Append(ShortDateFormat).Append("\n");
            sb.Append("  LongDateFormat: ").Append(LongDateFormat).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  ShowRelativeDates: ").Append(ShowRelativeDates).Append("\n");
            sb.Append("  EnableColorImpairedMode: ").Append(EnableColorImpairedMode).Append("\n");
            sb.Append("  MovieInfoLanguage: ").Append(MovieInfoLanguage).Append("\n");
            sb.Append("  UiLanguage: ").Append(UiLanguage).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UiConfigResource);
        }

        /// <summary>
        /// Returns true if UiConfigResource instances are equal
        /// </summary>
        /// <param name="input">Instance of UiConfigResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UiConfigResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.FirstDayOfWeek == input.FirstDayOfWeek ||
                    this.FirstDayOfWeek.Equals(input.FirstDayOfWeek)
                ) && 
                (
                    this.CalendarWeekColumnHeader == input.CalendarWeekColumnHeader ||
                    (this.CalendarWeekColumnHeader != null &&
                    this.CalendarWeekColumnHeader.Equals(input.CalendarWeekColumnHeader))
                ) && 
                (
                    this.MovieRuntimeFormat == input.MovieRuntimeFormat ||
                    this.MovieRuntimeFormat.Equals(input.MovieRuntimeFormat)
                ) && 
                (
                    this.ShortDateFormat == input.ShortDateFormat ||
                    (this.ShortDateFormat != null &&
                    this.ShortDateFormat.Equals(input.ShortDateFormat))
                ) && 
                (
                    this.LongDateFormat == input.LongDateFormat ||
                    (this.LongDateFormat != null &&
                    this.LongDateFormat.Equals(input.LongDateFormat))
                ) && 
                (
                    this.TimeFormat == input.TimeFormat ||
                    (this.TimeFormat != null &&
                    this.TimeFormat.Equals(input.TimeFormat))
                ) && 
                (
                    this.ShowRelativeDates == input.ShowRelativeDates ||
                    this.ShowRelativeDates.Equals(input.ShowRelativeDates)
                ) && 
                (
                    this.EnableColorImpairedMode == input.EnableColorImpairedMode ||
                    this.EnableColorImpairedMode.Equals(input.EnableColorImpairedMode)
                ) && 
                (
                    this.MovieInfoLanguage == input.MovieInfoLanguage ||
                    this.MovieInfoLanguage.Equals(input.MovieInfoLanguage)
                ) && 
                (
                    this.UiLanguage == input.UiLanguage ||
                    this.UiLanguage.Equals(input.UiLanguage)
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.FirstDayOfWeek.GetHashCode();
                if (this.CalendarWeekColumnHeader != null)
                    hashCode = hashCode * 59 + this.CalendarWeekColumnHeader.GetHashCode();
                hashCode = hashCode * 59 + this.MovieRuntimeFormat.GetHashCode();
                if (this.ShortDateFormat != null)
                    hashCode = hashCode * 59 + this.ShortDateFormat.GetHashCode();
                if (this.LongDateFormat != null)
                    hashCode = hashCode * 59 + this.LongDateFormat.GetHashCode();
                if (this.TimeFormat != null)
                    hashCode = hashCode * 59 + this.TimeFormat.GetHashCode();
                hashCode = hashCode * 59 + this.ShowRelativeDates.GetHashCode();
                hashCode = hashCode * 59 + this.EnableColorImpairedMode.GetHashCode();
                hashCode = hashCode * 59 + this.MovieInfoLanguage.GetHashCode();
                hashCode = hashCode * 59 + this.UiLanguage.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
