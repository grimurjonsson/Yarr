/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// MediaManagementConfigResource
    /// </summary>
    [DataContract(Name = "MediaManagementConfigResource")]
    public partial class MediaManagementConfigResource : IEquatable<MediaManagementConfigResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DownloadPropersAndRepacks
        /// </summary>
        [DataMember(Name = "downloadPropersAndRepacks", EmitDefaultValue = false)]
        public ProperDownloadTypes? DownloadPropersAndRepacks { get; set; }

        /// <summary>
        /// Gets or Sets FileDate
        /// </summary>
        [DataMember(Name = "fileDate", EmitDefaultValue = false)]
        public FileDateType? FileDate { get; set; }

        /// <summary>
        /// Gets or Sets RescanAfterRefresh
        /// </summary>
        [DataMember(Name = "rescanAfterRefresh", EmitDefaultValue = false)]
        public RescanAfterRefreshType? RescanAfterRefresh { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaManagementConfigResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="autoUnmonitorPreviouslyDownloadedMovies">autoUnmonitorPreviouslyDownloadedMovies.</param>
        /// <param name="recycleBin">recycleBin.</param>
        /// <param name="recycleBinCleanupDays">recycleBinCleanupDays.</param>
        /// <param name="downloadPropersAndRepacks">downloadPropersAndRepacks.</param>
        /// <param name="createEmptyMovieFolders">createEmptyMovieFolders.</param>
        /// <param name="deleteEmptyFolders">deleteEmptyFolders.</param>
        /// <param name="fileDate">fileDate.</param>
        /// <param name="rescanAfterRefresh">rescanAfterRefresh.</param>
        /// <param name="autoRenameFolders">autoRenameFolders.</param>
        /// <param name="pathsDefaultStatic">pathsDefaultStatic.</param>
        /// <param name="setPermissionsLinux">setPermissionsLinux.</param>
        /// <param name="chmodFolder">chmodFolder.</param>
        /// <param name="chownGroup">chownGroup.</param>
        /// <param name="skipFreeSpaceCheckWhenImporting">skipFreeSpaceCheckWhenImporting.</param>
        /// <param name="minimumFreeSpaceWhenImporting">minimumFreeSpaceWhenImporting.</param>
        /// <param name="copyUsingHardlinks">copyUsingHardlinks.</param>
        /// <param name="useScriptImport">useScriptImport.</param>
        /// <param name="scriptImportPath">scriptImportPath.</param>
        /// <param name="importExtraFiles">importExtraFiles.</param>
        /// <param name="extraFileExtensions">extraFileExtensions.</param>
        /// <param name="enableMediaInfo">enableMediaInfo.</param>
        public MediaManagementConfigResource(int id = default(int), bool autoUnmonitorPreviouslyDownloadedMovies = default(bool), string recycleBin = default(string), int recycleBinCleanupDays = default(int), ProperDownloadTypes? downloadPropersAndRepacks = default(ProperDownloadTypes?), bool createEmptyMovieFolders = default(bool), bool deleteEmptyFolders = default(bool), FileDateType? fileDate = default(FileDateType?), RescanAfterRefreshType? rescanAfterRefresh = default(RescanAfterRefreshType?), bool autoRenameFolders = default(bool), bool pathsDefaultStatic = default(bool), bool setPermissionsLinux = default(bool), string chmodFolder = default(string), string chownGroup = default(string), bool skipFreeSpaceCheckWhenImporting = default(bool), int minimumFreeSpaceWhenImporting = default(int), bool copyUsingHardlinks = default(bool), bool useScriptImport = default(bool), string scriptImportPath = default(string), bool importExtraFiles = default(bool), string extraFileExtensions = default(string), bool enableMediaInfo = default(bool))
        {
            this.Id = id;
            this.AutoUnmonitorPreviouslyDownloadedMovies = autoUnmonitorPreviouslyDownloadedMovies;
            this.RecycleBin = recycleBin;
            this.RecycleBinCleanupDays = recycleBinCleanupDays;
            this.DownloadPropersAndRepacks = downloadPropersAndRepacks;
            this.CreateEmptyMovieFolders = createEmptyMovieFolders;
            this.DeleteEmptyFolders = deleteEmptyFolders;
            this.FileDate = fileDate;
            this.RescanAfterRefresh = rescanAfterRefresh;
            this.AutoRenameFolders = autoRenameFolders;
            this.PathsDefaultStatic = pathsDefaultStatic;
            this.SetPermissionsLinux = setPermissionsLinux;
            this.ChmodFolder = chmodFolder;
            this.ChownGroup = chownGroup;
            this.SkipFreeSpaceCheckWhenImporting = skipFreeSpaceCheckWhenImporting;
            this.MinimumFreeSpaceWhenImporting = minimumFreeSpaceWhenImporting;
            this.CopyUsingHardlinks = copyUsingHardlinks;
            this.UseScriptImport = useScriptImport;
            this.ScriptImportPath = scriptImportPath;
            this.ImportExtraFiles = importExtraFiles;
            this.ExtraFileExtensions = extraFileExtensions;
            this.EnableMediaInfo = enableMediaInfo;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AutoUnmonitorPreviouslyDownloadedMovies
        /// </summary>
        [DataMember(Name = "autoUnmonitorPreviouslyDownloadedMovies", EmitDefaultValue = true)]
        public bool AutoUnmonitorPreviouslyDownloadedMovies { get; set; }

        /// <summary>
        /// Gets or Sets RecycleBin
        /// </summary>
        [DataMember(Name = "recycleBin", EmitDefaultValue = true)]
        public string RecycleBin { get; set; }

        /// <summary>
        /// Gets or Sets RecycleBinCleanupDays
        /// </summary>
        [DataMember(Name = "recycleBinCleanupDays", EmitDefaultValue = false)]
        public int RecycleBinCleanupDays { get; set; }

        /// <summary>
        /// Gets or Sets CreateEmptyMovieFolders
        /// </summary>
        [DataMember(Name = "createEmptyMovieFolders", EmitDefaultValue = true)]
        public bool CreateEmptyMovieFolders { get; set; }

        /// <summary>
        /// Gets or Sets DeleteEmptyFolders
        /// </summary>
        [DataMember(Name = "deleteEmptyFolders", EmitDefaultValue = true)]
        public bool DeleteEmptyFolders { get; set; }

        /// <summary>
        /// Gets or Sets AutoRenameFolders
        /// </summary>
        [DataMember(Name = "autoRenameFolders", EmitDefaultValue = true)]
        public bool AutoRenameFolders { get; set; }

        /// <summary>
        /// Gets or Sets PathsDefaultStatic
        /// </summary>
        [DataMember(Name = "pathsDefaultStatic", EmitDefaultValue = true)]
        public bool PathsDefaultStatic { get; set; }

        /// <summary>
        /// Gets or Sets SetPermissionsLinux
        /// </summary>
        [DataMember(Name = "setPermissionsLinux", EmitDefaultValue = true)]
        public bool SetPermissionsLinux { get; set; }

        /// <summary>
        /// Gets or Sets ChmodFolder
        /// </summary>
        [DataMember(Name = "chmodFolder", EmitDefaultValue = true)]
        public string ChmodFolder { get; set; }

        /// <summary>
        /// Gets or Sets ChownGroup
        /// </summary>
        [DataMember(Name = "chownGroup", EmitDefaultValue = true)]
        public string ChownGroup { get; set; }

        /// <summary>
        /// Gets or Sets SkipFreeSpaceCheckWhenImporting
        /// </summary>
        [DataMember(Name = "skipFreeSpaceCheckWhenImporting", EmitDefaultValue = true)]
        public bool SkipFreeSpaceCheckWhenImporting { get; set; }

        /// <summary>
        /// Gets or Sets MinimumFreeSpaceWhenImporting
        /// </summary>
        [DataMember(Name = "minimumFreeSpaceWhenImporting", EmitDefaultValue = false)]
        public int MinimumFreeSpaceWhenImporting { get; set; }

        /// <summary>
        /// Gets or Sets CopyUsingHardlinks
        /// </summary>
        [DataMember(Name = "copyUsingHardlinks", EmitDefaultValue = true)]
        public bool CopyUsingHardlinks { get; set; }

        /// <summary>
        /// Gets or Sets UseScriptImport
        /// </summary>
        [DataMember(Name = "useScriptImport", EmitDefaultValue = true)]
        public bool UseScriptImport { get; set; }

        /// <summary>
        /// Gets or Sets ScriptImportPath
        /// </summary>
        [DataMember(Name = "scriptImportPath", EmitDefaultValue = true)]
        public string ScriptImportPath { get; set; }

        /// <summary>
        /// Gets or Sets ImportExtraFiles
        /// </summary>
        [DataMember(Name = "importExtraFiles", EmitDefaultValue = true)]
        public bool ImportExtraFiles { get; set; }

        /// <summary>
        /// Gets or Sets ExtraFileExtensions
        /// </summary>
        [DataMember(Name = "extraFileExtensions", EmitDefaultValue = true)]
        public string ExtraFileExtensions { get; set; }

        /// <summary>
        /// Gets or Sets EnableMediaInfo
        /// </summary>
        [DataMember(Name = "enableMediaInfo", EmitDefaultValue = true)]
        public bool EnableMediaInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaManagementConfigResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AutoUnmonitorPreviouslyDownloadedMovies: ").Append(AutoUnmonitorPreviouslyDownloadedMovies).Append("\n");
            sb.Append("  RecycleBin: ").Append(RecycleBin).Append("\n");
            sb.Append("  RecycleBinCleanupDays: ").Append(RecycleBinCleanupDays).Append("\n");
            sb.Append("  DownloadPropersAndRepacks: ").Append(DownloadPropersAndRepacks).Append("\n");
            sb.Append("  CreateEmptyMovieFolders: ").Append(CreateEmptyMovieFolders).Append("\n");
            sb.Append("  DeleteEmptyFolders: ").Append(DeleteEmptyFolders).Append("\n");
            sb.Append("  FileDate: ").Append(FileDate).Append("\n");
            sb.Append("  RescanAfterRefresh: ").Append(RescanAfterRefresh).Append("\n");
            sb.Append("  AutoRenameFolders: ").Append(AutoRenameFolders).Append("\n");
            sb.Append("  PathsDefaultStatic: ").Append(PathsDefaultStatic).Append("\n");
            sb.Append("  SetPermissionsLinux: ").Append(SetPermissionsLinux).Append("\n");
            sb.Append("  ChmodFolder: ").Append(ChmodFolder).Append("\n");
            sb.Append("  ChownGroup: ").Append(ChownGroup).Append("\n");
            sb.Append("  SkipFreeSpaceCheckWhenImporting: ").Append(SkipFreeSpaceCheckWhenImporting).Append("\n");
            sb.Append("  MinimumFreeSpaceWhenImporting: ").Append(MinimumFreeSpaceWhenImporting).Append("\n");
            sb.Append("  CopyUsingHardlinks: ").Append(CopyUsingHardlinks).Append("\n");
            sb.Append("  UseScriptImport: ").Append(UseScriptImport).Append("\n");
            sb.Append("  ScriptImportPath: ").Append(ScriptImportPath).Append("\n");
            sb.Append("  ImportExtraFiles: ").Append(ImportExtraFiles).Append("\n");
            sb.Append("  ExtraFileExtensions: ").Append(ExtraFileExtensions).Append("\n");
            sb.Append("  EnableMediaInfo: ").Append(EnableMediaInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaManagementConfigResource);
        }

        /// <summary>
        /// Returns true if MediaManagementConfigResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaManagementConfigResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaManagementConfigResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AutoUnmonitorPreviouslyDownloadedMovies == input.AutoUnmonitorPreviouslyDownloadedMovies ||
                    this.AutoUnmonitorPreviouslyDownloadedMovies.Equals(input.AutoUnmonitorPreviouslyDownloadedMovies)
                ) && 
                (
                    this.RecycleBin == input.RecycleBin ||
                    (this.RecycleBin != null &&
                    this.RecycleBin.Equals(input.RecycleBin))
                ) && 
                (
                    this.RecycleBinCleanupDays == input.RecycleBinCleanupDays ||
                    this.RecycleBinCleanupDays.Equals(input.RecycleBinCleanupDays)
                ) && 
                (
                    this.DownloadPropersAndRepacks == input.DownloadPropersAndRepacks ||
                    this.DownloadPropersAndRepacks.Equals(input.DownloadPropersAndRepacks)
                ) && 
                (
                    this.CreateEmptyMovieFolders == input.CreateEmptyMovieFolders ||
                    this.CreateEmptyMovieFolders.Equals(input.CreateEmptyMovieFolders)
                ) && 
                (
                    this.DeleteEmptyFolders == input.DeleteEmptyFolders ||
                    this.DeleteEmptyFolders.Equals(input.DeleteEmptyFolders)
                ) && 
                (
                    this.FileDate == input.FileDate ||
                    this.FileDate.Equals(input.FileDate)
                ) && 
                (
                    this.RescanAfterRefresh == input.RescanAfterRefresh ||
                    this.RescanAfterRefresh.Equals(input.RescanAfterRefresh)
                ) && 
                (
                    this.AutoRenameFolders == input.AutoRenameFolders ||
                    this.AutoRenameFolders.Equals(input.AutoRenameFolders)
                ) && 
                (
                    this.PathsDefaultStatic == input.PathsDefaultStatic ||
                    this.PathsDefaultStatic.Equals(input.PathsDefaultStatic)
                ) && 
                (
                    this.SetPermissionsLinux == input.SetPermissionsLinux ||
                    this.SetPermissionsLinux.Equals(input.SetPermissionsLinux)
                ) && 
                (
                    this.ChmodFolder == input.ChmodFolder ||
                    (this.ChmodFolder != null &&
                    this.ChmodFolder.Equals(input.ChmodFolder))
                ) && 
                (
                    this.ChownGroup == input.ChownGroup ||
                    (this.ChownGroup != null &&
                    this.ChownGroup.Equals(input.ChownGroup))
                ) && 
                (
                    this.SkipFreeSpaceCheckWhenImporting == input.SkipFreeSpaceCheckWhenImporting ||
                    this.SkipFreeSpaceCheckWhenImporting.Equals(input.SkipFreeSpaceCheckWhenImporting)
                ) && 
                (
                    this.MinimumFreeSpaceWhenImporting == input.MinimumFreeSpaceWhenImporting ||
                    this.MinimumFreeSpaceWhenImporting.Equals(input.MinimumFreeSpaceWhenImporting)
                ) && 
                (
                    this.CopyUsingHardlinks == input.CopyUsingHardlinks ||
                    this.CopyUsingHardlinks.Equals(input.CopyUsingHardlinks)
                ) && 
                (
                    this.UseScriptImport == input.UseScriptImport ||
                    this.UseScriptImport.Equals(input.UseScriptImport)
                ) && 
                (
                    this.ScriptImportPath == input.ScriptImportPath ||
                    (this.ScriptImportPath != null &&
                    this.ScriptImportPath.Equals(input.ScriptImportPath))
                ) && 
                (
                    this.ImportExtraFiles == input.ImportExtraFiles ||
                    this.ImportExtraFiles.Equals(input.ImportExtraFiles)
                ) && 
                (
                    this.ExtraFileExtensions == input.ExtraFileExtensions ||
                    (this.ExtraFileExtensions != null &&
                    this.ExtraFileExtensions.Equals(input.ExtraFileExtensions))
                ) && 
                (
                    this.EnableMediaInfo == input.EnableMediaInfo ||
                    this.EnableMediaInfo.Equals(input.EnableMediaInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.AutoUnmonitorPreviouslyDownloadedMovies.GetHashCode();
                if (this.RecycleBin != null)
                    hashCode = hashCode * 59 + this.RecycleBin.GetHashCode();
                hashCode = hashCode * 59 + this.RecycleBinCleanupDays.GetHashCode();
                hashCode = hashCode * 59 + this.DownloadPropersAndRepacks.GetHashCode();
                hashCode = hashCode * 59 + this.CreateEmptyMovieFolders.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteEmptyFolders.GetHashCode();
                hashCode = hashCode * 59 + this.FileDate.GetHashCode();
                hashCode = hashCode * 59 + this.RescanAfterRefresh.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRenameFolders.GetHashCode();
                hashCode = hashCode * 59 + this.PathsDefaultStatic.GetHashCode();
                hashCode = hashCode * 59 + this.SetPermissionsLinux.GetHashCode();
                if (this.ChmodFolder != null)
                    hashCode = hashCode * 59 + this.ChmodFolder.GetHashCode();
                if (this.ChownGroup != null)
                    hashCode = hashCode * 59 + this.ChownGroup.GetHashCode();
                hashCode = hashCode * 59 + this.SkipFreeSpaceCheckWhenImporting.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumFreeSpaceWhenImporting.GetHashCode();
                hashCode = hashCode * 59 + this.CopyUsingHardlinks.GetHashCode();
                hashCode = hashCode * 59 + this.UseScriptImport.GetHashCode();
                if (this.ScriptImportPath != null)
                    hashCode = hashCode * 59 + this.ScriptImportPath.GetHashCode();
                hashCode = hashCode * 59 + this.ImportExtraFiles.GetHashCode();
                if (this.ExtraFileExtensions != null)
                    hashCode = hashCode * 59 + this.ExtraFileExtensions.GetHashCode();
                hashCode = hashCode * 59 + this.EnableMediaInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
