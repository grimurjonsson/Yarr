/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// ParsedMovieInfo
    /// </summary>
    [DataContract(Name = "ParsedMovieInfo")]
    public partial class ParsedMovieInfo : IEquatable<ParsedMovieInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParsedMovieInfo" /> class.
        /// </summary>
        /// <param name="movieTitles">movieTitles.</param>
        /// <param name="originalTitle">originalTitle.</param>
        /// <param name="releaseTitle">releaseTitle.</param>
        /// <param name="simpleReleaseTitle">simpleReleaseTitle.</param>
        /// <param name="quality">quality.</param>
        /// <param name="languages">languages.</param>
        /// <param name="releaseGroup">releaseGroup.</param>
        /// <param name="releaseHash">releaseHash.</param>
        /// <param name="edition">edition.</param>
        /// <param name="year">year.</param>
        /// <param name="imdbId">imdbId.</param>
        /// <param name="tmdbId">tmdbId.</param>
        /// <param name="hardcodedSubs">hardcodedSubs.</param>
        public ParsedMovieInfo(List<string> movieTitles = default(List<string>), string originalTitle = default(string), string releaseTitle = default(string), string simpleReleaseTitle = default(string), QualityModel quality = default(QualityModel), List<Language> languages = default(List<Language>), string releaseGroup = default(string), string releaseHash = default(string), string edition = default(string), int year = default(int), string imdbId = default(string), int tmdbId = default(int), string hardcodedSubs = default(string))
        {
            this.MovieTitles = movieTitles;
            this.OriginalTitle = originalTitle;
            this.ReleaseTitle = releaseTitle;
            this.SimpleReleaseTitle = simpleReleaseTitle;
            this.Quality = quality;
            this.Languages = languages;
            this.ReleaseGroup = releaseGroup;
            this.ReleaseHash = releaseHash;
            this.Edition = edition;
            this.Year = year;
            this.ImdbId = imdbId;
            this.TmdbId = tmdbId;
            this.HardcodedSubs = hardcodedSubs;
        }

        /// <summary>
        /// Gets or Sets MovieTitles
        /// </summary>
        [DataMember(Name = "movieTitles", EmitDefaultValue = true)]
        public List<string> MovieTitles { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTitle
        /// </summary>
        [DataMember(Name = "originalTitle", EmitDefaultValue = true)]
        public string OriginalTitle { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseTitle
        /// </summary>
        [DataMember(Name = "releaseTitle", EmitDefaultValue = true)]
        public string ReleaseTitle { get; set; }

        /// <summary>
        /// Gets or Sets SimpleReleaseTitle
        /// </summary>
        [DataMember(Name = "simpleReleaseTitle", EmitDefaultValue = true)]
        public string SimpleReleaseTitle { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroup
        /// </summary>
        [DataMember(Name = "releaseGroup", EmitDefaultValue = true)]
        public string ReleaseGroup { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseHash
        /// </summary>
        [DataMember(Name = "releaseHash", EmitDefaultValue = true)]
        public string ReleaseHash { get; set; }

        /// <summary>
        /// Gets or Sets Edition
        /// </summary>
        [DataMember(Name = "edition", EmitDefaultValue = true)]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets ImdbId
        /// </summary>
        [DataMember(Name = "imdbId", EmitDefaultValue = true)]
        public string ImdbId { get; set; }

        /// <summary>
        /// Gets or Sets TmdbId
        /// </summary>
        [DataMember(Name = "tmdbId", EmitDefaultValue = false)]
        public int TmdbId { get; set; }

        /// <summary>
        /// Gets or Sets HardcodedSubs
        /// </summary>
        [DataMember(Name = "hardcodedSubs", EmitDefaultValue = true)]
        public string HardcodedSubs { get; set; }

        /// <summary>
        /// Gets or Sets MovieTitle
        /// </summary>
        [DataMember(Name = "movieTitle", EmitDefaultValue = true)]
        public string MovieTitle { get; private set; }

        /// <summary>
        /// Returns false as MovieTitle should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMovieTitle()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PrimaryMovieTitle
        /// </summary>
        [DataMember(Name = "primaryMovieTitle", EmitDefaultValue = true)]
        public string PrimaryMovieTitle { get; private set; }

        /// <summary>
        /// Returns false as PrimaryMovieTitle should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrimaryMovieTitle()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParsedMovieInfo {\n");
            sb.Append("  MovieTitles: ").Append(MovieTitles).Append("\n");
            sb.Append("  OriginalTitle: ").Append(OriginalTitle).Append("\n");
            sb.Append("  ReleaseTitle: ").Append(ReleaseTitle).Append("\n");
            sb.Append("  SimpleReleaseTitle: ").Append(SimpleReleaseTitle).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  ReleaseGroup: ").Append(ReleaseGroup).Append("\n");
            sb.Append("  ReleaseHash: ").Append(ReleaseHash).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  ImdbId: ").Append(ImdbId).Append("\n");
            sb.Append("  TmdbId: ").Append(TmdbId).Append("\n");
            sb.Append("  HardcodedSubs: ").Append(HardcodedSubs).Append("\n");
            sb.Append("  MovieTitle: ").Append(MovieTitle).Append("\n");
            sb.Append("  PrimaryMovieTitle: ").Append(PrimaryMovieTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParsedMovieInfo);
        }

        /// <summary>
        /// Returns true if ParsedMovieInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ParsedMovieInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParsedMovieInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MovieTitles == input.MovieTitles ||
                    this.MovieTitles != null &&
                    input.MovieTitles != null &&
                    this.MovieTitles.SequenceEqual(input.MovieTitles)
                ) && 
                (
                    this.OriginalTitle == input.OriginalTitle ||
                    (this.OriginalTitle != null &&
                    this.OriginalTitle.Equals(input.OriginalTitle))
                ) && 
                (
                    this.ReleaseTitle == input.ReleaseTitle ||
                    (this.ReleaseTitle != null &&
                    this.ReleaseTitle.Equals(input.ReleaseTitle))
                ) && 
                (
                    this.SimpleReleaseTitle == input.SimpleReleaseTitle ||
                    (this.SimpleReleaseTitle != null &&
                    this.SimpleReleaseTitle.Equals(input.SimpleReleaseTitle))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.ReleaseGroup == input.ReleaseGroup ||
                    (this.ReleaseGroup != null &&
                    this.ReleaseGroup.Equals(input.ReleaseGroup))
                ) && 
                (
                    this.ReleaseHash == input.ReleaseHash ||
                    (this.ReleaseHash != null &&
                    this.ReleaseHash.Equals(input.ReleaseHash))
                ) && 
                (
                    this.Edition == input.Edition ||
                    (this.Edition != null &&
                    this.Edition.Equals(input.Edition))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.ImdbId == input.ImdbId ||
                    (this.ImdbId != null &&
                    this.ImdbId.Equals(input.ImdbId))
                ) && 
                (
                    this.TmdbId == input.TmdbId ||
                    this.TmdbId.Equals(input.TmdbId)
                ) && 
                (
                    this.HardcodedSubs == input.HardcodedSubs ||
                    (this.HardcodedSubs != null &&
                    this.HardcodedSubs.Equals(input.HardcodedSubs))
                ) && 
                (
                    this.MovieTitle == input.MovieTitle ||
                    (this.MovieTitle != null &&
                    this.MovieTitle.Equals(input.MovieTitle))
                ) && 
                (
                    this.PrimaryMovieTitle == input.PrimaryMovieTitle ||
                    (this.PrimaryMovieTitle != null &&
                    this.PrimaryMovieTitle.Equals(input.PrimaryMovieTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MovieTitles != null)
                    hashCode = hashCode * 59 + this.MovieTitles.GetHashCode();
                if (this.OriginalTitle != null)
                    hashCode = hashCode * 59 + this.OriginalTitle.GetHashCode();
                if (this.ReleaseTitle != null)
                    hashCode = hashCode * 59 + this.ReleaseTitle.GetHashCode();
                if (this.SimpleReleaseTitle != null)
                    hashCode = hashCode * 59 + this.SimpleReleaseTitle.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.ReleaseGroup != null)
                    hashCode = hashCode * 59 + this.ReleaseGroup.GetHashCode();
                if (this.ReleaseHash != null)
                    hashCode = hashCode * 59 + this.ReleaseHash.GetHashCode();
                if (this.Edition != null)
                    hashCode = hashCode * 59 + this.Edition.GetHashCode();
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.ImdbId != null)
                    hashCode = hashCode * 59 + this.ImdbId.GetHashCode();
                hashCode = hashCode * 59 + this.TmdbId.GetHashCode();
                if (this.HardcodedSubs != null)
                    hashCode = hashCode * 59 + this.HardcodedSubs.GetHashCode();
                if (this.MovieTitle != null)
                    hashCode = hashCode * 59 + this.MovieTitle.GetHashCode();
                if (this.PrimaryMovieTitle != null)
                    hashCode = hashCode * 59 + this.PrimaryMovieTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
