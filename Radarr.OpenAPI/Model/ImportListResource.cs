/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// ImportListResource
    /// </summary>
    [DataContract(Name = "ImportListResource")]
    public partial class ImportListResource : IEquatable<ImportListResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Monitor
        /// </summary>
        [DataMember(Name = "monitor", EmitDefaultValue = false)]
        public MonitorTypes? Monitor { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAvailability
        /// </summary>
        [DataMember(Name = "minimumAvailability", EmitDefaultValue = false)]
        public MovieStatusType? MinimumAvailability { get; set; }

        /// <summary>
        /// Gets or Sets ListType
        /// </summary>
        [DataMember(Name = "listType", EmitDefaultValue = false)]
        public ImportListType? ListType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportListResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="fields">fields.</param>
        /// <param name="implementationName">implementationName.</param>
        /// <param name="implementation">implementation.</param>
        /// <param name="configContract">configContract.</param>
        /// <param name="infoLink">infoLink.</param>
        /// <param name="message">message.</param>
        /// <param name="tags">tags.</param>
        /// <param name="presets">presets.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="enableAuto">enableAuto.</param>
        /// <param name="monitor">monitor.</param>
        /// <param name="rootFolderPath">rootFolderPath.</param>
        /// <param name="qualityProfileId">qualityProfileId.</param>
        /// <param name="searchOnAdd">searchOnAdd.</param>
        /// <param name="minimumAvailability">minimumAvailability.</param>
        /// <param name="listType">listType.</param>
        /// <param name="listOrder">listOrder.</param>
        /// <param name="minRefreshInterval">minRefreshInterval.</param>
        public ImportListResource(int id = default(int), string name = default(string), List<Field> fields = default(List<Field>), string implementationName = default(string), string implementation = default(string), string configContract = default(string), string infoLink = default(string), ProviderMessage message = default(ProviderMessage), List<int> tags = default(List<int>), List<ImportListResource> presets = default(List<ImportListResource>), bool enabled = default(bool), bool enableAuto = default(bool), MonitorTypes? monitor = default(MonitorTypes?), string rootFolderPath = default(string), int qualityProfileId = default(int), bool searchOnAdd = default(bool), MovieStatusType? minimumAvailability = default(MovieStatusType?), ImportListType? listType = default(ImportListType?), int listOrder = default(int), TimeSpan minRefreshInterval = default(TimeSpan))
        {
            this.Id = id;
            this.Name = name;
            this.Fields = fields;
            this.ImplementationName = implementationName;
            this.Implementation = implementation;
            this.ConfigContract = configContract;
            this.InfoLink = infoLink;
            this.Message = message;
            this.Tags = tags;
            this.Presets = presets;
            this.Enabled = enabled;
            this.EnableAuto = enableAuto;
            this.Monitor = monitor;
            this.RootFolderPath = rootFolderPath;
            this.QualityProfileId = qualityProfileId;
            this.SearchOnAdd = searchOnAdd;
            this.MinimumAvailability = minimumAvailability;
            this.ListType = listType;
            this.ListOrder = listOrder;
            this.MinRefreshInterval = minRefreshInterval;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = true)]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationName
        /// </summary>
        [DataMember(Name = "implementationName", EmitDefaultValue = true)]
        public string ImplementationName { get; set; }

        /// <summary>
        /// Gets or Sets Implementation
        /// </summary>
        [DataMember(Name = "implementation", EmitDefaultValue = true)]
        public string Implementation { get; set; }

        /// <summary>
        /// Gets or Sets ConfigContract
        /// </summary>
        [DataMember(Name = "configContract", EmitDefaultValue = true)]
        public string ConfigContract { get; set; }

        /// <summary>
        /// Gets or Sets InfoLink
        /// </summary>
        [DataMember(Name = "infoLink", EmitDefaultValue = true)]
        public string InfoLink { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public ProviderMessage Message { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Presets
        /// </summary>
        [DataMember(Name = "presets", EmitDefaultValue = true)]
        public List<ImportListResource> Presets { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableAuto
        /// </summary>
        [DataMember(Name = "enableAuto", EmitDefaultValue = true)]
        public bool EnableAuto { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderPath
        /// </summary>
        [DataMember(Name = "rootFolderPath", EmitDefaultValue = true)]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Gets or Sets QualityProfileId
        /// </summary>
        [DataMember(Name = "qualityProfileId", EmitDefaultValue = false)]
        public int QualityProfileId { get; set; }

        /// <summary>
        /// Gets or Sets SearchOnAdd
        /// </summary>
        [DataMember(Name = "searchOnAdd", EmitDefaultValue = true)]
        public bool SearchOnAdd { get; set; }

        /// <summary>
        /// Gets or Sets ListOrder
        /// </summary>
        [DataMember(Name = "listOrder", EmitDefaultValue = false)]
        public int ListOrder { get; set; }

        /// <summary>
        /// Gets or Sets MinRefreshInterval
        /// </summary>
        [DataMember(Name = "minRefreshInterval", EmitDefaultValue = false)]
        public TimeSpan MinRefreshInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportListResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  ImplementationName: ").Append(ImplementationName).Append("\n");
            sb.Append("  Implementation: ").Append(Implementation).Append("\n");
            sb.Append("  ConfigContract: ").Append(ConfigContract).Append("\n");
            sb.Append("  InfoLink: ").Append(InfoLink).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Presets: ").Append(Presets).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnableAuto: ").Append(EnableAuto).Append("\n");
            sb.Append("  Monitor: ").Append(Monitor).Append("\n");
            sb.Append("  RootFolderPath: ").Append(RootFolderPath).Append("\n");
            sb.Append("  QualityProfileId: ").Append(QualityProfileId).Append("\n");
            sb.Append("  SearchOnAdd: ").Append(SearchOnAdd).Append("\n");
            sb.Append("  MinimumAvailability: ").Append(MinimumAvailability).Append("\n");
            sb.Append("  ListType: ").Append(ListType).Append("\n");
            sb.Append("  ListOrder: ").Append(ListOrder).Append("\n");
            sb.Append("  MinRefreshInterval: ").Append(MinRefreshInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportListResource);
        }

        /// <summary>
        /// Returns true if ImportListResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportListResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportListResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.ImplementationName == input.ImplementationName ||
                    (this.ImplementationName != null &&
                    this.ImplementationName.Equals(input.ImplementationName))
                ) && 
                (
                    this.Implementation == input.Implementation ||
                    (this.Implementation != null &&
                    this.Implementation.Equals(input.Implementation))
                ) && 
                (
                    this.ConfigContract == input.ConfigContract ||
                    (this.ConfigContract != null &&
                    this.ConfigContract.Equals(input.ConfigContract))
                ) && 
                (
                    this.InfoLink == input.InfoLink ||
                    (this.InfoLink != null &&
                    this.InfoLink.Equals(input.InfoLink))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Presets == input.Presets ||
                    this.Presets != null &&
                    input.Presets != null &&
                    this.Presets.SequenceEqual(input.Presets)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.EnableAuto == input.EnableAuto ||
                    this.EnableAuto.Equals(input.EnableAuto)
                ) && 
                (
                    this.Monitor == input.Monitor ||
                    this.Monitor.Equals(input.Monitor)
                ) && 
                (
                    this.RootFolderPath == input.RootFolderPath ||
                    (this.RootFolderPath != null &&
                    this.RootFolderPath.Equals(input.RootFolderPath))
                ) && 
                (
                    this.QualityProfileId == input.QualityProfileId ||
                    this.QualityProfileId.Equals(input.QualityProfileId)
                ) && 
                (
                    this.SearchOnAdd == input.SearchOnAdd ||
                    this.SearchOnAdd.Equals(input.SearchOnAdd)
                ) && 
                (
                    this.MinimumAvailability == input.MinimumAvailability ||
                    this.MinimumAvailability.Equals(input.MinimumAvailability)
                ) && 
                (
                    this.ListType == input.ListType ||
                    this.ListType.Equals(input.ListType)
                ) && 
                (
                    this.ListOrder == input.ListOrder ||
                    this.ListOrder.Equals(input.ListOrder)
                ) && 
                (
                    this.MinRefreshInterval == input.MinRefreshInterval ||
                    (this.MinRefreshInterval != null &&
                    this.MinRefreshInterval.Equals(input.MinRefreshInterval))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.ImplementationName != null)
                    hashCode = hashCode * 59 + this.ImplementationName.GetHashCode();
                if (this.Implementation != null)
                    hashCode = hashCode * 59 + this.Implementation.GetHashCode();
                if (this.ConfigContract != null)
                    hashCode = hashCode * 59 + this.ConfigContract.GetHashCode();
                if (this.InfoLink != null)
                    hashCode = hashCode * 59 + this.InfoLink.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Presets != null)
                    hashCode = hashCode * 59 + this.Presets.GetHashCode();
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                hashCode = hashCode * 59 + this.EnableAuto.GetHashCode();
                hashCode = hashCode * 59 + this.Monitor.GetHashCode();
                if (this.RootFolderPath != null)
                    hashCode = hashCode * 59 + this.RootFolderPath.GetHashCode();
                hashCode = hashCode * 59 + this.QualityProfileId.GetHashCode();
                hashCode = hashCode * 59 + this.SearchOnAdd.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumAvailability.GetHashCode();
                hashCode = hashCode * 59 + this.ListType.GetHashCode();
                hashCode = hashCode * 59 + this.ListOrder.GetHashCode();
                if (this.MinRefreshInterval != null)
                    hashCode = hashCode * 59 + this.MinRefreshInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
