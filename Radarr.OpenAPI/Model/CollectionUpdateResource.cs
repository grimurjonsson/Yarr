/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// CollectionUpdateResource
    /// </summary>
    [DataContract(Name = "CollectionUpdateResource")]
    public partial class CollectionUpdateResource : IEquatable<CollectionUpdateResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MinimumAvailability
        /// </summary>
        [DataMember(Name = "minimumAvailability", EmitDefaultValue = false)]
        public MovieStatusType? MinimumAvailability { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionUpdateResource" /> class.
        /// </summary>
        /// <param name="collectionIds">collectionIds.</param>
        /// <param name="monitored">monitored.</param>
        /// <param name="monitorMovies">monitorMovies.</param>
        /// <param name="qualityProfileId">qualityProfileId.</param>
        /// <param name="rootFolderPath">rootFolderPath.</param>
        /// <param name="minimumAvailability">minimumAvailability.</param>
        public CollectionUpdateResource(List<int> collectionIds = default(List<int>), bool? monitored = default(bool?), bool? monitorMovies = default(bool?), int? qualityProfileId = default(int?), string rootFolderPath = default(string), MovieStatusType? minimumAvailability = default(MovieStatusType?))
        {
            this.CollectionIds = collectionIds;
            this.Monitored = monitored;
            this.MonitorMovies = monitorMovies;
            this.QualityProfileId = qualityProfileId;
            this.RootFolderPath = rootFolderPath;
            this.MinimumAvailability = minimumAvailability;
        }

        /// <summary>
        /// Gets or Sets CollectionIds
        /// </summary>
        [DataMember(Name = "collectionIds", EmitDefaultValue = true)]
        public List<int> CollectionIds { get; set; }

        /// <summary>
        /// Gets or Sets Monitored
        /// </summary>
        [DataMember(Name = "monitored", EmitDefaultValue = true)]
        public bool? Monitored { get; set; }

        /// <summary>
        /// Gets or Sets MonitorMovies
        /// </summary>
        [DataMember(Name = "monitorMovies", EmitDefaultValue = true)]
        public bool? MonitorMovies { get; set; }

        /// <summary>
        /// Gets or Sets QualityProfileId
        /// </summary>
        [DataMember(Name = "qualityProfileId", EmitDefaultValue = true)]
        public int? QualityProfileId { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderPath
        /// </summary>
        [DataMember(Name = "rootFolderPath", EmitDefaultValue = true)]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionUpdateResource {\n");
            sb.Append("  CollectionIds: ").Append(CollectionIds).Append("\n");
            sb.Append("  Monitored: ").Append(Monitored).Append("\n");
            sb.Append("  MonitorMovies: ").Append(MonitorMovies).Append("\n");
            sb.Append("  QualityProfileId: ").Append(QualityProfileId).Append("\n");
            sb.Append("  RootFolderPath: ").Append(RootFolderPath).Append("\n");
            sb.Append("  MinimumAvailability: ").Append(MinimumAvailability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionUpdateResource);
        }

        /// <summary>
        /// Returns true if CollectionUpdateResource instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionUpdateResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionUpdateResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CollectionIds == input.CollectionIds ||
                    this.CollectionIds != null &&
                    input.CollectionIds != null &&
                    this.CollectionIds.SequenceEqual(input.CollectionIds)
                ) && 
                (
                    this.Monitored == input.Monitored ||
                    (this.Monitored != null &&
                    this.Monitored.Equals(input.Monitored))
                ) && 
                (
                    this.MonitorMovies == input.MonitorMovies ||
                    (this.MonitorMovies != null &&
                    this.MonitorMovies.Equals(input.MonitorMovies))
                ) && 
                (
                    this.QualityProfileId == input.QualityProfileId ||
                    (this.QualityProfileId != null &&
                    this.QualityProfileId.Equals(input.QualityProfileId))
                ) && 
                (
                    this.RootFolderPath == input.RootFolderPath ||
                    (this.RootFolderPath != null &&
                    this.RootFolderPath.Equals(input.RootFolderPath))
                ) && 
                (
                    this.MinimumAvailability == input.MinimumAvailability ||
                    this.MinimumAvailability.Equals(input.MinimumAvailability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionIds != null)
                    hashCode = hashCode * 59 + this.CollectionIds.GetHashCode();
                if (this.Monitored != null)
                    hashCode = hashCode * 59 + this.Monitored.GetHashCode();
                if (this.MonitorMovies != null)
                    hashCode = hashCode * 59 + this.MonitorMovies.GetHashCode();
                if (this.QualityProfileId != null)
                    hashCode = hashCode * 59 + this.QualityProfileId.GetHashCode();
                if (this.RootFolderPath != null)
                    hashCode = hashCode * 59 + this.RootFolderPath.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumAvailability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
