/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// RenameMovieResource
    /// </summary>
    [DataContract(Name = "RenameMovieResource")]
    public partial class RenameMovieResource : IEquatable<RenameMovieResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenameMovieResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="movieId">movieId.</param>
        /// <param name="movieFileId">movieFileId.</param>
        /// <param name="existingPath">existingPath.</param>
        /// <param name="newPath">newPath.</param>
        public RenameMovieResource(int id = default(int), int movieId = default(int), int movieFileId = default(int), string existingPath = default(string), string newPath = default(string))
        {
            this.Id = id;
            this.MovieId = movieId;
            this.MovieFileId = movieFileId;
            this.ExistingPath = existingPath;
            this.NewPath = newPath;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets MovieId
        /// </summary>
        [DataMember(Name = "movieId", EmitDefaultValue = false)]
        public int MovieId { get; set; }

        /// <summary>
        /// Gets or Sets MovieFileId
        /// </summary>
        [DataMember(Name = "movieFileId", EmitDefaultValue = false)]
        public int MovieFileId { get; set; }

        /// <summary>
        /// Gets or Sets ExistingPath
        /// </summary>
        [DataMember(Name = "existingPath", EmitDefaultValue = true)]
        public string ExistingPath { get; set; }

        /// <summary>
        /// Gets or Sets NewPath
        /// </summary>
        [DataMember(Name = "newPath", EmitDefaultValue = true)]
        public string NewPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RenameMovieResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MovieId: ").Append(MovieId).Append("\n");
            sb.Append("  MovieFileId: ").Append(MovieFileId).Append("\n");
            sb.Append("  ExistingPath: ").Append(ExistingPath).Append("\n");
            sb.Append("  NewPath: ").Append(NewPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RenameMovieResource);
        }

        /// <summary>
        /// Returns true if RenameMovieResource instances are equal
        /// </summary>
        /// <param name="input">Instance of RenameMovieResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RenameMovieResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.MovieId == input.MovieId ||
                    this.MovieId.Equals(input.MovieId)
                ) && 
                (
                    this.MovieFileId == input.MovieFileId ||
                    this.MovieFileId.Equals(input.MovieFileId)
                ) && 
                (
                    this.ExistingPath == input.ExistingPath ||
                    (this.ExistingPath != null &&
                    this.ExistingPath.Equals(input.ExistingPath))
                ) && 
                (
                    this.NewPath == input.NewPath ||
                    (this.NewPath != null &&
                    this.NewPath.Equals(input.NewPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.MovieId.GetHashCode();
                hashCode = hashCode * 59 + this.MovieFileId.GetHashCode();
                if (this.ExistingPath != null)
                    hashCode = hashCode * 59 + this.ExistingPath.GetHashCode();
                if (this.NewPath != null)
                    hashCode = hashCode * 59 + this.NewPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
