/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// MovieResource
    /// </summary>
    [DataContract(Name = "MovieResource")]
    public partial class MovieResource : IEquatable<MovieResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public MovieStatusType? Status { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAvailability
        /// </summary>
        [DataMember(Name = "minimumAvailability", EmitDefaultValue = false)]
        public MovieStatusType? MinimumAvailability { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MovieResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="originalTitle">originalTitle.</param>
        /// <param name="originalLanguage">originalLanguage.</param>
        /// <param name="alternateTitles">alternateTitles.</param>
        /// <param name="secondaryYear">secondaryYear.</param>
        /// <param name="secondaryYearSourceId">secondaryYearSourceId.</param>
        /// <param name="sortTitle">sortTitle.</param>
        /// <param name="sizeOnDisk">sizeOnDisk.</param>
        /// <param name="status">status.</param>
        /// <param name="overview">overview.</param>
        /// <param name="inCinemas">inCinemas.</param>
        /// <param name="physicalRelease">physicalRelease.</param>
        /// <param name="digitalRelease">digitalRelease.</param>
        /// <param name="physicalReleaseNote">physicalReleaseNote.</param>
        /// <param name="images">images.</param>
        /// <param name="website">website.</param>
        /// <param name="remotePoster">remotePoster.</param>
        /// <param name="year">year.</param>
        /// <param name="hasFile">hasFile.</param>
        /// <param name="youTubeTrailerId">youTubeTrailerId.</param>
        /// <param name="studio">studio.</param>
        /// <param name="path">path.</param>
        /// <param name="qualityProfileId">qualityProfileId.</param>
        /// <param name="monitored">monitored.</param>
        /// <param name="minimumAvailability">minimumAvailability.</param>
        /// <param name="isAvailable">isAvailable.</param>
        /// <param name="folderName">folderName.</param>
        /// <param name="runtime">runtime.</param>
        /// <param name="cleanTitle">cleanTitle.</param>
        /// <param name="imdbId">imdbId.</param>
        /// <param name="tmdbId">tmdbId.</param>
        /// <param name="titleSlug">titleSlug.</param>
        /// <param name="rootFolderPath">rootFolderPath.</param>
        /// <param name="folder">folder.</param>
        /// <param name="certification">certification.</param>
        /// <param name="genres">genres.</param>
        /// <param name="tags">tags.</param>
        /// <param name="added">added.</param>
        /// <param name="addOptions">addOptions.</param>
        /// <param name="ratings">ratings.</param>
        /// <param name="movieFile">movieFile.</param>
        /// <param name="collection">collection.</param>
        /// <param name="popularity">popularity.</param>
        public MovieResource(int id = default(int), string title = default(string), string originalTitle = default(string), Language originalLanguage = default(Language), List<AlternativeTitleResource> alternateTitles = default(List<AlternativeTitleResource>), int? secondaryYear = default(int?), int secondaryYearSourceId = default(int), string sortTitle = default(string), long? sizeOnDisk = default(long?), MovieStatusType? status = default(MovieStatusType?), string overview = default(string), DateTime? inCinemas = default(DateTime?), DateTime? physicalRelease = default(DateTime?), DateTime? digitalRelease = default(DateTime?), string physicalReleaseNote = default(string), List<MediaCover> images = default(List<MediaCover>), string website = default(string), string remotePoster = default(string), int year = default(int), bool hasFile = default(bool), string youTubeTrailerId = default(string), string studio = default(string), string path = default(string), int qualityProfileId = default(int), bool monitored = default(bool), MovieStatusType? minimumAvailability = default(MovieStatusType?), bool isAvailable = default(bool), string folderName = default(string), int runtime = default(int), string cleanTitle = default(string), string imdbId = default(string), int tmdbId = default(int), string titleSlug = default(string), string rootFolderPath = default(string), string folder = default(string), string certification = default(string), List<string> genres = default(List<string>), List<int> tags = default(List<int>), DateTime added = default(DateTime), AddMovieOptions addOptions = default(AddMovieOptions), Ratings ratings = default(Ratings), MovieFileResource movieFile = default(MovieFileResource), MovieCollection collection = default(MovieCollection), float popularity = default(float))
        {
            this.Id = id;
            this.Title = title;
            this.OriginalTitle = originalTitle;
            this.OriginalLanguage = originalLanguage;
            this.AlternateTitles = alternateTitles;
            this.SecondaryYear = secondaryYear;
            this.SecondaryYearSourceId = secondaryYearSourceId;
            this.SortTitle = sortTitle;
            this.SizeOnDisk = sizeOnDisk;
            this.Status = status;
            this.Overview = overview;
            this.InCinemas = inCinemas;
            this.PhysicalRelease = physicalRelease;
            this.DigitalRelease = digitalRelease;
            this.PhysicalReleaseNote = physicalReleaseNote;
            this.Images = images;
            this.Website = website;
            this.RemotePoster = remotePoster;
            this.Year = year;
            this.HasFile = hasFile;
            this.YouTubeTrailerId = youTubeTrailerId;
            this.Studio = studio;
            this.Path = path;
            this.QualityProfileId = qualityProfileId;
            this.Monitored = monitored;
            this.MinimumAvailability = minimumAvailability;
            this.IsAvailable = isAvailable;
            this.FolderName = folderName;
            this.Runtime = runtime;
            this.CleanTitle = cleanTitle;
            this.ImdbId = imdbId;
            this.TmdbId = tmdbId;
            this.TitleSlug = titleSlug;
            this.RootFolderPath = rootFolderPath;
            this.Folder = folder;
            this.Certification = certification;
            this.Genres = genres;
            this.Tags = tags;
            this.Added = added;
            this.AddOptions = addOptions;
            this.Ratings = ratings;
            this.MovieFile = movieFile;
            this.Collection = collection;
            this.Popularity = popularity;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTitle
        /// </summary>
        [DataMember(Name = "originalTitle", EmitDefaultValue = true)]
        public string OriginalTitle { get; set; }

        /// <summary>
        /// Gets or Sets OriginalLanguage
        /// </summary>
        [DataMember(Name = "originalLanguage", EmitDefaultValue = false)]
        public Language OriginalLanguage { get; set; }

        /// <summary>
        /// Gets or Sets AlternateTitles
        /// </summary>
        [DataMember(Name = "alternateTitles", EmitDefaultValue = true)]
        public List<AlternativeTitleResource> AlternateTitles { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryYear
        /// </summary>
        [DataMember(Name = "secondaryYear", EmitDefaultValue = true)]
        public int? SecondaryYear { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryYearSourceId
        /// </summary>
        [DataMember(Name = "secondaryYearSourceId", EmitDefaultValue = false)]
        public int SecondaryYearSourceId { get; set; }

        /// <summary>
        /// Gets or Sets SortTitle
        /// </summary>
        [DataMember(Name = "sortTitle", EmitDefaultValue = true)]
        public string SortTitle { get; set; }

        /// <summary>
        /// Gets or Sets SizeOnDisk
        /// </summary>
        [DataMember(Name = "sizeOnDisk", EmitDefaultValue = true)]
        public long? SizeOnDisk { get; set; }

        /// <summary>
        /// Gets or Sets Overview
        /// </summary>
        [DataMember(Name = "overview", EmitDefaultValue = true)]
        public string Overview { get; set; }

        /// <summary>
        /// Gets or Sets InCinemas
        /// </summary>
        [DataMember(Name = "inCinemas", EmitDefaultValue = true)]
        public DateTime? InCinemas { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalRelease
        /// </summary>
        [DataMember(Name = "physicalRelease", EmitDefaultValue = true)]
        public DateTime? PhysicalRelease { get; set; }

        /// <summary>
        /// Gets or Sets DigitalRelease
        /// </summary>
        [DataMember(Name = "digitalRelease", EmitDefaultValue = true)]
        public DateTime? DigitalRelease { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalReleaseNote
        /// </summary>
        [DataMember(Name = "physicalReleaseNote", EmitDefaultValue = true)]
        public string PhysicalReleaseNote { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = true)]
        public List<MediaCover> Images { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets RemotePoster
        /// </summary>
        [DataMember(Name = "remotePoster", EmitDefaultValue = true)]
        public string RemotePoster { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets HasFile
        /// </summary>
        [DataMember(Name = "hasFile", EmitDefaultValue = true)]
        public bool HasFile { get; set; }

        /// <summary>
        /// Gets or Sets YouTubeTrailerId
        /// </summary>
        [DataMember(Name = "youTubeTrailerId", EmitDefaultValue = true)]
        public string YouTubeTrailerId { get; set; }

        /// <summary>
        /// Gets or Sets Studio
        /// </summary>
        [DataMember(Name = "studio", EmitDefaultValue = true)]
        public string Studio { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets QualityProfileId
        /// </summary>
        [DataMember(Name = "qualityProfileId", EmitDefaultValue = false)]
        public int QualityProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Monitored
        /// </summary>
        [DataMember(Name = "monitored", EmitDefaultValue = true)]
        public bool Monitored { get; set; }

        /// <summary>
        /// Gets or Sets IsAvailable
        /// </summary>
        [DataMember(Name = "isAvailable", EmitDefaultValue = true)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets FolderName
        /// </summary>
        [DataMember(Name = "folderName", EmitDefaultValue = true)]
        public string FolderName { get; set; }

        /// <summary>
        /// Gets or Sets Runtime
        /// </summary>
        [DataMember(Name = "runtime", EmitDefaultValue = false)]
        public int Runtime { get; set; }

        /// <summary>
        /// Gets or Sets CleanTitle
        /// </summary>
        [DataMember(Name = "cleanTitle", EmitDefaultValue = true)]
        public string CleanTitle { get; set; }

        /// <summary>
        /// Gets or Sets ImdbId
        /// </summary>
        [DataMember(Name = "imdbId", EmitDefaultValue = true)]
        public string ImdbId { get; set; }

        /// <summary>
        /// Gets or Sets TmdbId
        /// </summary>
        [DataMember(Name = "tmdbId", EmitDefaultValue = false)]
        public int TmdbId { get; set; }

        /// <summary>
        /// Gets or Sets TitleSlug
        /// </summary>
        [DataMember(Name = "titleSlug", EmitDefaultValue = true)]
        public string TitleSlug { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderPath
        /// </summary>
        [DataMember(Name = "rootFolderPath", EmitDefaultValue = true)]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Gets or Sets Folder
        /// </summary>
        [DataMember(Name = "folder", EmitDefaultValue = true)]
        public string Folder { get; set; }

        /// <summary>
        /// Gets or Sets Certification
        /// </summary>
        [DataMember(Name = "certification", EmitDefaultValue = true)]
        public string Certification { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name = "genres", EmitDefaultValue = true)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Added
        /// </summary>
        [DataMember(Name = "added", EmitDefaultValue = false)]
        public DateTime Added { get; set; }

        /// <summary>
        /// Gets or Sets AddOptions
        /// </summary>
        [DataMember(Name = "addOptions", EmitDefaultValue = false)]
        public AddMovieOptions AddOptions { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name = "ratings", EmitDefaultValue = false)]
        public Ratings Ratings { get; set; }

        /// <summary>
        /// Gets or Sets MovieFile
        /// </summary>
        [DataMember(Name = "movieFile", EmitDefaultValue = false)]
        public MovieFileResource MovieFile { get; set; }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name = "collection", EmitDefaultValue = false)]
        public MovieCollection Collection { get; set; }

        /// <summary>
        /// Gets or Sets Popularity
        /// </summary>
        [DataMember(Name = "popularity", EmitDefaultValue = false)]
        public float Popularity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MovieResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  OriginalTitle: ").Append(OriginalTitle).Append("\n");
            sb.Append("  OriginalLanguage: ").Append(OriginalLanguage).Append("\n");
            sb.Append("  AlternateTitles: ").Append(AlternateTitles).Append("\n");
            sb.Append("  SecondaryYear: ").Append(SecondaryYear).Append("\n");
            sb.Append("  SecondaryYearSourceId: ").Append(SecondaryYearSourceId).Append("\n");
            sb.Append("  SortTitle: ").Append(SortTitle).Append("\n");
            sb.Append("  SizeOnDisk: ").Append(SizeOnDisk).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Overview: ").Append(Overview).Append("\n");
            sb.Append("  InCinemas: ").Append(InCinemas).Append("\n");
            sb.Append("  PhysicalRelease: ").Append(PhysicalRelease).Append("\n");
            sb.Append("  DigitalRelease: ").Append(DigitalRelease).Append("\n");
            sb.Append("  PhysicalReleaseNote: ").Append(PhysicalReleaseNote).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  RemotePoster: ").Append(RemotePoster).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  HasFile: ").Append(HasFile).Append("\n");
            sb.Append("  YouTubeTrailerId: ").Append(YouTubeTrailerId).Append("\n");
            sb.Append("  Studio: ").Append(Studio).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  QualityProfileId: ").Append(QualityProfileId).Append("\n");
            sb.Append("  Monitored: ").Append(Monitored).Append("\n");
            sb.Append("  MinimumAvailability: ").Append(MinimumAvailability).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  CleanTitle: ").Append(CleanTitle).Append("\n");
            sb.Append("  ImdbId: ").Append(ImdbId).Append("\n");
            sb.Append("  TmdbId: ").Append(TmdbId).Append("\n");
            sb.Append("  TitleSlug: ").Append(TitleSlug).Append("\n");
            sb.Append("  RootFolderPath: ").Append(RootFolderPath).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  Certification: ").Append(Certification).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  AddOptions: ").Append(AddOptions).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  MovieFile: ").Append(MovieFile).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Popularity: ").Append(Popularity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovieResource);
        }

        /// <summary>
        /// Returns true if MovieResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MovieResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovieResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.OriginalTitle == input.OriginalTitle ||
                    (this.OriginalTitle != null &&
                    this.OriginalTitle.Equals(input.OriginalTitle))
                ) && 
                (
                    this.OriginalLanguage == input.OriginalLanguage ||
                    (this.OriginalLanguage != null &&
                    this.OriginalLanguage.Equals(input.OriginalLanguage))
                ) && 
                (
                    this.AlternateTitles == input.AlternateTitles ||
                    this.AlternateTitles != null &&
                    input.AlternateTitles != null &&
                    this.AlternateTitles.SequenceEqual(input.AlternateTitles)
                ) && 
                (
                    this.SecondaryYear == input.SecondaryYear ||
                    (this.SecondaryYear != null &&
                    this.SecondaryYear.Equals(input.SecondaryYear))
                ) && 
                (
                    this.SecondaryYearSourceId == input.SecondaryYearSourceId ||
                    this.SecondaryYearSourceId.Equals(input.SecondaryYearSourceId)
                ) && 
                (
                    this.SortTitle == input.SortTitle ||
                    (this.SortTitle != null &&
                    this.SortTitle.Equals(input.SortTitle))
                ) && 
                (
                    this.SizeOnDisk == input.SizeOnDisk ||
                    (this.SizeOnDisk != null &&
                    this.SizeOnDisk.Equals(input.SizeOnDisk))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Overview == input.Overview ||
                    (this.Overview != null &&
                    this.Overview.Equals(input.Overview))
                ) && 
                (
                    this.InCinemas == input.InCinemas ||
                    (this.InCinemas != null &&
                    this.InCinemas.Equals(input.InCinemas))
                ) && 
                (
                    this.PhysicalRelease == input.PhysicalRelease ||
                    (this.PhysicalRelease != null &&
                    this.PhysicalRelease.Equals(input.PhysicalRelease))
                ) && 
                (
                    this.DigitalRelease == input.DigitalRelease ||
                    (this.DigitalRelease != null &&
                    this.DigitalRelease.Equals(input.DigitalRelease))
                ) && 
                (
                    this.PhysicalReleaseNote == input.PhysicalReleaseNote ||
                    (this.PhysicalReleaseNote != null &&
                    this.PhysicalReleaseNote.Equals(input.PhysicalReleaseNote))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.RemotePoster == input.RemotePoster ||
                    (this.RemotePoster != null &&
                    this.RemotePoster.Equals(input.RemotePoster))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.HasFile == input.HasFile ||
                    this.HasFile.Equals(input.HasFile)
                ) && 
                (
                    this.YouTubeTrailerId == input.YouTubeTrailerId ||
                    (this.YouTubeTrailerId != null &&
                    this.YouTubeTrailerId.Equals(input.YouTubeTrailerId))
                ) && 
                (
                    this.Studio == input.Studio ||
                    (this.Studio != null &&
                    this.Studio.Equals(input.Studio))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.QualityProfileId == input.QualityProfileId ||
                    this.QualityProfileId.Equals(input.QualityProfileId)
                ) && 
                (
                    this.Monitored == input.Monitored ||
                    this.Monitored.Equals(input.Monitored)
                ) && 
                (
                    this.MinimumAvailability == input.MinimumAvailability ||
                    this.MinimumAvailability.Equals(input.MinimumAvailability)
                ) && 
                (
                    this.IsAvailable == input.IsAvailable ||
                    this.IsAvailable.Equals(input.IsAvailable)
                ) && 
                (
                    this.FolderName == input.FolderName ||
                    (this.FolderName != null &&
                    this.FolderName.Equals(input.FolderName))
                ) && 
                (
                    this.Runtime == input.Runtime ||
                    this.Runtime.Equals(input.Runtime)
                ) && 
                (
                    this.CleanTitle == input.CleanTitle ||
                    (this.CleanTitle != null &&
                    this.CleanTitle.Equals(input.CleanTitle))
                ) && 
                (
                    this.ImdbId == input.ImdbId ||
                    (this.ImdbId != null &&
                    this.ImdbId.Equals(input.ImdbId))
                ) && 
                (
                    this.TmdbId == input.TmdbId ||
                    this.TmdbId.Equals(input.TmdbId)
                ) && 
                (
                    this.TitleSlug == input.TitleSlug ||
                    (this.TitleSlug != null &&
                    this.TitleSlug.Equals(input.TitleSlug))
                ) && 
                (
                    this.RootFolderPath == input.RootFolderPath ||
                    (this.RootFolderPath != null &&
                    this.RootFolderPath.Equals(input.RootFolderPath))
                ) && 
                (
                    this.Folder == input.Folder ||
                    (this.Folder != null &&
                    this.Folder.Equals(input.Folder))
                ) && 
                (
                    this.Certification == input.Certification ||
                    (this.Certification != null &&
                    this.Certification.Equals(input.Certification))
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Added == input.Added ||
                    (this.Added != null &&
                    this.Added.Equals(input.Added))
                ) && 
                (
                    this.AddOptions == input.AddOptions ||
                    (this.AddOptions != null &&
                    this.AddOptions.Equals(input.AddOptions))
                ) && 
                (
                    this.Ratings == input.Ratings ||
                    (this.Ratings != null &&
                    this.Ratings.Equals(input.Ratings))
                ) && 
                (
                    this.MovieFile == input.MovieFile ||
                    (this.MovieFile != null &&
                    this.MovieFile.Equals(input.MovieFile))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.Popularity == input.Popularity ||
                    this.Popularity.Equals(input.Popularity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.OriginalTitle != null)
                    hashCode = hashCode * 59 + this.OriginalTitle.GetHashCode();
                if (this.OriginalLanguage != null)
                    hashCode = hashCode * 59 + this.OriginalLanguage.GetHashCode();
                if (this.AlternateTitles != null)
                    hashCode = hashCode * 59 + this.AlternateTitles.GetHashCode();
                if (this.SecondaryYear != null)
                    hashCode = hashCode * 59 + this.SecondaryYear.GetHashCode();
                hashCode = hashCode * 59 + this.SecondaryYearSourceId.GetHashCode();
                if (this.SortTitle != null)
                    hashCode = hashCode * 59 + this.SortTitle.GetHashCode();
                if (this.SizeOnDisk != null)
                    hashCode = hashCode * 59 + this.SizeOnDisk.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Overview != null)
                    hashCode = hashCode * 59 + this.Overview.GetHashCode();
                if (this.InCinemas != null)
                    hashCode = hashCode * 59 + this.InCinemas.GetHashCode();
                if (this.PhysicalRelease != null)
                    hashCode = hashCode * 59 + this.PhysicalRelease.GetHashCode();
                if (this.DigitalRelease != null)
                    hashCode = hashCode * 59 + this.DigitalRelease.GetHashCode();
                if (this.PhysicalReleaseNote != null)
                    hashCode = hashCode * 59 + this.PhysicalReleaseNote.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.RemotePoster != null)
                    hashCode = hashCode * 59 + this.RemotePoster.GetHashCode();
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                hashCode = hashCode * 59 + this.HasFile.GetHashCode();
                if (this.YouTubeTrailerId != null)
                    hashCode = hashCode * 59 + this.YouTubeTrailerId.GetHashCode();
                if (this.Studio != null)
                    hashCode = hashCode * 59 + this.Studio.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.QualityProfileId.GetHashCode();
                hashCode = hashCode * 59 + this.Monitored.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumAvailability.GetHashCode();
                hashCode = hashCode * 59 + this.IsAvailable.GetHashCode();
                if (this.FolderName != null)
                    hashCode = hashCode * 59 + this.FolderName.GetHashCode();
                hashCode = hashCode * 59 + this.Runtime.GetHashCode();
                if (this.CleanTitle != null)
                    hashCode = hashCode * 59 + this.CleanTitle.GetHashCode();
                if (this.ImdbId != null)
                    hashCode = hashCode * 59 + this.ImdbId.GetHashCode();
                hashCode = hashCode * 59 + this.TmdbId.GetHashCode();
                if (this.TitleSlug != null)
                    hashCode = hashCode * 59 + this.TitleSlug.GetHashCode();
                if (this.RootFolderPath != null)
                    hashCode = hashCode * 59 + this.RootFolderPath.GetHashCode();
                if (this.Folder != null)
                    hashCode = hashCode * 59 + this.Folder.GetHashCode();
                if (this.Certification != null)
                    hashCode = hashCode * 59 + this.Certification.GetHashCode();
                if (this.Genres != null)
                    hashCode = hashCode * 59 + this.Genres.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Added != null)
                    hashCode = hashCode * 59 + this.Added.GetHashCode();
                if (this.AddOptions != null)
                    hashCode = hashCode * 59 + this.AddOptions.GetHashCode();
                if (this.Ratings != null)
                    hashCode = hashCode * 59 + this.Ratings.GetHashCode();
                if (this.MovieFile != null)
                    hashCode = hashCode * 59 + this.MovieFile.GetHashCode();
                if (this.Collection != null)
                    hashCode = hashCode * 59 + this.Collection.GetHashCode();
                hashCode = hashCode * 59 + this.Popularity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
