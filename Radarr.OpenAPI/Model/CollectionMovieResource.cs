/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// CollectionMovieResource
    /// </summary>
    [DataContract(Name = "CollectionMovieResource")]
    public partial class CollectionMovieResource : IEquatable<CollectionMovieResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionMovieResource" /> class.
        /// </summary>
        /// <param name="tmdbId">tmdbId.</param>
        /// <param name="imdbId">imdbId.</param>
        /// <param name="title">title.</param>
        /// <param name="cleanTitle">cleanTitle.</param>
        /// <param name="sortTitle">sortTitle.</param>
        /// <param name="overview">overview.</param>
        /// <param name="runtime">runtime.</param>
        /// <param name="images">images.</param>
        /// <param name="year">year.</param>
        /// <param name="ratings">ratings.</param>
        /// <param name="genres">genres.</param>
        /// <param name="folder">folder.</param>
        public CollectionMovieResource(int tmdbId = default(int), string imdbId = default(string), string title = default(string), string cleanTitle = default(string), string sortTitle = default(string), string overview = default(string), int runtime = default(int), List<MediaCover> images = default(List<MediaCover>), int year = default(int), Ratings ratings = default(Ratings), List<string> genres = default(List<string>), string folder = default(string))
        {
            this.TmdbId = tmdbId;
            this.ImdbId = imdbId;
            this.Title = title;
            this.CleanTitle = cleanTitle;
            this.SortTitle = sortTitle;
            this.Overview = overview;
            this.Runtime = runtime;
            this.Images = images;
            this.Year = year;
            this.Ratings = ratings;
            this.Genres = genres;
            this.Folder = folder;
        }

        /// <summary>
        /// Gets or Sets TmdbId
        /// </summary>
        [DataMember(Name = "tmdbId", EmitDefaultValue = false)]
        public int TmdbId { get; set; }

        /// <summary>
        /// Gets or Sets ImdbId
        /// </summary>
        [DataMember(Name = "imdbId", EmitDefaultValue = true)]
        public string ImdbId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets CleanTitle
        /// </summary>
        [DataMember(Name = "cleanTitle", EmitDefaultValue = true)]
        public string CleanTitle { get; set; }

        /// <summary>
        /// Gets or Sets SortTitle
        /// </summary>
        [DataMember(Name = "sortTitle", EmitDefaultValue = true)]
        public string SortTitle { get; set; }

        /// <summary>
        /// Gets or Sets Overview
        /// </summary>
        [DataMember(Name = "overview", EmitDefaultValue = true)]
        public string Overview { get; set; }

        /// <summary>
        /// Gets or Sets Runtime
        /// </summary>
        [DataMember(Name = "runtime", EmitDefaultValue = false)]
        public int Runtime { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = true)]
        public List<MediaCover> Images { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name = "ratings", EmitDefaultValue = false)]
        public Ratings Ratings { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name = "genres", EmitDefaultValue = true)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// Gets or Sets Folder
        /// </summary>
        [DataMember(Name = "folder", EmitDefaultValue = true)]
        public string Folder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionMovieResource {\n");
            sb.Append("  TmdbId: ").Append(TmdbId).Append("\n");
            sb.Append("  ImdbId: ").Append(ImdbId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  CleanTitle: ").Append(CleanTitle).Append("\n");
            sb.Append("  SortTitle: ").Append(SortTitle).Append("\n");
            sb.Append("  Overview: ").Append(Overview).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionMovieResource);
        }

        /// <summary>
        /// Returns true if CollectionMovieResource instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionMovieResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionMovieResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TmdbId == input.TmdbId ||
                    this.TmdbId.Equals(input.TmdbId)
                ) && 
                (
                    this.ImdbId == input.ImdbId ||
                    (this.ImdbId != null &&
                    this.ImdbId.Equals(input.ImdbId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.CleanTitle == input.CleanTitle ||
                    (this.CleanTitle != null &&
                    this.CleanTitle.Equals(input.CleanTitle))
                ) && 
                (
                    this.SortTitle == input.SortTitle ||
                    (this.SortTitle != null &&
                    this.SortTitle.Equals(input.SortTitle))
                ) && 
                (
                    this.Overview == input.Overview ||
                    (this.Overview != null &&
                    this.Overview.Equals(input.Overview))
                ) && 
                (
                    this.Runtime == input.Runtime ||
                    this.Runtime.Equals(input.Runtime)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Ratings == input.Ratings ||
                    (this.Ratings != null &&
                    this.Ratings.Equals(input.Ratings))
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.Folder == input.Folder ||
                    (this.Folder != null &&
                    this.Folder.Equals(input.Folder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TmdbId.GetHashCode();
                if (this.ImdbId != null)
                    hashCode = hashCode * 59 + this.ImdbId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.CleanTitle != null)
                    hashCode = hashCode * 59 + this.CleanTitle.GetHashCode();
                if (this.SortTitle != null)
                    hashCode = hashCode * 59 + this.SortTitle.GetHashCode();
                if (this.Overview != null)
                    hashCode = hashCode * 59 + this.Overview.GetHashCode();
                hashCode = hashCode * 59 + this.Runtime.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Ratings != null)
                    hashCode = hashCode * 59 + this.Ratings.GetHashCode();
                if (this.Genres != null)
                    hashCode = hashCode * 59 + this.Genres.GetHashCode();
                if (this.Folder != null)
                    hashCode = hashCode * 59 + this.Folder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
