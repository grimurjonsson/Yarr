/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// MovieMetadata
    /// </summary>
    [DataContract(Name = "MovieMetadata")]
    public partial class MovieMetadata : IEquatable<MovieMetadata>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public MovieStatusType? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MovieMetadata" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="tmdbId">tmdbId.</param>
        /// <param name="images">images.</param>
        /// <param name="genres">genres.</param>
        /// <param name="inCinemas">inCinemas.</param>
        /// <param name="physicalRelease">physicalRelease.</param>
        /// <param name="digitalRelease">digitalRelease.</param>
        /// <param name="certification">certification.</param>
        /// <param name="year">year.</param>
        /// <param name="ratings">ratings.</param>
        /// <param name="collectionTmdbId">collectionTmdbId.</param>
        /// <param name="collectionTitle">collectionTitle.</param>
        /// <param name="lastInfoSync">lastInfoSync.</param>
        /// <param name="runtime">runtime.</param>
        /// <param name="website">website.</param>
        /// <param name="imdbId">imdbId.</param>
        /// <param name="title">title.</param>
        /// <param name="cleanTitle">cleanTitle.</param>
        /// <param name="sortTitle">sortTitle.</param>
        /// <param name="status">status.</param>
        /// <param name="overview">overview.</param>
        /// <param name="alternativeTitles">alternativeTitles.</param>
        /// <param name="translations">translations.</param>
        /// <param name="secondaryYear">secondaryYear.</param>
        /// <param name="youTubeTrailerId">youTubeTrailerId.</param>
        /// <param name="studio">studio.</param>
        /// <param name="originalTitle">originalTitle.</param>
        /// <param name="cleanOriginalTitle">cleanOriginalTitle.</param>
        /// <param name="originalLanguage">originalLanguage.</param>
        /// <param name="recommendations">recommendations.</param>
        /// <param name="popularity">popularity.</param>
        public MovieMetadata(int id = default(int), int tmdbId = default(int), List<MediaCover> images = default(List<MediaCover>), List<string> genres = default(List<string>), DateTime? inCinemas = default(DateTime?), DateTime? physicalRelease = default(DateTime?), DateTime? digitalRelease = default(DateTime?), string certification = default(string), int year = default(int), Ratings ratings = default(Ratings), int collectionTmdbId = default(int), string collectionTitle = default(string), DateTime? lastInfoSync = default(DateTime?), int runtime = default(int), string website = default(string), string imdbId = default(string), string title = default(string), string cleanTitle = default(string), string sortTitle = default(string), MovieStatusType? status = default(MovieStatusType?), string overview = default(string), List<AlternativeTitle> alternativeTitles = default(List<AlternativeTitle>), List<MovieTranslation> translations = default(List<MovieTranslation>), int? secondaryYear = default(int?), string youTubeTrailerId = default(string), string studio = default(string), string originalTitle = default(string), string cleanOriginalTitle = default(string), Language originalLanguage = default(Language), List<int> recommendations = default(List<int>), float popularity = default(float))
        {
            this.Id = id;
            this.TmdbId = tmdbId;
            this.Images = images;
            this.Genres = genres;
            this.InCinemas = inCinemas;
            this.PhysicalRelease = physicalRelease;
            this.DigitalRelease = digitalRelease;
            this.Certification = certification;
            this.Year = year;
            this.Ratings = ratings;
            this.CollectionTmdbId = collectionTmdbId;
            this.CollectionTitle = collectionTitle;
            this.LastInfoSync = lastInfoSync;
            this.Runtime = runtime;
            this.Website = website;
            this.ImdbId = imdbId;
            this.Title = title;
            this.CleanTitle = cleanTitle;
            this.SortTitle = sortTitle;
            this.Status = status;
            this.Overview = overview;
            this.AlternativeTitles = alternativeTitles;
            this.Translations = translations;
            this.SecondaryYear = secondaryYear;
            this.YouTubeTrailerId = youTubeTrailerId;
            this.Studio = studio;
            this.OriginalTitle = originalTitle;
            this.CleanOriginalTitle = cleanOriginalTitle;
            this.OriginalLanguage = originalLanguage;
            this.Recommendations = recommendations;
            this.Popularity = popularity;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets TmdbId
        /// </summary>
        [DataMember(Name = "tmdbId", EmitDefaultValue = false)]
        public int TmdbId { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = true)]
        public List<MediaCover> Images { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name = "genres", EmitDefaultValue = true)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// Gets or Sets InCinemas
        /// </summary>
        [DataMember(Name = "inCinemas", EmitDefaultValue = true)]
        public DateTime? InCinemas { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalRelease
        /// </summary>
        [DataMember(Name = "physicalRelease", EmitDefaultValue = true)]
        public DateTime? PhysicalRelease { get; set; }

        /// <summary>
        /// Gets or Sets DigitalRelease
        /// </summary>
        [DataMember(Name = "digitalRelease", EmitDefaultValue = true)]
        public DateTime? DigitalRelease { get; set; }

        /// <summary>
        /// Gets or Sets Certification
        /// </summary>
        [DataMember(Name = "certification", EmitDefaultValue = true)]
        public string Certification { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name = "ratings", EmitDefaultValue = false)]
        public Ratings Ratings { get; set; }

        /// <summary>
        /// Gets or Sets CollectionTmdbId
        /// </summary>
        [DataMember(Name = "collectionTmdbId", EmitDefaultValue = false)]
        public int CollectionTmdbId { get; set; }

        /// <summary>
        /// Gets or Sets CollectionTitle
        /// </summary>
        [DataMember(Name = "collectionTitle", EmitDefaultValue = true)]
        public string CollectionTitle { get; set; }

        /// <summary>
        /// Gets or Sets LastInfoSync
        /// </summary>
        [DataMember(Name = "lastInfoSync", EmitDefaultValue = true)]
        public DateTime? LastInfoSync { get; set; }

        /// <summary>
        /// Gets or Sets Runtime
        /// </summary>
        [DataMember(Name = "runtime", EmitDefaultValue = false)]
        public int Runtime { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets ImdbId
        /// </summary>
        [DataMember(Name = "imdbId", EmitDefaultValue = true)]
        public string ImdbId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets CleanTitle
        /// </summary>
        [DataMember(Name = "cleanTitle", EmitDefaultValue = true)]
        public string CleanTitle { get; set; }

        /// <summary>
        /// Gets or Sets SortTitle
        /// </summary>
        [DataMember(Name = "sortTitle", EmitDefaultValue = true)]
        public string SortTitle { get; set; }

        /// <summary>
        /// Gets or Sets Overview
        /// </summary>
        [DataMember(Name = "overview", EmitDefaultValue = true)]
        public string Overview { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeTitles
        /// </summary>
        [DataMember(Name = "alternativeTitles", EmitDefaultValue = true)]
        public List<AlternativeTitle> AlternativeTitles { get; set; }

        /// <summary>
        /// Gets or Sets Translations
        /// </summary>
        [DataMember(Name = "translations", EmitDefaultValue = true)]
        public List<MovieTranslation> Translations { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryYear
        /// </summary>
        [DataMember(Name = "secondaryYear", EmitDefaultValue = true)]
        public int? SecondaryYear { get; set; }

        /// <summary>
        /// Gets or Sets YouTubeTrailerId
        /// </summary>
        [DataMember(Name = "youTubeTrailerId", EmitDefaultValue = true)]
        public string YouTubeTrailerId { get; set; }

        /// <summary>
        /// Gets or Sets Studio
        /// </summary>
        [DataMember(Name = "studio", EmitDefaultValue = true)]
        public string Studio { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTitle
        /// </summary>
        [DataMember(Name = "originalTitle", EmitDefaultValue = true)]
        public string OriginalTitle { get; set; }

        /// <summary>
        /// Gets or Sets CleanOriginalTitle
        /// </summary>
        [DataMember(Name = "cleanOriginalTitle", EmitDefaultValue = true)]
        public string CleanOriginalTitle { get; set; }

        /// <summary>
        /// Gets or Sets OriginalLanguage
        /// </summary>
        [DataMember(Name = "originalLanguage", EmitDefaultValue = false)]
        public Language OriginalLanguage { get; set; }

        /// <summary>
        /// Gets or Sets Recommendations
        /// </summary>
        [DataMember(Name = "recommendations", EmitDefaultValue = true)]
        public List<int> Recommendations { get; set; }

        /// <summary>
        /// Gets or Sets Popularity
        /// </summary>
        [DataMember(Name = "popularity", EmitDefaultValue = false)]
        public float Popularity { get; set; }

        /// <summary>
        /// Gets or Sets IsRecentMovie
        /// </summary>
        [DataMember(Name = "isRecentMovie", EmitDefaultValue = true)]
        public bool IsRecentMovie { get; private set; }

        /// <summary>
        /// Returns false as IsRecentMovie should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsRecentMovie()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MovieMetadata {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TmdbId: ").Append(TmdbId).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  InCinemas: ").Append(InCinemas).Append("\n");
            sb.Append("  PhysicalRelease: ").Append(PhysicalRelease).Append("\n");
            sb.Append("  DigitalRelease: ").Append(DigitalRelease).Append("\n");
            sb.Append("  Certification: ").Append(Certification).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  CollectionTmdbId: ").Append(CollectionTmdbId).Append("\n");
            sb.Append("  CollectionTitle: ").Append(CollectionTitle).Append("\n");
            sb.Append("  LastInfoSync: ").Append(LastInfoSync).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  ImdbId: ").Append(ImdbId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  CleanTitle: ").Append(CleanTitle).Append("\n");
            sb.Append("  SortTitle: ").Append(SortTitle).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Overview: ").Append(Overview).Append("\n");
            sb.Append("  AlternativeTitles: ").Append(AlternativeTitles).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  SecondaryYear: ").Append(SecondaryYear).Append("\n");
            sb.Append("  YouTubeTrailerId: ").Append(YouTubeTrailerId).Append("\n");
            sb.Append("  Studio: ").Append(Studio).Append("\n");
            sb.Append("  OriginalTitle: ").Append(OriginalTitle).Append("\n");
            sb.Append("  CleanOriginalTitle: ").Append(CleanOriginalTitle).Append("\n");
            sb.Append("  OriginalLanguage: ").Append(OriginalLanguage).Append("\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("  Popularity: ").Append(Popularity).Append("\n");
            sb.Append("  IsRecentMovie: ").Append(IsRecentMovie).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovieMetadata);
        }

        /// <summary>
        /// Returns true if MovieMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of MovieMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovieMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.TmdbId == input.TmdbId ||
                    this.TmdbId.Equals(input.TmdbId)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.InCinemas == input.InCinemas ||
                    (this.InCinemas != null &&
                    this.InCinemas.Equals(input.InCinemas))
                ) && 
                (
                    this.PhysicalRelease == input.PhysicalRelease ||
                    (this.PhysicalRelease != null &&
                    this.PhysicalRelease.Equals(input.PhysicalRelease))
                ) && 
                (
                    this.DigitalRelease == input.DigitalRelease ||
                    (this.DigitalRelease != null &&
                    this.DigitalRelease.Equals(input.DigitalRelease))
                ) && 
                (
                    this.Certification == input.Certification ||
                    (this.Certification != null &&
                    this.Certification.Equals(input.Certification))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Ratings == input.Ratings ||
                    (this.Ratings != null &&
                    this.Ratings.Equals(input.Ratings))
                ) && 
                (
                    this.CollectionTmdbId == input.CollectionTmdbId ||
                    this.CollectionTmdbId.Equals(input.CollectionTmdbId)
                ) && 
                (
                    this.CollectionTitle == input.CollectionTitle ||
                    (this.CollectionTitle != null &&
                    this.CollectionTitle.Equals(input.CollectionTitle))
                ) && 
                (
                    this.LastInfoSync == input.LastInfoSync ||
                    (this.LastInfoSync != null &&
                    this.LastInfoSync.Equals(input.LastInfoSync))
                ) && 
                (
                    this.Runtime == input.Runtime ||
                    this.Runtime.Equals(input.Runtime)
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.ImdbId == input.ImdbId ||
                    (this.ImdbId != null &&
                    this.ImdbId.Equals(input.ImdbId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.CleanTitle == input.CleanTitle ||
                    (this.CleanTitle != null &&
                    this.CleanTitle.Equals(input.CleanTitle))
                ) && 
                (
                    this.SortTitle == input.SortTitle ||
                    (this.SortTitle != null &&
                    this.SortTitle.Equals(input.SortTitle))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Overview == input.Overview ||
                    (this.Overview != null &&
                    this.Overview.Equals(input.Overview))
                ) && 
                (
                    this.AlternativeTitles == input.AlternativeTitles ||
                    this.AlternativeTitles != null &&
                    input.AlternativeTitles != null &&
                    this.AlternativeTitles.SequenceEqual(input.AlternativeTitles)
                ) && 
                (
                    this.Translations == input.Translations ||
                    this.Translations != null &&
                    input.Translations != null &&
                    this.Translations.SequenceEqual(input.Translations)
                ) && 
                (
                    this.SecondaryYear == input.SecondaryYear ||
                    (this.SecondaryYear != null &&
                    this.SecondaryYear.Equals(input.SecondaryYear))
                ) && 
                (
                    this.YouTubeTrailerId == input.YouTubeTrailerId ||
                    (this.YouTubeTrailerId != null &&
                    this.YouTubeTrailerId.Equals(input.YouTubeTrailerId))
                ) && 
                (
                    this.Studio == input.Studio ||
                    (this.Studio != null &&
                    this.Studio.Equals(input.Studio))
                ) && 
                (
                    this.OriginalTitle == input.OriginalTitle ||
                    (this.OriginalTitle != null &&
                    this.OriginalTitle.Equals(input.OriginalTitle))
                ) && 
                (
                    this.CleanOriginalTitle == input.CleanOriginalTitle ||
                    (this.CleanOriginalTitle != null &&
                    this.CleanOriginalTitle.Equals(input.CleanOriginalTitle))
                ) && 
                (
                    this.OriginalLanguage == input.OriginalLanguage ||
                    (this.OriginalLanguage != null &&
                    this.OriginalLanguage.Equals(input.OriginalLanguage))
                ) && 
                (
                    this.Recommendations == input.Recommendations ||
                    this.Recommendations != null &&
                    input.Recommendations != null &&
                    this.Recommendations.SequenceEqual(input.Recommendations)
                ) && 
                (
                    this.Popularity == input.Popularity ||
                    this.Popularity.Equals(input.Popularity)
                ) && 
                (
                    this.IsRecentMovie == input.IsRecentMovie ||
                    this.IsRecentMovie.Equals(input.IsRecentMovie)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.TmdbId.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Genres != null)
                    hashCode = hashCode * 59 + this.Genres.GetHashCode();
                if (this.InCinemas != null)
                    hashCode = hashCode * 59 + this.InCinemas.GetHashCode();
                if (this.PhysicalRelease != null)
                    hashCode = hashCode * 59 + this.PhysicalRelease.GetHashCode();
                if (this.DigitalRelease != null)
                    hashCode = hashCode * 59 + this.DigitalRelease.GetHashCode();
                if (this.Certification != null)
                    hashCode = hashCode * 59 + this.Certification.GetHashCode();
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Ratings != null)
                    hashCode = hashCode * 59 + this.Ratings.GetHashCode();
                hashCode = hashCode * 59 + this.CollectionTmdbId.GetHashCode();
                if (this.CollectionTitle != null)
                    hashCode = hashCode * 59 + this.CollectionTitle.GetHashCode();
                if (this.LastInfoSync != null)
                    hashCode = hashCode * 59 + this.LastInfoSync.GetHashCode();
                hashCode = hashCode * 59 + this.Runtime.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.ImdbId != null)
                    hashCode = hashCode * 59 + this.ImdbId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.CleanTitle != null)
                    hashCode = hashCode * 59 + this.CleanTitle.GetHashCode();
                if (this.SortTitle != null)
                    hashCode = hashCode * 59 + this.SortTitle.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Overview != null)
                    hashCode = hashCode * 59 + this.Overview.GetHashCode();
                if (this.AlternativeTitles != null)
                    hashCode = hashCode * 59 + this.AlternativeTitles.GetHashCode();
                if (this.Translations != null)
                    hashCode = hashCode * 59 + this.Translations.GetHashCode();
                if (this.SecondaryYear != null)
                    hashCode = hashCode * 59 + this.SecondaryYear.GetHashCode();
                if (this.YouTubeTrailerId != null)
                    hashCode = hashCode * 59 + this.YouTubeTrailerId.GetHashCode();
                if (this.Studio != null)
                    hashCode = hashCode * 59 + this.Studio.GetHashCode();
                if (this.OriginalTitle != null)
                    hashCode = hashCode * 59 + this.OriginalTitle.GetHashCode();
                if (this.CleanOriginalTitle != null)
                    hashCode = hashCode * 59 + this.CleanOriginalTitle.GetHashCode();
                if (this.OriginalLanguage != null)
                    hashCode = hashCode * 59 + this.OriginalLanguage.GetHashCode();
                if (this.Recommendations != null)
                    hashCode = hashCode * 59 + this.Recommendations.GetHashCode();
                hashCode = hashCode * 59 + this.Popularity.GetHashCode();
                hashCode = hashCode * 59 + this.IsRecentMovie.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
