/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// DiskSpaceResource
    /// </summary>
    [DataContract(Name = "DiskSpaceResource")]
    public partial class DiskSpaceResource : IEquatable<DiskSpaceResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiskSpaceResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="path">path.</param>
        /// <param name="label">label.</param>
        /// <param name="freeSpace">freeSpace.</param>
        /// <param name="totalSpace">totalSpace.</param>
        public DiskSpaceResource(int id = default(int), string path = default(string), string label = default(string), long freeSpace = default(long), long totalSpace = default(long))
        {
            this.Id = id;
            this.Path = path;
            this.Label = label;
            this.FreeSpace = freeSpace;
            this.TotalSpace = totalSpace;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets FreeSpace
        /// </summary>
        [DataMember(Name = "freeSpace", EmitDefaultValue = false)]
        public long FreeSpace { get; set; }

        /// <summary>
        /// Gets or Sets TotalSpace
        /// </summary>
        [DataMember(Name = "totalSpace", EmitDefaultValue = false)]
        public long TotalSpace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiskSpaceResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  FreeSpace: ").Append(FreeSpace).Append("\n");
            sb.Append("  TotalSpace: ").Append(TotalSpace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiskSpaceResource);
        }

        /// <summary>
        /// Returns true if DiskSpaceResource instances are equal
        /// </summary>
        /// <param name="input">Instance of DiskSpaceResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiskSpaceResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.FreeSpace == input.FreeSpace ||
                    this.FreeSpace.Equals(input.FreeSpace)
                ) && 
                (
                    this.TotalSpace == input.TotalSpace ||
                    this.TotalSpace.Equals(input.TotalSpace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                hashCode = hashCode * 59 + this.FreeSpace.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSpace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
