/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// CustomFormatResource
    /// </summary>
    [DataContract(Name = "CustomFormatResource")]
    public partial class CustomFormatResource : IEquatable<CustomFormatResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormatResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="includeCustomFormatWhenRenaming">includeCustomFormatWhenRenaming.</param>
        /// <param name="specifications">specifications.</param>
        public CustomFormatResource(int id = default(int), string name = default(string), bool? includeCustomFormatWhenRenaming = default(bool?), List<CustomFormatSpecificationSchema> specifications = default(List<CustomFormatSpecificationSchema>))
        {
            this.Id = id;
            this.Name = name;
            this.IncludeCustomFormatWhenRenaming = includeCustomFormatWhenRenaming;
            this.Specifications = specifications;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IncludeCustomFormatWhenRenaming
        /// </summary>
        [DataMember(Name = "includeCustomFormatWhenRenaming", EmitDefaultValue = true)]
        public bool? IncludeCustomFormatWhenRenaming { get; set; }

        /// <summary>
        /// Gets or Sets Specifications
        /// </summary>
        [DataMember(Name = "specifications", EmitDefaultValue = true)]
        public List<CustomFormatSpecificationSchema> Specifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFormatResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IncludeCustomFormatWhenRenaming: ").Append(IncludeCustomFormatWhenRenaming).Append("\n");
            sb.Append("  Specifications: ").Append(Specifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFormatResource);
        }

        /// <summary>
        /// Returns true if CustomFormatResource instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFormatResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFormatResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IncludeCustomFormatWhenRenaming == input.IncludeCustomFormatWhenRenaming ||
                    (this.IncludeCustomFormatWhenRenaming != null &&
                    this.IncludeCustomFormatWhenRenaming.Equals(input.IncludeCustomFormatWhenRenaming))
                ) && 
                (
                    this.Specifications == input.Specifications ||
                    this.Specifications != null &&
                    input.Specifications != null &&
                    this.Specifications.SequenceEqual(input.Specifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IncludeCustomFormatWhenRenaming != null)
                    hashCode = hashCode * 59 + this.IncludeCustomFormatWhenRenaming.GetHashCode();
                if (this.Specifications != null)
                    hashCode = hashCode * 59 + this.Specifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
