/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// NamingConfigResource
    /// </summary>
    [DataContract(Name = "NamingConfigResource")]
    public partial class NamingConfigResource : IEquatable<NamingConfigResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ColonReplacementFormat
        /// </summary>
        [DataMember(Name = "colonReplacementFormat", EmitDefaultValue = false)]
        public ColonReplacementFormat? ColonReplacementFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamingConfigResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="renameMovies">renameMovies.</param>
        /// <param name="replaceIllegalCharacters">replaceIllegalCharacters.</param>
        /// <param name="colonReplacementFormat">colonReplacementFormat.</param>
        /// <param name="standardMovieFormat">standardMovieFormat.</param>
        /// <param name="movieFolderFormat">movieFolderFormat.</param>
        /// <param name="includeQuality">includeQuality.</param>
        /// <param name="replaceSpaces">replaceSpaces.</param>
        /// <param name="separator">separator.</param>
        /// <param name="numberStyle">numberStyle.</param>
        public NamingConfigResource(int id = default(int), bool renameMovies = default(bool), bool replaceIllegalCharacters = default(bool), ColonReplacementFormat? colonReplacementFormat = default(ColonReplacementFormat?), string standardMovieFormat = default(string), string movieFolderFormat = default(string), bool includeQuality = default(bool), bool replaceSpaces = default(bool), string separator = default(string), string numberStyle = default(string))
        {
            this.Id = id;
            this.RenameMovies = renameMovies;
            this.ReplaceIllegalCharacters = replaceIllegalCharacters;
            this.ColonReplacementFormat = colonReplacementFormat;
            this.StandardMovieFormat = standardMovieFormat;
            this.MovieFolderFormat = movieFolderFormat;
            this.IncludeQuality = includeQuality;
            this.ReplaceSpaces = replaceSpaces;
            this.Separator = separator;
            this.NumberStyle = numberStyle;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RenameMovies
        /// </summary>
        [DataMember(Name = "renameMovies", EmitDefaultValue = true)]
        public bool RenameMovies { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceIllegalCharacters
        /// </summary>
        [DataMember(Name = "replaceIllegalCharacters", EmitDefaultValue = true)]
        public bool ReplaceIllegalCharacters { get; set; }

        /// <summary>
        /// Gets or Sets StandardMovieFormat
        /// </summary>
        [DataMember(Name = "standardMovieFormat", EmitDefaultValue = true)]
        public string StandardMovieFormat { get; set; }

        /// <summary>
        /// Gets or Sets MovieFolderFormat
        /// </summary>
        [DataMember(Name = "movieFolderFormat", EmitDefaultValue = true)]
        public string MovieFolderFormat { get; set; }

        /// <summary>
        /// Gets or Sets IncludeQuality
        /// </summary>
        [DataMember(Name = "includeQuality", EmitDefaultValue = true)]
        public bool IncludeQuality { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceSpaces
        /// </summary>
        [DataMember(Name = "replaceSpaces", EmitDefaultValue = true)]
        public bool ReplaceSpaces { get; set; }

        /// <summary>
        /// Gets or Sets Separator
        /// </summary>
        [DataMember(Name = "separator", EmitDefaultValue = true)]
        public string Separator { get; set; }

        /// <summary>
        /// Gets or Sets NumberStyle
        /// </summary>
        [DataMember(Name = "numberStyle", EmitDefaultValue = true)]
        public string NumberStyle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NamingConfigResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RenameMovies: ").Append(RenameMovies).Append("\n");
            sb.Append("  ReplaceIllegalCharacters: ").Append(ReplaceIllegalCharacters).Append("\n");
            sb.Append("  ColonReplacementFormat: ").Append(ColonReplacementFormat).Append("\n");
            sb.Append("  StandardMovieFormat: ").Append(StandardMovieFormat).Append("\n");
            sb.Append("  MovieFolderFormat: ").Append(MovieFolderFormat).Append("\n");
            sb.Append("  IncludeQuality: ").Append(IncludeQuality).Append("\n");
            sb.Append("  ReplaceSpaces: ").Append(ReplaceSpaces).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  NumberStyle: ").Append(NumberStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NamingConfigResource);
        }

        /// <summary>
        /// Returns true if NamingConfigResource instances are equal
        /// </summary>
        /// <param name="input">Instance of NamingConfigResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NamingConfigResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RenameMovies == input.RenameMovies ||
                    this.RenameMovies.Equals(input.RenameMovies)
                ) && 
                (
                    this.ReplaceIllegalCharacters == input.ReplaceIllegalCharacters ||
                    this.ReplaceIllegalCharacters.Equals(input.ReplaceIllegalCharacters)
                ) && 
                (
                    this.ColonReplacementFormat == input.ColonReplacementFormat ||
                    this.ColonReplacementFormat.Equals(input.ColonReplacementFormat)
                ) && 
                (
                    this.StandardMovieFormat == input.StandardMovieFormat ||
                    (this.StandardMovieFormat != null &&
                    this.StandardMovieFormat.Equals(input.StandardMovieFormat))
                ) && 
                (
                    this.MovieFolderFormat == input.MovieFolderFormat ||
                    (this.MovieFolderFormat != null &&
                    this.MovieFolderFormat.Equals(input.MovieFolderFormat))
                ) && 
                (
                    this.IncludeQuality == input.IncludeQuality ||
                    this.IncludeQuality.Equals(input.IncludeQuality)
                ) && 
                (
                    this.ReplaceSpaces == input.ReplaceSpaces ||
                    this.ReplaceSpaces.Equals(input.ReplaceSpaces)
                ) && 
                (
                    this.Separator == input.Separator ||
                    (this.Separator != null &&
                    this.Separator.Equals(input.Separator))
                ) && 
                (
                    this.NumberStyle == input.NumberStyle ||
                    (this.NumberStyle != null &&
                    this.NumberStyle.Equals(input.NumberStyle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.RenameMovies.GetHashCode();
                hashCode = hashCode * 59 + this.ReplaceIllegalCharacters.GetHashCode();
                hashCode = hashCode * 59 + this.ColonReplacementFormat.GetHashCode();
                if (this.StandardMovieFormat != null)
                    hashCode = hashCode * 59 + this.StandardMovieFormat.GetHashCode();
                if (this.MovieFolderFormat != null)
                    hashCode = hashCode * 59 + this.MovieFolderFormat.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeQuality.GetHashCode();
                hashCode = hashCode * 59 + this.ReplaceSpaces.GetHashCode();
                if (this.Separator != null)
                    hashCode = hashCode * 59 + this.Separator.GetHashCode();
                if (this.NumberStyle != null)
                    hashCode = hashCode * 59 + this.NumberStyle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
