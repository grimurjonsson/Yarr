/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// DownloadClientConfigResource
    /// </summary>
    [DataContract(Name = "DownloadClientConfigResource")]
    public partial class DownloadClientConfigResource : IEquatable<DownloadClientConfigResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadClientConfigResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="downloadClientWorkingFolders">downloadClientWorkingFolders.</param>
        /// <param name="enableCompletedDownloadHandling">enableCompletedDownloadHandling.</param>
        /// <param name="checkForFinishedDownloadInterval">checkForFinishedDownloadInterval.</param>
        /// <param name="autoRedownloadFailed">autoRedownloadFailed.</param>
        public DownloadClientConfigResource(int id = default(int), string downloadClientWorkingFolders = default(string), bool enableCompletedDownloadHandling = default(bool), int checkForFinishedDownloadInterval = default(int), bool autoRedownloadFailed = default(bool))
        {
            this.Id = id;
            this.DownloadClientWorkingFolders = downloadClientWorkingFolders;
            this.EnableCompletedDownloadHandling = enableCompletedDownloadHandling;
            this.CheckForFinishedDownloadInterval = checkForFinishedDownloadInterval;
            this.AutoRedownloadFailed = autoRedownloadFailed;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets DownloadClientWorkingFolders
        /// </summary>
        [DataMember(Name = "downloadClientWorkingFolders", EmitDefaultValue = true)]
        public string DownloadClientWorkingFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableCompletedDownloadHandling
        /// </summary>
        [DataMember(Name = "enableCompletedDownloadHandling", EmitDefaultValue = true)]
        public bool EnableCompletedDownloadHandling { get; set; }

        /// <summary>
        /// Gets or Sets CheckForFinishedDownloadInterval
        /// </summary>
        [DataMember(Name = "checkForFinishedDownloadInterval", EmitDefaultValue = false)]
        public int CheckForFinishedDownloadInterval { get; set; }

        /// <summary>
        /// Gets or Sets AutoRedownloadFailed
        /// </summary>
        [DataMember(Name = "autoRedownloadFailed", EmitDefaultValue = true)]
        public bool AutoRedownloadFailed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DownloadClientConfigResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DownloadClientWorkingFolders: ").Append(DownloadClientWorkingFolders).Append("\n");
            sb.Append("  EnableCompletedDownloadHandling: ").Append(EnableCompletedDownloadHandling).Append("\n");
            sb.Append("  CheckForFinishedDownloadInterval: ").Append(CheckForFinishedDownloadInterval).Append("\n");
            sb.Append("  AutoRedownloadFailed: ").Append(AutoRedownloadFailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DownloadClientConfigResource);
        }

        /// <summary>
        /// Returns true if DownloadClientConfigResource instances are equal
        /// </summary>
        /// <param name="input">Instance of DownloadClientConfigResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DownloadClientConfigResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.DownloadClientWorkingFolders == input.DownloadClientWorkingFolders ||
                    (this.DownloadClientWorkingFolders != null &&
                    this.DownloadClientWorkingFolders.Equals(input.DownloadClientWorkingFolders))
                ) && 
                (
                    this.EnableCompletedDownloadHandling == input.EnableCompletedDownloadHandling ||
                    this.EnableCompletedDownloadHandling.Equals(input.EnableCompletedDownloadHandling)
                ) && 
                (
                    this.CheckForFinishedDownloadInterval == input.CheckForFinishedDownloadInterval ||
                    this.CheckForFinishedDownloadInterval.Equals(input.CheckForFinishedDownloadInterval)
                ) && 
                (
                    this.AutoRedownloadFailed == input.AutoRedownloadFailed ||
                    this.AutoRedownloadFailed.Equals(input.AutoRedownloadFailed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DownloadClientWorkingFolders != null)
                    hashCode = hashCode * 59 + this.DownloadClientWorkingFolders.GetHashCode();
                hashCode = hashCode * 59 + this.EnableCompletedDownloadHandling.GetHashCode();
                hashCode = hashCode * 59 + this.CheckForFinishedDownloadInterval.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRedownloadFailed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
