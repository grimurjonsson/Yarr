/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Radarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Radarr.OpenAPI.Model
{
    /// <summary>
    /// MovieTranslation
    /// </summary>
    [DataContract(Name = "MovieTranslation")]
    public partial class MovieTranslation : IEquatable<MovieTranslation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MovieTranslation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="movieMetadataId">movieMetadataId.</param>
        /// <param name="title">title.</param>
        /// <param name="cleanTitle">cleanTitle.</param>
        /// <param name="overview">overview.</param>
        /// <param name="language">language.</param>
        public MovieTranslation(int id = default(int), int movieMetadataId = default(int), string title = default(string), string cleanTitle = default(string), string overview = default(string), Language language = default(Language))
        {
            this.Id = id;
            this.MovieMetadataId = movieMetadataId;
            this.Title = title;
            this.CleanTitle = cleanTitle;
            this.Overview = overview;
            this.Language = language;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets MovieMetadataId
        /// </summary>
        [DataMember(Name = "movieMetadataId", EmitDefaultValue = false)]
        public int MovieMetadataId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets CleanTitle
        /// </summary>
        [DataMember(Name = "cleanTitle", EmitDefaultValue = true)]
        public string CleanTitle { get; set; }

        /// <summary>
        /// Gets or Sets Overview
        /// </summary>
        [DataMember(Name = "overview", EmitDefaultValue = true)]
        public string Overview { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MovieTranslation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MovieMetadataId: ").Append(MovieMetadataId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  CleanTitle: ").Append(CleanTitle).Append("\n");
            sb.Append("  Overview: ").Append(Overview).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovieTranslation);
        }

        /// <summary>
        /// Returns true if MovieTranslation instances are equal
        /// </summary>
        /// <param name="input">Instance of MovieTranslation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovieTranslation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.MovieMetadataId == input.MovieMetadataId ||
                    this.MovieMetadataId.Equals(input.MovieMetadataId)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.CleanTitle == input.CleanTitle ||
                    (this.CleanTitle != null &&
                    this.CleanTitle.Equals(input.CleanTitle))
                ) && 
                (
                    this.Overview == input.Overview ||
                    (this.Overview != null &&
                    this.Overview.Equals(input.Overview))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.MovieMetadataId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.CleanTitle != null)
                    hashCode = hashCode * 59 + this.CleanTitle.GetHashCode();
                if (this.Overview != null)
                    hashCode = hashCode * 59 + this.Overview.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
