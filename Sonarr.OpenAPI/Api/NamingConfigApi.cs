/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sonarr.OpenAPI.Client;
using Sonarr.OpenAPI.Model;

namespace Sonarr.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamingConfigApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <returns></returns>
        void ApiV3ConfigNamingExamplesGet(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV3ConfigNamingExamplesGetWithHttpInfo(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NamingConfigResource</returns>
        NamingConfigResource ApiV3ConfigNamingGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NamingConfigResource</returns>
        ApiResponse<NamingConfigResource> ApiV3ConfigNamingGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NamingConfigResource</returns>
        NamingConfigResource ApiV3ConfigNamingIdGet(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NamingConfigResource</returns>
        ApiResponse<NamingConfigResource> ApiV3ConfigNamingIdGetWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <returns>NamingConfigResource</returns>
        NamingConfigResource ApiV3ConfigNamingIdPut(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <returns>ApiResponse of NamingConfigResource</returns>
        ApiResponse<NamingConfigResource> ApiV3ConfigNamingIdPutWithHttpInfo(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamingConfigApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV3ConfigNamingExamplesGetAsync(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV3ConfigNamingExamplesGetWithHttpInfoAsync(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamingConfigResource</returns>
        System.Threading.Tasks.Task<NamingConfigResource> ApiV3ConfigNamingGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamingConfigResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamingConfigResource>> ApiV3ConfigNamingGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamingConfigResource</returns>
        System.Threading.Tasks.Task<NamingConfigResource> ApiV3ConfigNamingIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamingConfigResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamingConfigResource>> ApiV3ConfigNamingIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamingConfigResource</returns>
        System.Threading.Tasks.Task<NamingConfigResource> ApiV3ConfigNamingIdPutAsync(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamingConfigResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamingConfigResource>> ApiV3ConfigNamingIdPutWithHttpInfoAsync(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamingConfigApi : INamingConfigApiSync, INamingConfigApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NamingConfigApi : INamingConfigApi
    {
        private Sonarr.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NamingConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamingConfigApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamingConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamingConfigApi(string basePath)
        {
            this.Configuration = Sonarr.OpenAPI.Client.Configuration.MergeConfigurations(
                Sonarr.OpenAPI.Client.GlobalConfiguration.Instance,
                new Sonarr.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sonarr.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sonarr.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sonarr.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamingConfigApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NamingConfigApi(Sonarr.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sonarr.OpenAPI.Client.Configuration.MergeConfigurations(
                Sonarr.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sonarr.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sonarr.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sonarr.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamingConfigApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NamingConfigApi(Sonarr.OpenAPI.Client.ISynchronousClient client, Sonarr.OpenAPI.Client.IAsynchronousClient asyncClient, Sonarr.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sonarr.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sonarr.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sonarr.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sonarr.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sonarr.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <returns></returns>
        public void ApiV3ConfigNamingExamplesGet(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string))
        {
            ApiV3ConfigNamingExamplesGetWithHttpInfo(renameEpisodes, replaceIllegalCharacters, colonReplacementFormat, multiEpisodeStyle, standardEpisodeFormat, dailyEpisodeFormat, animeEpisodeFormat, seriesFolderFormat, seasonFolderFormat, specialsFolderFormat, includeSeriesTitle, includeEpisodeTitle, includeQuality, replaceSpaces, separator, numberStyle, id, resourceName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sonarr.OpenAPI.Client.ApiResponse<Object> ApiV3ConfigNamingExamplesGetWithHttpInfo(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string))
        {
            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (renameEpisodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "RenameEpisodes", renameEpisodes));
            }
            if (replaceIllegalCharacters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ReplaceIllegalCharacters", replaceIllegalCharacters));
            }
            if (colonReplacementFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ColonReplacementFormat", colonReplacementFormat));
            }
            if (multiEpisodeStyle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "MultiEpisodeStyle", multiEpisodeStyle));
            }
            if (standardEpisodeFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "StandardEpisodeFormat", standardEpisodeFormat));
            }
            if (dailyEpisodeFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "DailyEpisodeFormat", dailyEpisodeFormat));
            }
            if (animeEpisodeFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "AnimeEpisodeFormat", animeEpisodeFormat));
            }
            if (seriesFolderFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "SeriesFolderFormat", seriesFolderFormat));
            }
            if (seasonFolderFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "SeasonFolderFormat", seasonFolderFormat));
            }
            if (specialsFolderFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "SpecialsFolderFormat", specialsFolderFormat));
            }
            if (includeSeriesTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "IncludeSeriesTitle", includeSeriesTitle));
            }
            if (includeEpisodeTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "IncludeEpisodeTitle", includeEpisodeTitle));
            }
            if (includeQuality != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "IncludeQuality", includeQuality));
            }
            if (replaceSpaces != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ReplaceSpaces", replaceSpaces));
            }
            if (separator != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "Separator", separator));
            }
            if (numberStyle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "NumberStyle", numberStyle));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ResourceName", resourceName));
            }

            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v3/config/naming/examples", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingExamplesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV3ConfigNamingExamplesGetAsync(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV3ConfigNamingExamplesGetWithHttpInfoAsync(renameEpisodes, replaceIllegalCharacters, colonReplacementFormat, multiEpisodeStyle, standardEpisodeFormat, dailyEpisodeFormat, animeEpisodeFormat, seriesFolderFormat, seasonFolderFormat, specialsFolderFormat, includeSeriesTitle, includeEpisodeTitle, includeQuality, replaceSpaces, separator, numberStyle, id, resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEpisodes"> (optional)</param>
        /// <param name="replaceIllegalCharacters"> (optional)</param>
        /// <param name="colonReplacementFormat"> (optional)</param>
        /// <param name="multiEpisodeStyle"> (optional)</param>
        /// <param name="standardEpisodeFormat"> (optional)</param>
        /// <param name="dailyEpisodeFormat"> (optional)</param>
        /// <param name="animeEpisodeFormat"> (optional)</param>
        /// <param name="seriesFolderFormat"> (optional)</param>
        /// <param name="seasonFolderFormat"> (optional)</param>
        /// <param name="specialsFolderFormat"> (optional)</param>
        /// <param name="includeSeriesTitle"> (optional)</param>
        /// <param name="includeEpisodeTitle"> (optional)</param>
        /// <param name="includeQuality"> (optional)</param>
        /// <param name="replaceSpaces"> (optional)</param>
        /// <param name="separator"> (optional)</param>
        /// <param name="numberStyle"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sonarr.OpenAPI.Client.ApiResponse<Object>> ApiV3ConfigNamingExamplesGetWithHttpInfoAsync(bool? renameEpisodes = default(bool?), bool? replaceIllegalCharacters = default(bool?), int? colonReplacementFormat = default(int?), int? multiEpisodeStyle = default(int?), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool? includeSeriesTitle = default(bool?), bool? includeEpisodeTitle = default(bool?), bool? includeQuality = default(bool?), bool? replaceSpaces = default(bool?), string separator = default(string), string numberStyle = default(string), int? id = default(int?), string resourceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (renameEpisodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "RenameEpisodes", renameEpisodes));
            }
            if (replaceIllegalCharacters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ReplaceIllegalCharacters", replaceIllegalCharacters));
            }
            if (colonReplacementFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ColonReplacementFormat", colonReplacementFormat));
            }
            if (multiEpisodeStyle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "MultiEpisodeStyle", multiEpisodeStyle));
            }
            if (standardEpisodeFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "StandardEpisodeFormat", standardEpisodeFormat));
            }
            if (dailyEpisodeFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "DailyEpisodeFormat", dailyEpisodeFormat));
            }
            if (animeEpisodeFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "AnimeEpisodeFormat", animeEpisodeFormat));
            }
            if (seriesFolderFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "SeriesFolderFormat", seriesFolderFormat));
            }
            if (seasonFolderFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "SeasonFolderFormat", seasonFolderFormat));
            }
            if (specialsFolderFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "SpecialsFolderFormat", specialsFolderFormat));
            }
            if (includeSeriesTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "IncludeSeriesTitle", includeSeriesTitle));
            }
            if (includeEpisodeTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "IncludeEpisodeTitle", includeEpisodeTitle));
            }
            if (includeQuality != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "IncludeQuality", includeQuality));
            }
            if (replaceSpaces != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ReplaceSpaces", replaceSpaces));
            }
            if (separator != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "Separator", separator));
            }
            if (numberStyle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "NumberStyle", numberStyle));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ResourceName", resourceName));
            }

            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/v3/config/naming/examples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingExamplesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NamingConfigResource</returns>
        public NamingConfigResource ApiV3ConfigNamingGet()
        {
            Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> localVarResponse = ApiV3ConfigNamingGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NamingConfigResource</returns>
        public Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> ApiV3ConfigNamingGetWithHttpInfo()
        {
            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NamingConfigResource>("/api/v3/config/naming", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamingConfigResource</returns>
        public async System.Threading.Tasks.Task<NamingConfigResource> ApiV3ConfigNamingGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> localVarResponse = await ApiV3ConfigNamingGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamingConfigResource)</returns>
        public async System.Threading.Tasks.Task<Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource>> ApiV3ConfigNamingGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NamingConfigResource>("/api/v3/config/naming", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NamingConfigResource</returns>
        public NamingConfigResource ApiV3ConfigNamingIdGet(int id)
        {
            Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> localVarResponse = ApiV3ConfigNamingIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NamingConfigResource</returns>
        public Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> ApiV3ConfigNamingIdGetWithHttpInfo(int id)
        {
            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Sonarr.OpenAPI.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NamingConfigResource>("/api/v3/config/naming/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamingConfigResource</returns>
        public async System.Threading.Tasks.Task<NamingConfigResource> ApiV3ConfigNamingIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> localVarResponse = await ApiV3ConfigNamingIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamingConfigResource)</returns>
        public async System.Threading.Tasks.Task<Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource>> ApiV3ConfigNamingIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Sonarr.OpenAPI.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NamingConfigResource>("/api/v3/config/naming/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <returns>NamingConfigResource</returns>
        public NamingConfigResource ApiV3ConfigNamingIdPut(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource))
        {
            Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> localVarResponse = ApiV3ConfigNamingIdPutWithHttpInfo(id, namingConfigResource);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <returns>ApiResponse of NamingConfigResource</returns>
        public Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> ApiV3ConfigNamingIdPutWithHttpInfo(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Sonarr.OpenAPI.Client.ApiException(400, "Missing required parameter 'id' when calling NamingConfigApi->ApiV3ConfigNamingIdPut");

            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Sonarr.OpenAPI.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = namingConfigResource;

            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<NamingConfigResource>("/api/v3/config/naming/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamingConfigResource</returns>
        public async System.Threading.Tasks.Task<NamingConfigResource> ApiV3ConfigNamingIdPutAsync(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource> localVarResponse = await ApiV3ConfigNamingIdPutWithHttpInfoAsync(id, namingConfigResource, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Sonarr.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="namingConfigResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamingConfigResource)</returns>
        public async System.Threading.Tasks.Task<Sonarr.OpenAPI.Client.ApiResponse<NamingConfigResource>> ApiV3ConfigNamingIdPutWithHttpInfoAsync(string id, NamingConfigResource namingConfigResource = default(NamingConfigResource), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Sonarr.OpenAPI.Client.ApiException(400, "Missing required parameter 'id' when calling NamingConfigApi->ApiV3ConfigNamingIdPut");


            Sonarr.OpenAPI.Client.RequestOptions localVarRequestOptions = new Sonarr.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sonarr.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Sonarr.OpenAPI.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = namingConfigResource;

            // authentication (X-Api-Key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Sonarr.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<NamingConfigResource>("/api/v3/config/naming/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV3ConfigNamingIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
