/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// MediaInfoResource
    /// </summary>
    [DataContract(Name = "MediaInfoResource")]
    public partial class MediaInfoResource : IEquatable<MediaInfoResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaInfoResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="audioBitrate">audioBitrate.</param>
        /// <param name="audioChannels">audioChannels.</param>
        /// <param name="audioCodec">audioCodec.</param>
        /// <param name="audioLanguages">audioLanguages.</param>
        /// <param name="audioStreamCount">audioStreamCount.</param>
        /// <param name="videoBitDepth">videoBitDepth.</param>
        /// <param name="videoBitrate">videoBitrate.</param>
        /// <param name="videoCodec">videoCodec.</param>
        /// <param name="videoFps">videoFps.</param>
        /// <param name="videoDynamicRange">videoDynamicRange.</param>
        /// <param name="videoDynamicRangeType">videoDynamicRangeType.</param>
        /// <param name="resolution">resolution.</param>
        /// <param name="runTime">runTime.</param>
        /// <param name="scanType">scanType.</param>
        /// <param name="subtitles">subtitles.</param>
        public MediaInfoResource(int id = default(int), long audioBitrate = default(long), double audioChannels = default(double), string audioCodec = default(string), string audioLanguages = default(string), int audioStreamCount = default(int), int videoBitDepth = default(int), long videoBitrate = default(long), string videoCodec = default(string), double videoFps = default(double), string videoDynamicRange = default(string), string videoDynamicRangeType = default(string), string resolution = default(string), string runTime = default(string), string scanType = default(string), string subtitles = default(string))
        {
            this.Id = id;
            this.AudioBitrate = audioBitrate;
            this.AudioChannels = audioChannels;
            this.AudioCodec = audioCodec;
            this.AudioLanguages = audioLanguages;
            this.AudioStreamCount = audioStreamCount;
            this.VideoBitDepth = videoBitDepth;
            this.VideoBitrate = videoBitrate;
            this.VideoCodec = videoCodec;
            this.VideoFps = videoFps;
            this.VideoDynamicRange = videoDynamicRange;
            this.VideoDynamicRangeType = videoDynamicRangeType;
            this.Resolution = resolution;
            this.RunTime = runTime;
            this.ScanType = scanType;
            this.Subtitles = subtitles;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AudioBitrate
        /// </summary>
        [DataMember(Name = "audioBitrate", EmitDefaultValue = false)]
        public long AudioBitrate { get; set; }

        /// <summary>
        /// Gets or Sets AudioChannels
        /// </summary>
        [DataMember(Name = "audioChannels", EmitDefaultValue = false)]
        public double AudioChannels { get; set; }

        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        [DataMember(Name = "audioCodec", EmitDefaultValue = true)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets AudioLanguages
        /// </summary>
        [DataMember(Name = "audioLanguages", EmitDefaultValue = true)]
        public string AudioLanguages { get; set; }

        /// <summary>
        /// Gets or Sets AudioStreamCount
        /// </summary>
        [DataMember(Name = "audioStreamCount", EmitDefaultValue = false)]
        public int AudioStreamCount { get; set; }

        /// <summary>
        /// Gets or Sets VideoBitDepth
        /// </summary>
        [DataMember(Name = "videoBitDepth", EmitDefaultValue = false)]
        public int VideoBitDepth { get; set; }

        /// <summary>
        /// Gets or Sets VideoBitrate
        /// </summary>
        [DataMember(Name = "videoBitrate", EmitDefaultValue = false)]
        public long VideoBitrate { get; set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        [DataMember(Name = "videoCodec", EmitDefaultValue = true)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets VideoFps
        /// </summary>
        [DataMember(Name = "videoFps", EmitDefaultValue = false)]
        public double VideoFps { get; set; }

        /// <summary>
        /// Gets or Sets VideoDynamicRange
        /// </summary>
        [DataMember(Name = "videoDynamicRange", EmitDefaultValue = true)]
        public string VideoDynamicRange { get; set; }

        /// <summary>
        /// Gets or Sets VideoDynamicRangeType
        /// </summary>
        [DataMember(Name = "videoDynamicRangeType", EmitDefaultValue = true)]
        public string VideoDynamicRangeType { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name = "resolution", EmitDefaultValue = true)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets RunTime
        /// </summary>
        [DataMember(Name = "runTime", EmitDefaultValue = true)]
        public string RunTime { get; set; }

        /// <summary>
        /// Gets or Sets ScanType
        /// </summary>
        [DataMember(Name = "scanType", EmitDefaultValue = true)]
        public string ScanType { get; set; }

        /// <summary>
        /// Gets or Sets Subtitles
        /// </summary>
        [DataMember(Name = "subtitles", EmitDefaultValue = true)]
        public string Subtitles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaInfoResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AudioBitrate: ").Append(AudioBitrate).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  AudioLanguages: ").Append(AudioLanguages).Append("\n");
            sb.Append("  AudioStreamCount: ").Append(AudioStreamCount).Append("\n");
            sb.Append("  VideoBitDepth: ").Append(VideoBitDepth).Append("\n");
            sb.Append("  VideoBitrate: ").Append(VideoBitrate).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  VideoFps: ").Append(VideoFps).Append("\n");
            sb.Append("  VideoDynamicRange: ").Append(VideoDynamicRange).Append("\n");
            sb.Append("  VideoDynamicRangeType: ").Append(VideoDynamicRangeType).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  RunTime: ").Append(RunTime).Append("\n");
            sb.Append("  ScanType: ").Append(ScanType).Append("\n");
            sb.Append("  Subtitles: ").Append(Subtitles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaInfoResource);
        }

        /// <summary>
        /// Returns true if MediaInfoResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaInfoResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaInfoResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AudioBitrate == input.AudioBitrate ||
                    this.AudioBitrate.Equals(input.AudioBitrate)
                ) && 
                (
                    this.AudioChannels == input.AudioChannels ||
                    this.AudioChannels.Equals(input.AudioChannels)
                ) && 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.AudioLanguages == input.AudioLanguages ||
                    (this.AudioLanguages != null &&
                    this.AudioLanguages.Equals(input.AudioLanguages))
                ) && 
                (
                    this.AudioStreamCount == input.AudioStreamCount ||
                    this.AudioStreamCount.Equals(input.AudioStreamCount)
                ) && 
                (
                    this.VideoBitDepth == input.VideoBitDepth ||
                    this.VideoBitDepth.Equals(input.VideoBitDepth)
                ) && 
                (
                    this.VideoBitrate == input.VideoBitrate ||
                    this.VideoBitrate.Equals(input.VideoBitrate)
                ) && 
                (
                    this.VideoCodec == input.VideoCodec ||
                    (this.VideoCodec != null &&
                    this.VideoCodec.Equals(input.VideoCodec))
                ) && 
                (
                    this.VideoFps == input.VideoFps ||
                    this.VideoFps.Equals(input.VideoFps)
                ) && 
                (
                    this.VideoDynamicRange == input.VideoDynamicRange ||
                    (this.VideoDynamicRange != null &&
                    this.VideoDynamicRange.Equals(input.VideoDynamicRange))
                ) && 
                (
                    this.VideoDynamicRangeType == input.VideoDynamicRangeType ||
                    (this.VideoDynamicRangeType != null &&
                    this.VideoDynamicRangeType.Equals(input.VideoDynamicRangeType))
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.RunTime == input.RunTime ||
                    (this.RunTime != null &&
                    this.RunTime.Equals(input.RunTime))
                ) && 
                (
                    this.ScanType == input.ScanType ||
                    (this.ScanType != null &&
                    this.ScanType.Equals(input.ScanType))
                ) && 
                (
                    this.Subtitles == input.Subtitles ||
                    (this.Subtitles != null &&
                    this.Subtitles.Equals(input.Subtitles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.AudioBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.AudioChannels.GetHashCode();
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                if (this.AudioLanguages != null)
                    hashCode = hashCode * 59 + this.AudioLanguages.GetHashCode();
                hashCode = hashCode * 59 + this.AudioStreamCount.GetHashCode();
                hashCode = hashCode * 59 + this.VideoBitDepth.GetHashCode();
                hashCode = hashCode * 59 + this.VideoBitrate.GetHashCode();
                if (this.VideoCodec != null)
                    hashCode = hashCode * 59 + this.VideoCodec.GetHashCode();
                hashCode = hashCode * 59 + this.VideoFps.GetHashCode();
                if (this.VideoDynamicRange != null)
                    hashCode = hashCode * 59 + this.VideoDynamicRange.GetHashCode();
                if (this.VideoDynamicRangeType != null)
                    hashCode = hashCode * 59 + this.VideoDynamicRangeType.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                if (this.RunTime != null)
                    hashCode = hashCode * 59 + this.RunTime.GetHashCode();
                if (this.ScanType != null)
                    hashCode = hashCode * 59 + this.ScanType.GetHashCode();
                if (this.Subtitles != null)
                    hashCode = hashCode * 59 + this.Subtitles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
