/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// EpisodeFileResource
    /// </summary>
    [DataContract(Name = "EpisodeFileResource")]
    public partial class EpisodeFileResource : IEquatable<EpisodeFileResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EpisodeFileResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="seriesId">seriesId.</param>
        /// <param name="seasonNumber">seasonNumber.</param>
        /// <param name="relativePath">relativePath.</param>
        /// <param name="path">path.</param>
        /// <param name="size">size.</param>
        /// <param name="dateAdded">dateAdded.</param>
        /// <param name="sceneName">sceneName.</param>
        /// <param name="releaseGroup">releaseGroup.</param>
        /// <param name="languages">languages.</param>
        /// <param name="quality">quality.</param>
        /// <param name="customFormats">customFormats.</param>
        /// <param name="customFormatScore">customFormatScore.</param>
        /// <param name="mediaInfo">mediaInfo.</param>
        /// <param name="qualityCutoffNotMet">qualityCutoffNotMet.</param>
        public EpisodeFileResource(int id = default(int), int seriesId = default(int), int seasonNumber = default(int), string relativePath = default(string), string path = default(string), long size = default(long), DateTime dateAdded = default(DateTime), string sceneName = default(string), string releaseGroup = default(string), List<Language> languages = default(List<Language>), QualityModel quality = default(QualityModel), List<CustomFormatResource> customFormats = default(List<CustomFormatResource>), int customFormatScore = default(int), MediaInfoResource mediaInfo = default(MediaInfoResource), bool qualityCutoffNotMet = default(bool))
        {
            this.Id = id;
            this.SeriesId = seriesId;
            this.SeasonNumber = seasonNumber;
            this.RelativePath = relativePath;
            this.Path = path;
            this.Size = size;
            this.DateAdded = dateAdded;
            this.SceneName = sceneName;
            this.ReleaseGroup = releaseGroup;
            this.Languages = languages;
            this.Quality = quality;
            this.CustomFormats = customFormats;
            this.CustomFormatScore = customFormatScore;
            this.MediaInfo = mediaInfo;
            this.QualityCutoffNotMet = qualityCutoffNotMet;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets SeriesId
        /// </summary>
        [DataMember(Name = "seriesId", EmitDefaultValue = false)]
        public int SeriesId { get; set; }

        /// <summary>
        /// Gets or Sets SeasonNumber
        /// </summary>
        [DataMember(Name = "seasonNumber", EmitDefaultValue = false)]
        public int SeasonNumber { get; set; }

        /// <summary>
        /// Gets or Sets RelativePath
        /// </summary>
        [DataMember(Name = "relativePath", EmitDefaultValue = true)]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long Size { get; set; }

        /// <summary>
        /// Gets or Sets DateAdded
        /// </summary>
        [DataMember(Name = "dateAdded", EmitDefaultValue = false)]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// Gets or Sets SceneName
        /// </summary>
        [DataMember(Name = "sceneName", EmitDefaultValue = true)]
        public string SceneName { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroup
        /// </summary>
        [DataMember(Name = "releaseGroup", EmitDefaultValue = true)]
        public string ReleaseGroup { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormats
        /// </summary>
        [DataMember(Name = "customFormats", EmitDefaultValue = true)]
        public List<CustomFormatResource> CustomFormats { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormatScore
        /// </summary>
        [DataMember(Name = "customFormatScore", EmitDefaultValue = false)]
        public int CustomFormatScore { get; set; }

        /// <summary>
        /// Gets or Sets MediaInfo
        /// </summary>
        [DataMember(Name = "mediaInfo", EmitDefaultValue = false)]
        public MediaInfoResource MediaInfo { get; set; }

        /// <summary>
        /// Gets or Sets QualityCutoffNotMet
        /// </summary>
        [DataMember(Name = "qualityCutoffNotMet", EmitDefaultValue = true)]
        public bool QualityCutoffNotMet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EpisodeFileResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  SeasonNumber: ").Append(SeasonNumber).Append("\n");
            sb.Append("  RelativePath: ").Append(RelativePath).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  SceneName: ").Append(SceneName).Append("\n");
            sb.Append("  ReleaseGroup: ").Append(ReleaseGroup).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  CustomFormats: ").Append(CustomFormats).Append("\n");
            sb.Append("  CustomFormatScore: ").Append(CustomFormatScore).Append("\n");
            sb.Append("  MediaInfo: ").Append(MediaInfo).Append("\n");
            sb.Append("  QualityCutoffNotMet: ").Append(QualityCutoffNotMet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EpisodeFileResource);
        }

        /// <summary>
        /// Returns true if EpisodeFileResource instances are equal
        /// </summary>
        /// <param name="input">Instance of EpisodeFileResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EpisodeFileResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SeriesId == input.SeriesId ||
                    this.SeriesId.Equals(input.SeriesId)
                ) && 
                (
                    this.SeasonNumber == input.SeasonNumber ||
                    this.SeasonNumber.Equals(input.SeasonNumber)
                ) && 
                (
                    this.RelativePath == input.RelativePath ||
                    (this.RelativePath != null &&
                    this.RelativePath.Equals(input.RelativePath))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                ) && 
                (
                    this.SceneName == input.SceneName ||
                    (this.SceneName != null &&
                    this.SceneName.Equals(input.SceneName))
                ) && 
                (
                    this.ReleaseGroup == input.ReleaseGroup ||
                    (this.ReleaseGroup != null &&
                    this.ReleaseGroup.Equals(input.ReleaseGroup))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.CustomFormats == input.CustomFormats ||
                    this.CustomFormats != null &&
                    input.CustomFormats != null &&
                    this.CustomFormats.SequenceEqual(input.CustomFormats)
                ) && 
                (
                    this.CustomFormatScore == input.CustomFormatScore ||
                    this.CustomFormatScore.Equals(input.CustomFormatScore)
                ) && 
                (
                    this.MediaInfo == input.MediaInfo ||
                    (this.MediaInfo != null &&
                    this.MediaInfo.Equals(input.MediaInfo))
                ) && 
                (
                    this.QualityCutoffNotMet == input.QualityCutoffNotMet ||
                    this.QualityCutoffNotMet.Equals(input.QualityCutoffNotMet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.SeriesId.GetHashCode();
                hashCode = hashCode * 59 + this.SeasonNumber.GetHashCode();
                if (this.RelativePath != null)
                    hashCode = hashCode * 59 + this.RelativePath.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.DateAdded != null)
                    hashCode = hashCode * 59 + this.DateAdded.GetHashCode();
                if (this.SceneName != null)
                    hashCode = hashCode * 59 + this.SceneName.GetHashCode();
                if (this.ReleaseGroup != null)
                    hashCode = hashCode * 59 + this.ReleaseGroup.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.CustomFormats != null)
                    hashCode = hashCode * 59 + this.CustomFormats.GetHashCode();
                hashCode = hashCode * 59 + this.CustomFormatScore.GetHashCode();
                if (this.MediaInfo != null)
                    hashCode = hashCode * 59 + this.MediaInfo.GetHashCode();
                hashCode = hashCode * 59 + this.QualityCutoffNotMet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
