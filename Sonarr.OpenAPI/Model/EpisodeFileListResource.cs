/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// EpisodeFileListResource
    /// </summary>
    [DataContract(Name = "EpisodeFileListResource")]
    public partial class EpisodeFileListResource : IEquatable<EpisodeFileListResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EpisodeFileListResource" /> class.
        /// </summary>
        /// <param name="episodeFileIds">episodeFileIds.</param>
        /// <param name="languages">languages.</param>
        /// <param name="quality">quality.</param>
        /// <param name="sceneName">sceneName.</param>
        /// <param name="releaseGroup">releaseGroup.</param>
        public EpisodeFileListResource(List<int> episodeFileIds = default(List<int>), List<Language> languages = default(List<Language>), QualityModel quality = default(QualityModel), string sceneName = default(string), string releaseGroup = default(string))
        {
            this.EpisodeFileIds = episodeFileIds;
            this.Languages = languages;
            this.Quality = quality;
            this.SceneName = sceneName;
            this.ReleaseGroup = releaseGroup;
        }

        /// <summary>
        /// Gets or Sets EpisodeFileIds
        /// </summary>
        [DataMember(Name = "episodeFileIds", EmitDefaultValue = true)]
        public List<int> EpisodeFileIds { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets SceneName
        /// </summary>
        [DataMember(Name = "sceneName", EmitDefaultValue = true)]
        public string SceneName { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroup
        /// </summary>
        [DataMember(Name = "releaseGroup", EmitDefaultValue = true)]
        public string ReleaseGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EpisodeFileListResource {\n");
            sb.Append("  EpisodeFileIds: ").Append(EpisodeFileIds).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  SceneName: ").Append(SceneName).Append("\n");
            sb.Append("  ReleaseGroup: ").Append(ReleaseGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EpisodeFileListResource);
        }

        /// <summary>
        /// Returns true if EpisodeFileListResource instances are equal
        /// </summary>
        /// <param name="input">Instance of EpisodeFileListResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EpisodeFileListResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EpisodeFileIds == input.EpisodeFileIds ||
                    this.EpisodeFileIds != null &&
                    input.EpisodeFileIds != null &&
                    this.EpisodeFileIds.SequenceEqual(input.EpisodeFileIds)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.SceneName == input.SceneName ||
                    (this.SceneName != null &&
                    this.SceneName.Equals(input.SceneName))
                ) && 
                (
                    this.ReleaseGroup == input.ReleaseGroup ||
                    (this.ReleaseGroup != null &&
                    this.ReleaseGroup.Equals(input.ReleaseGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EpisodeFileIds != null)
                    hashCode = hashCode * 59 + this.EpisodeFileIds.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.SceneName != null)
                    hashCode = hashCode * 59 + this.SceneName.GetHashCode();
                if (this.ReleaseGroup != null)
                    hashCode = hashCode * 59 + this.ReleaseGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
