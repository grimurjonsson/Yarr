/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// ImportListBulkResource
    /// </summary>
    [DataContract(Name = "ImportListBulkResource")]
    public partial class ImportListBulkResource : IEquatable<ImportListBulkResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ApplyTags
        /// </summary>
        [DataMember(Name = "applyTags", EmitDefaultValue = false)]
        public ApplyTags? ApplyTags { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportListBulkResource" /> class.
        /// </summary>
        /// <param name="ids">ids.</param>
        /// <param name="tags">tags.</param>
        /// <param name="applyTags">applyTags.</param>
        /// <param name="enableAutomaticAdd">enableAutomaticAdd.</param>
        /// <param name="rootFolderPath">rootFolderPath.</param>
        /// <param name="qualityProfileId">qualityProfileId.</param>
        public ImportListBulkResource(List<int> ids = default(List<int>), List<int> tags = default(List<int>), ApplyTags? applyTags = default(ApplyTags?), bool? enableAutomaticAdd = default(bool?), string rootFolderPath = default(string), int? qualityProfileId = default(int?))
        {
            this.Ids = ids;
            this.Tags = tags;
            this.ApplyTags = applyTags;
            this.EnableAutomaticAdd = enableAutomaticAdd;
            this.RootFolderPath = rootFolderPath;
            this.QualityProfileId = qualityProfileId;
        }

        /// <summary>
        /// Gets or Sets Ids
        /// </summary>
        [DataMember(Name = "ids", EmitDefaultValue = true)]
        public List<int> Ids { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets EnableAutomaticAdd
        /// </summary>
        [DataMember(Name = "enableAutomaticAdd", EmitDefaultValue = true)]
        public bool? EnableAutomaticAdd { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderPath
        /// </summary>
        [DataMember(Name = "rootFolderPath", EmitDefaultValue = true)]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Gets or Sets QualityProfileId
        /// </summary>
        [DataMember(Name = "qualityProfileId", EmitDefaultValue = true)]
        public int? QualityProfileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportListBulkResource {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ApplyTags: ").Append(ApplyTags).Append("\n");
            sb.Append("  EnableAutomaticAdd: ").Append(EnableAutomaticAdd).Append("\n");
            sb.Append("  RootFolderPath: ").Append(RootFolderPath).Append("\n");
            sb.Append("  QualityProfileId: ").Append(QualityProfileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportListBulkResource);
        }

        /// <summary>
        /// Returns true if ImportListBulkResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportListBulkResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportListBulkResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ApplyTags == input.ApplyTags ||
                    this.ApplyTags.Equals(input.ApplyTags)
                ) && 
                (
                    this.EnableAutomaticAdd == input.EnableAutomaticAdd ||
                    (this.EnableAutomaticAdd != null &&
                    this.EnableAutomaticAdd.Equals(input.EnableAutomaticAdd))
                ) && 
                (
                    this.RootFolderPath == input.RootFolderPath ||
                    (this.RootFolderPath != null &&
                    this.RootFolderPath.Equals(input.RootFolderPath))
                ) && 
                (
                    this.QualityProfileId == input.QualityProfileId ||
                    (this.QualityProfileId != null &&
                    this.QualityProfileId.Equals(input.QualityProfileId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                hashCode = hashCode * 59 + this.ApplyTags.GetHashCode();
                if (this.EnableAutomaticAdd != null)
                    hashCode = hashCode * 59 + this.EnableAutomaticAdd.GetHashCode();
                if (this.RootFolderPath != null)
                    hashCode = hashCode * 59 + this.RootFolderPath.GetHashCode();
                if (this.QualityProfileId != null)
                    hashCode = hashCode * 59 + this.QualityProfileId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
