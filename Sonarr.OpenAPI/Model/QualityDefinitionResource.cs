/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// QualityDefinitionResource
    /// </summary>
    [DataContract(Name = "QualityDefinitionResource")]
    public partial class QualityDefinitionResource : IEquatable<QualityDefinitionResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualityDefinitionResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="quality">quality.</param>
        /// <param name="title">title.</param>
        /// <param name="weight">weight.</param>
        /// <param name="minSize">minSize.</param>
        /// <param name="maxSize">maxSize.</param>
        /// <param name="preferredSize">preferredSize.</param>
        public QualityDefinitionResource(int id = default(int), Quality quality = default(Quality), string title = default(string), int weight = default(int), double? minSize = default(double?), double? maxSize = default(double?), double? preferredSize = default(double?))
        {
            this.Id = id;
            this.Quality = quality;
            this.Title = title;
            this.Weight = weight;
            this.MinSize = minSize;
            this.MaxSize = maxSize;
            this.PreferredSize = preferredSize;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public Quality Quality { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Gets or Sets MinSize
        /// </summary>
        [DataMember(Name = "minSize", EmitDefaultValue = true)]
        public double? MinSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxSize
        /// </summary>
        [DataMember(Name = "maxSize", EmitDefaultValue = true)]
        public double? MaxSize { get; set; }

        /// <summary>
        /// Gets or Sets PreferredSize
        /// </summary>
        [DataMember(Name = "preferredSize", EmitDefaultValue = true)]
        public double? PreferredSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QualityDefinitionResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  MinSize: ").Append(MinSize).Append("\n");
            sb.Append("  MaxSize: ").Append(MaxSize).Append("\n");
            sb.Append("  PreferredSize: ").Append(PreferredSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QualityDefinitionResource);
        }

        /// <summary>
        /// Returns true if QualityDefinitionResource instances are equal
        /// </summary>
        /// <param name="input">Instance of QualityDefinitionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QualityDefinitionResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.MinSize == input.MinSize ||
                    (this.MinSize != null &&
                    this.MinSize.Equals(input.MinSize))
                ) && 
                (
                    this.MaxSize == input.MaxSize ||
                    (this.MaxSize != null &&
                    this.MaxSize.Equals(input.MaxSize))
                ) && 
                (
                    this.PreferredSize == input.PreferredSize ||
                    (this.PreferredSize != null &&
                    this.PreferredSize.Equals(input.PreferredSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.MinSize != null)
                    hashCode = hashCode * 59 + this.MinSize.GetHashCode();
                if (this.MaxSize != null)
                    hashCode = hashCode * 59 + this.MaxSize.GetHashCode();
                if (this.PreferredSize != null)
                    hashCode = hashCode * 59 + this.PreferredSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
