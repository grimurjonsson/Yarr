/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// BlocklistResource
    /// </summary>
    [DataContract(Name = "BlocklistResource")]
    public partial class BlocklistResource : IEquatable<BlocklistResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public DownloadProtocol? Protocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlocklistResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="seriesId">seriesId.</param>
        /// <param name="episodeIds">episodeIds.</param>
        /// <param name="sourceTitle">sourceTitle.</param>
        /// <param name="languages">languages.</param>
        /// <param name="quality">quality.</param>
        /// <param name="customFormats">customFormats.</param>
        /// <param name="date">date.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="indexer">indexer.</param>
        /// <param name="message">message.</param>
        /// <param name="series">series.</param>
        public BlocklistResource(int id = default(int), int seriesId = default(int), List<int> episodeIds = default(List<int>), string sourceTitle = default(string), List<Language> languages = default(List<Language>), QualityModel quality = default(QualityModel), List<CustomFormatResource> customFormats = default(List<CustomFormatResource>), DateTime date = default(DateTime), DownloadProtocol? protocol = default(DownloadProtocol?), string indexer = default(string), string message = default(string), SeriesResource series = default(SeriesResource))
        {
            this.Id = id;
            this.SeriesId = seriesId;
            this.EpisodeIds = episodeIds;
            this.SourceTitle = sourceTitle;
            this.Languages = languages;
            this.Quality = quality;
            this.CustomFormats = customFormats;
            this.Date = date;
            this.Protocol = protocol;
            this.Indexer = indexer;
            this.Message = message;
            this.Series = series;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets SeriesId
        /// </summary>
        [DataMember(Name = "seriesId", EmitDefaultValue = false)]
        public int SeriesId { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeIds
        /// </summary>
        [DataMember(Name = "episodeIds", EmitDefaultValue = true)]
        public List<int> EpisodeIds { get; set; }

        /// <summary>
        /// Gets or Sets SourceTitle
        /// </summary>
        [DataMember(Name = "sourceTitle", EmitDefaultValue = true)]
        public string SourceTitle { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormats
        /// </summary>
        [DataMember(Name = "customFormats", EmitDefaultValue = true)]
        public List<CustomFormatResource> CustomFormats { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets Indexer
        /// </summary>
        [DataMember(Name = "indexer", EmitDefaultValue = true)]
        public string Indexer { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name = "series", EmitDefaultValue = false)]
        public SeriesResource Series { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlocklistResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  EpisodeIds: ").Append(EpisodeIds).Append("\n");
            sb.Append("  SourceTitle: ").Append(SourceTitle).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  CustomFormats: ").Append(CustomFormats).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Indexer: ").Append(Indexer).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlocklistResource);
        }

        /// <summary>
        /// Returns true if BlocklistResource instances are equal
        /// </summary>
        /// <param name="input">Instance of BlocklistResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlocklistResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SeriesId == input.SeriesId ||
                    this.SeriesId.Equals(input.SeriesId)
                ) && 
                (
                    this.EpisodeIds == input.EpisodeIds ||
                    this.EpisodeIds != null &&
                    input.EpisodeIds != null &&
                    this.EpisodeIds.SequenceEqual(input.EpisodeIds)
                ) && 
                (
                    this.SourceTitle == input.SourceTitle ||
                    (this.SourceTitle != null &&
                    this.SourceTitle.Equals(input.SourceTitle))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.CustomFormats == input.CustomFormats ||
                    this.CustomFormats != null &&
                    input.CustomFormats != null &&
                    this.CustomFormats.SequenceEqual(input.CustomFormats)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    this.Protocol.Equals(input.Protocol)
                ) && 
                (
                    this.Indexer == input.Indexer ||
                    (this.Indexer != null &&
                    this.Indexer.Equals(input.Indexer))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.SeriesId.GetHashCode();
                if (this.EpisodeIds != null)
                    hashCode = hashCode * 59 + this.EpisodeIds.GetHashCode();
                if (this.SourceTitle != null)
                    hashCode = hashCode * 59 + this.SourceTitle.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.CustomFormats != null)
                    hashCode = hashCode * 59 + this.CustomFormats.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Indexer != null)
                    hashCode = hashCode * 59 + this.Indexer.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
