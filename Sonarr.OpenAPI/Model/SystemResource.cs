/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// SystemResource
    /// </summary>
    [DataContract(Name = "SystemResource")]
    public partial class SystemResource : IEquatable<SystemResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public RuntimeMode? Mode { get; set; }

        /// <summary>
        /// Gets or Sets Authentication
        /// </summary>
        [DataMember(Name = "authentication", EmitDefaultValue = false)]
        public AuthenticationType? Authentication { get; set; }

        /// <summary>
        /// Gets or Sets PackageUpdateMechanism
        /// </summary>
        [DataMember(Name = "packageUpdateMechanism", EmitDefaultValue = false)]
        public UpdateMechanism? PackageUpdateMechanism { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseType
        /// </summary>
        [DataMember(Name = "databaseType", EmitDefaultValue = false)]
        public DatabaseType? DatabaseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemResource" /> class.
        /// </summary>
        /// <param name="appName">appName.</param>
        /// <param name="instanceName">instanceName.</param>
        /// <param name="version">version.</param>
        /// <param name="buildTime">buildTime.</param>
        /// <param name="isDebug">isDebug.</param>
        /// <param name="isProduction">isProduction.</param>
        /// <param name="isAdmin">isAdmin.</param>
        /// <param name="isUserInteractive">isUserInteractive.</param>
        /// <param name="startupPath">startupPath.</param>
        /// <param name="appData">appData.</param>
        /// <param name="osName">osName.</param>
        /// <param name="osVersion">osVersion.</param>
        /// <param name="isNetCore">isNetCore.</param>
        /// <param name="isLinux">isLinux.</param>
        /// <param name="isOsx">isOsx.</param>
        /// <param name="isWindows">isWindows.</param>
        /// <param name="isDocker">isDocker.</param>
        /// <param name="mode">mode.</param>
        /// <param name="branch">branch.</param>
        /// <param name="authentication">authentication.</param>
        /// <param name="sqliteVersion">sqliteVersion.</param>
        /// <param name="migrationVersion">migrationVersion.</param>
        /// <param name="urlBase">urlBase.</param>
        /// <param name="runtimeVersion">runtimeVersion.</param>
        /// <param name="runtimeName">runtimeName.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="packageVersion">packageVersion.</param>
        /// <param name="packageAuthor">packageAuthor.</param>
        /// <param name="packageUpdateMechanism">packageUpdateMechanism.</param>
        /// <param name="packageUpdateMechanismMessage">packageUpdateMechanismMessage.</param>
        /// <param name="databaseVersion">databaseVersion.</param>
        /// <param name="databaseType">databaseType.</param>
        public SystemResource(string appName = default(string), string instanceName = default(string), string version = default(string), DateTime buildTime = default(DateTime), bool isDebug = default(bool), bool isProduction = default(bool), bool isAdmin = default(bool), bool isUserInteractive = default(bool), string startupPath = default(string), string appData = default(string), string osName = default(string), string osVersion = default(string), bool isNetCore = default(bool), bool isLinux = default(bool), bool isOsx = default(bool), bool isWindows = default(bool), bool isDocker = default(bool), RuntimeMode? mode = default(RuntimeMode?), string branch = default(string), AuthenticationType? authentication = default(AuthenticationType?), ModelVersion sqliteVersion = default(ModelVersion), int migrationVersion = default(int), string urlBase = default(string), ModelVersion runtimeVersion = default(ModelVersion), string runtimeName = default(string), DateTime startTime = default(DateTime), string packageVersion = default(string), string packageAuthor = default(string), UpdateMechanism? packageUpdateMechanism = default(UpdateMechanism?), string packageUpdateMechanismMessage = default(string), ModelVersion databaseVersion = default(ModelVersion), DatabaseType? databaseType = default(DatabaseType?))
        {
            this.AppName = appName;
            this.InstanceName = instanceName;
            this._Version = version;
            this.BuildTime = buildTime;
            this.IsDebug = isDebug;
            this.IsProduction = isProduction;
            this.IsAdmin = isAdmin;
            this.IsUserInteractive = isUserInteractive;
            this.StartupPath = startupPath;
            this.AppData = appData;
            this.OsName = osName;
            this.OsVersion = osVersion;
            this.IsNetCore = isNetCore;
            this.IsLinux = isLinux;
            this.IsOsx = isOsx;
            this.IsWindows = isWindows;
            this.IsDocker = isDocker;
            this.Mode = mode;
            this.Branch = branch;
            this.Authentication = authentication;
            this.SqliteVersion = sqliteVersion;
            this.MigrationVersion = migrationVersion;
            this.UrlBase = urlBase;
            this.RuntimeVersion = runtimeVersion;
            this.RuntimeName = runtimeName;
            this.StartTime = startTime;
            this.PackageVersion = packageVersion;
            this.PackageAuthor = packageAuthor;
            this.PackageUpdateMechanism = packageUpdateMechanism;
            this.PackageUpdateMechanismMessage = packageUpdateMechanismMessage;
            this.DatabaseVersion = databaseVersion;
            this.DatabaseType = databaseType;
        }

        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name = "appName", EmitDefaultValue = true)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets InstanceName
        /// </summary>
        [DataMember(Name = "instanceName", EmitDefaultValue = true)]
        public string InstanceName { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets BuildTime
        /// </summary>
        [DataMember(Name = "buildTime", EmitDefaultValue = false)]
        public DateTime BuildTime { get; set; }

        /// <summary>
        /// Gets or Sets IsDebug
        /// </summary>
        [DataMember(Name = "isDebug", EmitDefaultValue = true)]
        public bool IsDebug { get; set; }

        /// <summary>
        /// Gets or Sets IsProduction
        /// </summary>
        [DataMember(Name = "isProduction", EmitDefaultValue = true)]
        public bool IsProduction { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name = "isAdmin", EmitDefaultValue = true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets IsUserInteractive
        /// </summary>
        [DataMember(Name = "isUserInteractive", EmitDefaultValue = true)]
        public bool IsUserInteractive { get; set; }

        /// <summary>
        /// Gets or Sets StartupPath
        /// </summary>
        [DataMember(Name = "startupPath", EmitDefaultValue = true)]
        public string StartupPath { get; set; }

        /// <summary>
        /// Gets or Sets AppData
        /// </summary>
        [DataMember(Name = "appData", EmitDefaultValue = true)]
        public string AppData { get; set; }

        /// <summary>
        /// Gets or Sets OsName
        /// </summary>
        [DataMember(Name = "osName", EmitDefaultValue = true)]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or Sets OsVersion
        /// </summary>
        [DataMember(Name = "osVersion", EmitDefaultValue = true)]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or Sets IsNetCore
        /// </summary>
        [DataMember(Name = "isNetCore", EmitDefaultValue = true)]
        public bool IsNetCore { get; set; }

        /// <summary>
        /// Gets or Sets IsLinux
        /// </summary>
        [DataMember(Name = "isLinux", EmitDefaultValue = true)]
        public bool IsLinux { get; set; }

        /// <summary>
        /// Gets or Sets IsOsx
        /// </summary>
        [DataMember(Name = "isOsx", EmitDefaultValue = true)]
        public bool IsOsx { get; set; }

        /// <summary>
        /// Gets or Sets IsWindows
        /// </summary>
        [DataMember(Name = "isWindows", EmitDefaultValue = true)]
        public bool IsWindows { get; set; }

        /// <summary>
        /// Gets or Sets IsDocker
        /// </summary>
        [DataMember(Name = "isDocker", EmitDefaultValue = true)]
        public bool IsDocker { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets SqliteVersion
        /// </summary>
        [DataMember(Name = "sqliteVersion", EmitDefaultValue = false)]
        public ModelVersion SqliteVersion { get; set; }

        /// <summary>
        /// Gets or Sets MigrationVersion
        /// </summary>
        [DataMember(Name = "migrationVersion", EmitDefaultValue = false)]
        public int MigrationVersion { get; set; }

        /// <summary>
        /// Gets or Sets UrlBase
        /// </summary>
        [DataMember(Name = "urlBase", EmitDefaultValue = true)]
        public string UrlBase { get; set; }

        /// <summary>
        /// Gets or Sets RuntimeVersion
        /// </summary>
        [DataMember(Name = "runtimeVersion", EmitDefaultValue = false)]
        public ModelVersion RuntimeVersion { get; set; }

        /// <summary>
        /// Gets or Sets RuntimeName
        /// </summary>
        [DataMember(Name = "runtimeName", EmitDefaultValue = true)]
        public string RuntimeName { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets PackageVersion
        /// </summary>
        [DataMember(Name = "packageVersion", EmitDefaultValue = true)]
        public string PackageVersion { get; set; }

        /// <summary>
        /// Gets or Sets PackageAuthor
        /// </summary>
        [DataMember(Name = "packageAuthor", EmitDefaultValue = true)]
        public string PackageAuthor { get; set; }

        /// <summary>
        /// Gets or Sets PackageUpdateMechanismMessage
        /// </summary>
        [DataMember(Name = "packageUpdateMechanismMessage", EmitDefaultValue = true)]
        public string PackageUpdateMechanismMessage { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseVersion
        /// </summary>
        [DataMember(Name = "databaseVersion", EmitDefaultValue = false)]
        public ModelVersion DatabaseVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemResource {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  InstanceName: ").Append(InstanceName).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  BuildTime: ").Append(BuildTime).Append("\n");
            sb.Append("  IsDebug: ").Append(IsDebug).Append("\n");
            sb.Append("  IsProduction: ").Append(IsProduction).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsUserInteractive: ").Append(IsUserInteractive).Append("\n");
            sb.Append("  StartupPath: ").Append(StartupPath).Append("\n");
            sb.Append("  AppData: ").Append(AppData).Append("\n");
            sb.Append("  OsName: ").Append(OsName).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  IsNetCore: ").Append(IsNetCore).Append("\n");
            sb.Append("  IsLinux: ").Append(IsLinux).Append("\n");
            sb.Append("  IsOsx: ").Append(IsOsx).Append("\n");
            sb.Append("  IsWindows: ").Append(IsWindows).Append("\n");
            sb.Append("  IsDocker: ").Append(IsDocker).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  SqliteVersion: ").Append(SqliteVersion).Append("\n");
            sb.Append("  MigrationVersion: ").Append(MigrationVersion).Append("\n");
            sb.Append("  UrlBase: ").Append(UrlBase).Append("\n");
            sb.Append("  RuntimeVersion: ").Append(RuntimeVersion).Append("\n");
            sb.Append("  RuntimeName: ").Append(RuntimeName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  PackageVersion: ").Append(PackageVersion).Append("\n");
            sb.Append("  PackageAuthor: ").Append(PackageAuthor).Append("\n");
            sb.Append("  PackageUpdateMechanism: ").Append(PackageUpdateMechanism).Append("\n");
            sb.Append("  PackageUpdateMechanismMessage: ").Append(PackageUpdateMechanismMessage).Append("\n");
            sb.Append("  DatabaseVersion: ").Append(DatabaseVersion).Append("\n");
            sb.Append("  DatabaseType: ").Append(DatabaseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemResource);
        }

        /// <summary>
        /// Returns true if SystemResource instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.InstanceName == input.InstanceName ||
                    (this.InstanceName != null &&
                    this.InstanceName.Equals(input.InstanceName))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.BuildTime == input.BuildTime ||
                    (this.BuildTime != null &&
                    this.BuildTime.Equals(input.BuildTime))
                ) && 
                (
                    this.IsDebug == input.IsDebug ||
                    this.IsDebug.Equals(input.IsDebug)
                ) && 
                (
                    this.IsProduction == input.IsProduction ||
                    this.IsProduction.Equals(input.IsProduction)
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    this.IsAdmin.Equals(input.IsAdmin)
                ) && 
                (
                    this.IsUserInteractive == input.IsUserInteractive ||
                    this.IsUserInteractive.Equals(input.IsUserInteractive)
                ) && 
                (
                    this.StartupPath == input.StartupPath ||
                    (this.StartupPath != null &&
                    this.StartupPath.Equals(input.StartupPath))
                ) && 
                (
                    this.AppData == input.AppData ||
                    (this.AppData != null &&
                    this.AppData.Equals(input.AppData))
                ) && 
                (
                    this.OsName == input.OsName ||
                    (this.OsName != null &&
                    this.OsName.Equals(input.OsName))
                ) && 
                (
                    this.OsVersion == input.OsVersion ||
                    (this.OsVersion != null &&
                    this.OsVersion.Equals(input.OsVersion))
                ) && 
                (
                    this.IsNetCore == input.IsNetCore ||
                    this.IsNetCore.Equals(input.IsNetCore)
                ) && 
                (
                    this.IsLinux == input.IsLinux ||
                    this.IsLinux.Equals(input.IsLinux)
                ) && 
                (
                    this.IsOsx == input.IsOsx ||
                    this.IsOsx.Equals(input.IsOsx)
                ) && 
                (
                    this.IsWindows == input.IsWindows ||
                    this.IsWindows.Equals(input.IsWindows)
                ) && 
                (
                    this.IsDocker == input.IsDocker ||
                    this.IsDocker.Equals(input.IsDocker)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.Authentication == input.Authentication ||
                    this.Authentication.Equals(input.Authentication)
                ) && 
                (
                    this.SqliteVersion == input.SqliteVersion ||
                    (this.SqliteVersion != null &&
                    this.SqliteVersion.Equals(input.SqliteVersion))
                ) && 
                (
                    this.MigrationVersion == input.MigrationVersion ||
                    this.MigrationVersion.Equals(input.MigrationVersion)
                ) && 
                (
                    this.UrlBase == input.UrlBase ||
                    (this.UrlBase != null &&
                    this.UrlBase.Equals(input.UrlBase))
                ) && 
                (
                    this.RuntimeVersion == input.RuntimeVersion ||
                    (this.RuntimeVersion != null &&
                    this.RuntimeVersion.Equals(input.RuntimeVersion))
                ) && 
                (
                    this.RuntimeName == input.RuntimeName ||
                    (this.RuntimeName != null &&
                    this.RuntimeName.Equals(input.RuntimeName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.PackageVersion == input.PackageVersion ||
                    (this.PackageVersion != null &&
                    this.PackageVersion.Equals(input.PackageVersion))
                ) && 
                (
                    this.PackageAuthor == input.PackageAuthor ||
                    (this.PackageAuthor != null &&
                    this.PackageAuthor.Equals(input.PackageAuthor))
                ) && 
                (
                    this.PackageUpdateMechanism == input.PackageUpdateMechanism ||
                    this.PackageUpdateMechanism.Equals(input.PackageUpdateMechanism)
                ) && 
                (
                    this.PackageUpdateMechanismMessage == input.PackageUpdateMechanismMessage ||
                    (this.PackageUpdateMechanismMessage != null &&
                    this.PackageUpdateMechanismMessage.Equals(input.PackageUpdateMechanismMessage))
                ) && 
                (
                    this.DatabaseVersion == input.DatabaseVersion ||
                    (this.DatabaseVersion != null &&
                    this.DatabaseVersion.Equals(input.DatabaseVersion))
                ) && 
                (
                    this.DatabaseType == input.DatabaseType ||
                    this.DatabaseType.Equals(input.DatabaseType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.InstanceName != null)
                    hashCode = hashCode * 59 + this.InstanceName.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.BuildTime != null)
                    hashCode = hashCode * 59 + this.BuildTime.GetHashCode();
                hashCode = hashCode * 59 + this.IsDebug.GetHashCode();
                hashCode = hashCode * 59 + this.IsProduction.GetHashCode();
                hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                hashCode = hashCode * 59 + this.IsUserInteractive.GetHashCode();
                if (this.StartupPath != null)
                    hashCode = hashCode * 59 + this.StartupPath.GetHashCode();
                if (this.AppData != null)
                    hashCode = hashCode * 59 + this.AppData.GetHashCode();
                if (this.OsName != null)
                    hashCode = hashCode * 59 + this.OsName.GetHashCode();
                if (this.OsVersion != null)
                    hashCode = hashCode * 59 + this.OsVersion.GetHashCode();
                hashCode = hashCode * 59 + this.IsNetCore.GetHashCode();
                hashCode = hashCode * 59 + this.IsLinux.GetHashCode();
                hashCode = hashCode * 59 + this.IsOsx.GetHashCode();
                hashCode = hashCode * 59 + this.IsWindows.GetHashCode();
                hashCode = hashCode * 59 + this.IsDocker.GetHashCode();
                hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                hashCode = hashCode * 59 + this.Authentication.GetHashCode();
                if (this.SqliteVersion != null)
                    hashCode = hashCode * 59 + this.SqliteVersion.GetHashCode();
                hashCode = hashCode * 59 + this.MigrationVersion.GetHashCode();
                if (this.UrlBase != null)
                    hashCode = hashCode * 59 + this.UrlBase.GetHashCode();
                if (this.RuntimeVersion != null)
                    hashCode = hashCode * 59 + this.RuntimeVersion.GetHashCode();
                if (this.RuntimeName != null)
                    hashCode = hashCode * 59 + this.RuntimeName.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.PackageVersion != null)
                    hashCode = hashCode * 59 + this.PackageVersion.GetHashCode();
                if (this.PackageAuthor != null)
                    hashCode = hashCode * 59 + this.PackageAuthor.GetHashCode();
                hashCode = hashCode * 59 + this.PackageUpdateMechanism.GetHashCode();
                if (this.PackageUpdateMechanismMessage != null)
                    hashCode = hashCode * 59 + this.PackageUpdateMechanismMessage.GetHashCode();
                if (this.DatabaseVersion != null)
                    hashCode = hashCode * 59 + this.DatabaseVersion.GetHashCode();
                hashCode = hashCode * 59 + this.DatabaseType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
