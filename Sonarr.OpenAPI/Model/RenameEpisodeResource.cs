/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// RenameEpisodeResource
    /// </summary>
    [DataContract(Name = "RenameEpisodeResource")]
    public partial class RenameEpisodeResource : IEquatable<RenameEpisodeResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenameEpisodeResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="seriesId">seriesId.</param>
        /// <param name="seasonNumber">seasonNumber.</param>
        /// <param name="episodeNumbers">episodeNumbers.</param>
        /// <param name="episodeFileId">episodeFileId.</param>
        /// <param name="existingPath">existingPath.</param>
        /// <param name="newPath">newPath.</param>
        public RenameEpisodeResource(int id = default(int), int seriesId = default(int), int seasonNumber = default(int), List<int> episodeNumbers = default(List<int>), int episodeFileId = default(int), string existingPath = default(string), string newPath = default(string))
        {
            this.Id = id;
            this.SeriesId = seriesId;
            this.SeasonNumber = seasonNumber;
            this.EpisodeNumbers = episodeNumbers;
            this.EpisodeFileId = episodeFileId;
            this.ExistingPath = existingPath;
            this.NewPath = newPath;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets SeriesId
        /// </summary>
        [DataMember(Name = "seriesId", EmitDefaultValue = false)]
        public int SeriesId { get; set; }

        /// <summary>
        /// Gets or Sets SeasonNumber
        /// </summary>
        [DataMember(Name = "seasonNumber", EmitDefaultValue = false)]
        public int SeasonNumber { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeNumbers
        /// </summary>
        [DataMember(Name = "episodeNumbers", EmitDefaultValue = true)]
        public List<int> EpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeFileId
        /// </summary>
        [DataMember(Name = "episodeFileId", EmitDefaultValue = false)]
        public int EpisodeFileId { get; set; }

        /// <summary>
        /// Gets or Sets ExistingPath
        /// </summary>
        [DataMember(Name = "existingPath", EmitDefaultValue = true)]
        public string ExistingPath { get; set; }

        /// <summary>
        /// Gets or Sets NewPath
        /// </summary>
        [DataMember(Name = "newPath", EmitDefaultValue = true)]
        public string NewPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RenameEpisodeResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  SeasonNumber: ").Append(SeasonNumber).Append("\n");
            sb.Append("  EpisodeNumbers: ").Append(EpisodeNumbers).Append("\n");
            sb.Append("  EpisodeFileId: ").Append(EpisodeFileId).Append("\n");
            sb.Append("  ExistingPath: ").Append(ExistingPath).Append("\n");
            sb.Append("  NewPath: ").Append(NewPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RenameEpisodeResource);
        }

        /// <summary>
        /// Returns true if RenameEpisodeResource instances are equal
        /// </summary>
        /// <param name="input">Instance of RenameEpisodeResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RenameEpisodeResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SeriesId == input.SeriesId ||
                    this.SeriesId.Equals(input.SeriesId)
                ) && 
                (
                    this.SeasonNumber == input.SeasonNumber ||
                    this.SeasonNumber.Equals(input.SeasonNumber)
                ) && 
                (
                    this.EpisodeNumbers == input.EpisodeNumbers ||
                    this.EpisodeNumbers != null &&
                    input.EpisodeNumbers != null &&
                    this.EpisodeNumbers.SequenceEqual(input.EpisodeNumbers)
                ) && 
                (
                    this.EpisodeFileId == input.EpisodeFileId ||
                    this.EpisodeFileId.Equals(input.EpisodeFileId)
                ) && 
                (
                    this.ExistingPath == input.ExistingPath ||
                    (this.ExistingPath != null &&
                    this.ExistingPath.Equals(input.ExistingPath))
                ) && 
                (
                    this.NewPath == input.NewPath ||
                    (this.NewPath != null &&
                    this.NewPath.Equals(input.NewPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.SeriesId.GetHashCode();
                hashCode = hashCode * 59 + this.SeasonNumber.GetHashCode();
                if (this.EpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.EpisodeNumbers.GetHashCode();
                hashCode = hashCode * 59 + this.EpisodeFileId.GetHashCode();
                if (this.ExistingPath != null)
                    hashCode = hashCode * 59 + this.ExistingPath.GetHashCode();
                if (this.NewPath != null)
                    hashCode = hashCode * 59 + this.NewPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
