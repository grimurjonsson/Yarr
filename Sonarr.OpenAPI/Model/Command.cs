/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// Command
    /// </summary>
    [DataContract(Name = "Command")]
    public partial class Command : IEquatable<Command>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name = "trigger", EmitDefaultValue = false)]
        public CommandTrigger? Trigger { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Command" /> class.
        /// </summary>
        /// <param name="sendUpdatesToClient">sendUpdatesToClient.</param>
        /// <param name="lastExecutionTime">lastExecutionTime.</param>
        /// <param name="lastStartTime">lastStartTime.</param>
        /// <param name="trigger">trigger.</param>
        /// <param name="suppressMessages">suppressMessages.</param>
        /// <param name="clientUserAgent">clientUserAgent.</param>
        public Command(bool sendUpdatesToClient = default(bool), DateTime? lastExecutionTime = default(DateTime?), DateTime? lastStartTime = default(DateTime?), CommandTrigger? trigger = default(CommandTrigger?), bool suppressMessages = default(bool), string clientUserAgent = default(string))
        {
            this.SendUpdatesToClient = sendUpdatesToClient;
            this.LastExecutionTime = lastExecutionTime;
            this.LastStartTime = lastStartTime;
            this.Trigger = trigger;
            this.SuppressMessages = suppressMessages;
            this.ClientUserAgent = clientUserAgent;
        }

        /// <summary>
        /// Gets or Sets SendUpdatesToClient
        /// </summary>
        [DataMember(Name = "sendUpdatesToClient", EmitDefaultValue = true)]
        public bool SendUpdatesToClient { get; set; }

        /// <summary>
        /// Gets or Sets UpdateScheduledTask
        /// </summary>
        [DataMember(Name = "updateScheduledTask", EmitDefaultValue = true)]
        public bool UpdateScheduledTask { get; private set; }

        /// <summary>
        /// Returns false as UpdateScheduledTask should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdateScheduledTask()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CompletionMessage
        /// </summary>
        [DataMember(Name = "completionMessage", EmitDefaultValue = true)]
        public string CompletionMessage { get; private set; }

        /// <summary>
        /// Returns false as CompletionMessage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompletionMessage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RequiresDiskAccess
        /// </summary>
        [DataMember(Name = "requiresDiskAccess", EmitDefaultValue = true)]
        public bool RequiresDiskAccess { get; private set; }

        /// <summary>
        /// Returns false as RequiresDiskAccess should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiresDiskAccess()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsExclusive
        /// </summary>
        [DataMember(Name = "isExclusive", EmitDefaultValue = true)]
        public bool IsExclusive { get; private set; }

        /// <summary>
        /// Returns false as IsExclusive should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsExclusive()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsLongRunning
        /// </summary>
        [DataMember(Name = "isLongRunning", EmitDefaultValue = true)]
        public bool IsLongRunning { get; private set; }

        /// <summary>
        /// Returns false as IsLongRunning should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsLongRunning()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastExecutionTime
        /// </summary>
        [DataMember(Name = "lastExecutionTime", EmitDefaultValue = true)]
        public DateTime? LastExecutionTime { get; set; }

        /// <summary>
        /// Gets or Sets LastStartTime
        /// </summary>
        [DataMember(Name = "lastStartTime", EmitDefaultValue = true)]
        public DateTime? LastStartTime { get; set; }

        /// <summary>
        /// Gets or Sets SuppressMessages
        /// </summary>
        [DataMember(Name = "suppressMessages", EmitDefaultValue = true)]
        public bool SuppressMessages { get; set; }

        /// <summary>
        /// Gets or Sets ClientUserAgent
        /// </summary>
        [DataMember(Name = "clientUserAgent", EmitDefaultValue = true)]
        public string ClientUserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Command {\n");
            sb.Append("  SendUpdatesToClient: ").Append(SendUpdatesToClient).Append("\n");
            sb.Append("  UpdateScheduledTask: ").Append(UpdateScheduledTask).Append("\n");
            sb.Append("  CompletionMessage: ").Append(CompletionMessage).Append("\n");
            sb.Append("  RequiresDiskAccess: ").Append(RequiresDiskAccess).Append("\n");
            sb.Append("  IsExclusive: ").Append(IsExclusive).Append("\n");
            sb.Append("  IsLongRunning: ").Append(IsLongRunning).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LastExecutionTime: ").Append(LastExecutionTime).Append("\n");
            sb.Append("  LastStartTime: ").Append(LastStartTime).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  SuppressMessages: ").Append(SuppressMessages).Append("\n");
            sb.Append("  ClientUserAgent: ").Append(ClientUserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Command);
        }

        /// <summary>
        /// Returns true if Command instances are equal
        /// </summary>
        /// <param name="input">Instance of Command to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Command input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SendUpdatesToClient == input.SendUpdatesToClient ||
                    this.SendUpdatesToClient.Equals(input.SendUpdatesToClient)
                ) && 
                (
                    this.UpdateScheduledTask == input.UpdateScheduledTask ||
                    this.UpdateScheduledTask.Equals(input.UpdateScheduledTask)
                ) && 
                (
                    this.CompletionMessage == input.CompletionMessage ||
                    (this.CompletionMessage != null &&
                    this.CompletionMessage.Equals(input.CompletionMessage))
                ) && 
                (
                    this.RequiresDiskAccess == input.RequiresDiskAccess ||
                    this.RequiresDiskAccess.Equals(input.RequiresDiskAccess)
                ) && 
                (
                    this.IsExclusive == input.IsExclusive ||
                    this.IsExclusive.Equals(input.IsExclusive)
                ) && 
                (
                    this.IsLongRunning == input.IsLongRunning ||
                    this.IsLongRunning.Equals(input.IsLongRunning)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LastExecutionTime == input.LastExecutionTime ||
                    (this.LastExecutionTime != null &&
                    this.LastExecutionTime.Equals(input.LastExecutionTime))
                ) && 
                (
                    this.LastStartTime == input.LastStartTime ||
                    (this.LastStartTime != null &&
                    this.LastStartTime.Equals(input.LastStartTime))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    this.Trigger.Equals(input.Trigger)
                ) && 
                (
                    this.SuppressMessages == input.SuppressMessages ||
                    this.SuppressMessages.Equals(input.SuppressMessages)
                ) && 
                (
                    this.ClientUserAgent == input.ClientUserAgent ||
                    (this.ClientUserAgent != null &&
                    this.ClientUserAgent.Equals(input.ClientUserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SendUpdatesToClient.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateScheduledTask.GetHashCode();
                if (this.CompletionMessage != null)
                    hashCode = hashCode * 59 + this.CompletionMessage.GetHashCode();
                hashCode = hashCode * 59 + this.RequiresDiskAccess.GetHashCode();
                hashCode = hashCode * 59 + this.IsExclusive.GetHashCode();
                hashCode = hashCode * 59 + this.IsLongRunning.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LastExecutionTime != null)
                    hashCode = hashCode * 59 + this.LastExecutionTime.GetHashCode();
                if (this.LastStartTime != null)
                    hashCode = hashCode * 59 + this.LastStartTime.GetHashCode();
                hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                hashCode = hashCode * 59 + this.SuppressMessages.GetHashCode();
                if (this.ClientUserAgent != null)
                    hashCode = hashCode * 59 + this.ClientUserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
