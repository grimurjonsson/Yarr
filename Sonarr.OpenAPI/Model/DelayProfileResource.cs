/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// DelayProfileResource
    /// </summary>
    [DataContract(Name = "DelayProfileResource")]
    public partial class DelayProfileResource : IEquatable<DelayProfileResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PreferredProtocol
        /// </summary>
        [DataMember(Name = "preferredProtocol", EmitDefaultValue = false)]
        public DownloadProtocol? PreferredProtocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DelayProfileResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="enableUsenet">enableUsenet.</param>
        /// <param name="enableTorrent">enableTorrent.</param>
        /// <param name="preferredProtocol">preferredProtocol.</param>
        /// <param name="usenetDelay">usenetDelay.</param>
        /// <param name="torrentDelay">torrentDelay.</param>
        /// <param name="bypassIfHighestQuality">bypassIfHighestQuality.</param>
        /// <param name="bypassIfAboveCustomFormatScore">bypassIfAboveCustomFormatScore.</param>
        /// <param name="minimumCustomFormatScore">minimumCustomFormatScore.</param>
        /// <param name="order">order.</param>
        /// <param name="tags">tags.</param>
        public DelayProfileResource(int id = default(int), bool enableUsenet = default(bool), bool enableTorrent = default(bool), DownloadProtocol? preferredProtocol = default(DownloadProtocol?), int usenetDelay = default(int), int torrentDelay = default(int), bool bypassIfHighestQuality = default(bool), bool bypassIfAboveCustomFormatScore = default(bool), int minimumCustomFormatScore = default(int), int order = default(int), List<int> tags = default(List<int>))
        {
            this.Id = id;
            this.EnableUsenet = enableUsenet;
            this.EnableTorrent = enableTorrent;
            this.PreferredProtocol = preferredProtocol;
            this.UsenetDelay = usenetDelay;
            this.TorrentDelay = torrentDelay;
            this.BypassIfHighestQuality = bypassIfHighestQuality;
            this.BypassIfAboveCustomFormatScore = bypassIfAboveCustomFormatScore;
            this.MinimumCustomFormatScore = minimumCustomFormatScore;
            this.Order = order;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets EnableUsenet
        /// </summary>
        [DataMember(Name = "enableUsenet", EmitDefaultValue = true)]
        public bool EnableUsenet { get; set; }

        /// <summary>
        /// Gets or Sets EnableTorrent
        /// </summary>
        [DataMember(Name = "enableTorrent", EmitDefaultValue = true)]
        public bool EnableTorrent { get; set; }

        /// <summary>
        /// Gets or Sets UsenetDelay
        /// </summary>
        [DataMember(Name = "usenetDelay", EmitDefaultValue = false)]
        public int UsenetDelay { get; set; }

        /// <summary>
        /// Gets or Sets TorrentDelay
        /// </summary>
        [DataMember(Name = "torrentDelay", EmitDefaultValue = false)]
        public int TorrentDelay { get; set; }

        /// <summary>
        /// Gets or Sets BypassIfHighestQuality
        /// </summary>
        [DataMember(Name = "bypassIfHighestQuality", EmitDefaultValue = true)]
        public bool BypassIfHighestQuality { get; set; }

        /// <summary>
        /// Gets or Sets BypassIfAboveCustomFormatScore
        /// </summary>
        [DataMember(Name = "bypassIfAboveCustomFormatScore", EmitDefaultValue = true)]
        public bool BypassIfAboveCustomFormatScore { get; set; }

        /// <summary>
        /// Gets or Sets MinimumCustomFormatScore
        /// </summary>
        [DataMember(Name = "minimumCustomFormatScore", EmitDefaultValue = false)]
        public int MinimumCustomFormatScore { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DelayProfileResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EnableUsenet: ").Append(EnableUsenet).Append("\n");
            sb.Append("  EnableTorrent: ").Append(EnableTorrent).Append("\n");
            sb.Append("  PreferredProtocol: ").Append(PreferredProtocol).Append("\n");
            sb.Append("  UsenetDelay: ").Append(UsenetDelay).Append("\n");
            sb.Append("  TorrentDelay: ").Append(TorrentDelay).Append("\n");
            sb.Append("  BypassIfHighestQuality: ").Append(BypassIfHighestQuality).Append("\n");
            sb.Append("  BypassIfAboveCustomFormatScore: ").Append(BypassIfAboveCustomFormatScore).Append("\n");
            sb.Append("  MinimumCustomFormatScore: ").Append(MinimumCustomFormatScore).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DelayProfileResource);
        }

        /// <summary>
        /// Returns true if DelayProfileResource instances are equal
        /// </summary>
        /// <param name="input">Instance of DelayProfileResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DelayProfileResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.EnableUsenet == input.EnableUsenet ||
                    this.EnableUsenet.Equals(input.EnableUsenet)
                ) && 
                (
                    this.EnableTorrent == input.EnableTorrent ||
                    this.EnableTorrent.Equals(input.EnableTorrent)
                ) && 
                (
                    this.PreferredProtocol == input.PreferredProtocol ||
                    this.PreferredProtocol.Equals(input.PreferredProtocol)
                ) && 
                (
                    this.UsenetDelay == input.UsenetDelay ||
                    this.UsenetDelay.Equals(input.UsenetDelay)
                ) && 
                (
                    this.TorrentDelay == input.TorrentDelay ||
                    this.TorrentDelay.Equals(input.TorrentDelay)
                ) && 
                (
                    this.BypassIfHighestQuality == input.BypassIfHighestQuality ||
                    this.BypassIfHighestQuality.Equals(input.BypassIfHighestQuality)
                ) && 
                (
                    this.BypassIfAboveCustomFormatScore == input.BypassIfAboveCustomFormatScore ||
                    this.BypassIfAboveCustomFormatScore.Equals(input.BypassIfAboveCustomFormatScore)
                ) && 
                (
                    this.MinimumCustomFormatScore == input.MinimumCustomFormatScore ||
                    this.MinimumCustomFormatScore.Equals(input.MinimumCustomFormatScore)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.EnableUsenet.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTorrent.GetHashCode();
                hashCode = hashCode * 59 + this.PreferredProtocol.GetHashCode();
                hashCode = hashCode * 59 + this.UsenetDelay.GetHashCode();
                hashCode = hashCode * 59 + this.TorrentDelay.GetHashCode();
                hashCode = hashCode * 59 + this.BypassIfHighestQuality.GetHashCode();
                hashCode = hashCode * 59 + this.BypassIfAboveCustomFormatScore.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumCustomFormatScore.GetHashCode();
                hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
