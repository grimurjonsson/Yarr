/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// ReleaseResource
    /// </summary>
    [DataContract(Name = "ReleaseResource")]
    public partial class ReleaseResource : IEquatable<ReleaseResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public DownloadProtocol? Protocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="guid">guid.</param>
        /// <param name="quality">quality.</param>
        /// <param name="qualityWeight">qualityWeight.</param>
        /// <param name="age">age.</param>
        /// <param name="ageHours">ageHours.</param>
        /// <param name="ageMinutes">ageMinutes.</param>
        /// <param name="size">size.</param>
        /// <param name="indexerId">indexerId.</param>
        /// <param name="indexer">indexer.</param>
        /// <param name="releaseGroup">releaseGroup.</param>
        /// <param name="subGroup">subGroup.</param>
        /// <param name="releaseHash">releaseHash.</param>
        /// <param name="title">title.</param>
        /// <param name="fullSeason">fullSeason.</param>
        /// <param name="sceneSource">sceneSource.</param>
        /// <param name="seasonNumber">seasonNumber.</param>
        /// <param name="languages">languages.</param>
        /// <param name="languageWeight">languageWeight.</param>
        /// <param name="airDate">airDate.</param>
        /// <param name="seriesTitle">seriesTitle.</param>
        /// <param name="episodeNumbers">episodeNumbers.</param>
        /// <param name="absoluteEpisodeNumbers">absoluteEpisodeNumbers.</param>
        /// <param name="mappedSeasonNumber">mappedSeasonNumber.</param>
        /// <param name="mappedEpisodeNumbers">mappedEpisodeNumbers.</param>
        /// <param name="mappedAbsoluteEpisodeNumbers">mappedAbsoluteEpisodeNumbers.</param>
        /// <param name="mappedSeriesId">mappedSeriesId.</param>
        /// <param name="mappedEpisodeInfo">mappedEpisodeInfo.</param>
        /// <param name="approved">approved.</param>
        /// <param name="temporarilyRejected">temporarilyRejected.</param>
        /// <param name="rejected">rejected.</param>
        /// <param name="tvdbId">tvdbId.</param>
        /// <param name="tvRageId">tvRageId.</param>
        /// <param name="rejections">rejections.</param>
        /// <param name="publishDate">publishDate.</param>
        /// <param name="commentUrl">commentUrl.</param>
        /// <param name="downloadUrl">downloadUrl.</param>
        /// <param name="infoUrl">infoUrl.</param>
        /// <param name="episodeRequested">episodeRequested.</param>
        /// <param name="downloadAllowed">downloadAllowed.</param>
        /// <param name="releaseWeight">releaseWeight.</param>
        /// <param name="customFormats">customFormats.</param>
        /// <param name="customFormatScore">customFormatScore.</param>
        /// <param name="sceneMapping">sceneMapping.</param>
        /// <param name="magnetUrl">magnetUrl.</param>
        /// <param name="infoHash">infoHash.</param>
        /// <param name="seeders">seeders.</param>
        /// <param name="leechers">leechers.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="isDaily">isDaily.</param>
        /// <param name="isAbsoluteNumbering">isAbsoluteNumbering.</param>
        /// <param name="isPossibleSpecialEpisode">isPossibleSpecialEpisode.</param>
        /// <param name="special">special.</param>
        /// <param name="seriesId">seriesId.</param>
        /// <param name="episodeId">episodeId.</param>
        /// <param name="episodeIds">episodeIds.</param>
        /// <param name="downloadClientId">downloadClientId.</param>
        /// <param name="shouldOverride">shouldOverride.</param>
        public ReleaseResource(int id = default(int), string guid = default(string), QualityModel quality = default(QualityModel), int qualityWeight = default(int), int age = default(int), double ageHours = default(double), double ageMinutes = default(double), long size = default(long), int indexerId = default(int), string indexer = default(string), string releaseGroup = default(string), string subGroup = default(string), string releaseHash = default(string), string title = default(string), bool fullSeason = default(bool), bool sceneSource = default(bool), int seasonNumber = default(int), List<Language> languages = default(List<Language>), int languageWeight = default(int), string airDate = default(string), string seriesTitle = default(string), List<int> episodeNumbers = default(List<int>), List<int> absoluteEpisodeNumbers = default(List<int>), int? mappedSeasonNumber = default(int?), List<int> mappedEpisodeNumbers = default(List<int>), List<int> mappedAbsoluteEpisodeNumbers = default(List<int>), int? mappedSeriesId = default(int?), List<ReleaseEpisodeResource> mappedEpisodeInfo = default(List<ReleaseEpisodeResource>), bool approved = default(bool), bool temporarilyRejected = default(bool), bool rejected = default(bool), int tvdbId = default(int), int tvRageId = default(int), List<string> rejections = default(List<string>), DateTime publishDate = default(DateTime), string commentUrl = default(string), string downloadUrl = default(string), string infoUrl = default(string), bool episodeRequested = default(bool), bool downloadAllowed = default(bool), int releaseWeight = default(int), List<CustomFormatResource> customFormats = default(List<CustomFormatResource>), int customFormatScore = default(int), AlternateTitleResource sceneMapping = default(AlternateTitleResource), string magnetUrl = default(string), string infoHash = default(string), int? seeders = default(int?), int? leechers = default(int?), DownloadProtocol? protocol = default(DownloadProtocol?), bool isDaily = default(bool), bool isAbsoluteNumbering = default(bool), bool isPossibleSpecialEpisode = default(bool), bool special = default(bool), int? seriesId = default(int?), int? episodeId = default(int?), List<int> episodeIds = default(List<int>), int? downloadClientId = default(int?), bool? shouldOverride = default(bool?))
        {
            this.Id = id;
            this.Guid = guid;
            this.Quality = quality;
            this.QualityWeight = qualityWeight;
            this.Age = age;
            this.AgeHours = ageHours;
            this.AgeMinutes = ageMinutes;
            this.Size = size;
            this.IndexerId = indexerId;
            this.Indexer = indexer;
            this.ReleaseGroup = releaseGroup;
            this.SubGroup = subGroup;
            this.ReleaseHash = releaseHash;
            this.Title = title;
            this.FullSeason = fullSeason;
            this.SceneSource = sceneSource;
            this.SeasonNumber = seasonNumber;
            this.Languages = languages;
            this.LanguageWeight = languageWeight;
            this.AirDate = airDate;
            this.SeriesTitle = seriesTitle;
            this.EpisodeNumbers = episodeNumbers;
            this.AbsoluteEpisodeNumbers = absoluteEpisodeNumbers;
            this.MappedSeasonNumber = mappedSeasonNumber;
            this.MappedEpisodeNumbers = mappedEpisodeNumbers;
            this.MappedAbsoluteEpisodeNumbers = mappedAbsoluteEpisodeNumbers;
            this.MappedSeriesId = mappedSeriesId;
            this.MappedEpisodeInfo = mappedEpisodeInfo;
            this.Approved = approved;
            this.TemporarilyRejected = temporarilyRejected;
            this.Rejected = rejected;
            this.TvdbId = tvdbId;
            this.TvRageId = tvRageId;
            this.Rejections = rejections;
            this.PublishDate = publishDate;
            this.CommentUrl = commentUrl;
            this.DownloadUrl = downloadUrl;
            this.InfoUrl = infoUrl;
            this.EpisodeRequested = episodeRequested;
            this.DownloadAllowed = downloadAllowed;
            this.ReleaseWeight = releaseWeight;
            this.CustomFormats = customFormats;
            this.CustomFormatScore = customFormatScore;
            this.SceneMapping = sceneMapping;
            this.MagnetUrl = magnetUrl;
            this.InfoHash = infoHash;
            this.Seeders = seeders;
            this.Leechers = leechers;
            this.Protocol = protocol;
            this.IsDaily = isDaily;
            this.IsAbsoluteNumbering = isAbsoluteNumbering;
            this.IsPossibleSpecialEpisode = isPossibleSpecialEpisode;
            this.Special = special;
            this.SeriesId = seriesId;
            this.EpisodeId = episodeId;
            this.EpisodeIds = episodeIds;
            this.DownloadClientId = downloadClientId;
            this.ShouldOverride = shouldOverride;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name = "guid", EmitDefaultValue = true)]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets QualityWeight
        /// </summary>
        [DataMember(Name = "qualityWeight", EmitDefaultValue = false)]
        public int QualityWeight { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public int Age { get; set; }

        /// <summary>
        /// Gets or Sets AgeHours
        /// </summary>
        [DataMember(Name = "ageHours", EmitDefaultValue = false)]
        public double AgeHours { get; set; }

        /// <summary>
        /// Gets or Sets AgeMinutes
        /// </summary>
        [DataMember(Name = "ageMinutes", EmitDefaultValue = false)]
        public double AgeMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long Size { get; set; }

        /// <summary>
        /// Gets or Sets IndexerId
        /// </summary>
        [DataMember(Name = "indexerId", EmitDefaultValue = false)]
        public int IndexerId { get; set; }

        /// <summary>
        /// Gets or Sets Indexer
        /// </summary>
        [DataMember(Name = "indexer", EmitDefaultValue = true)]
        public string Indexer { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroup
        /// </summary>
        [DataMember(Name = "releaseGroup", EmitDefaultValue = true)]
        public string ReleaseGroup { get; set; }

        /// <summary>
        /// Gets or Sets SubGroup
        /// </summary>
        [DataMember(Name = "subGroup", EmitDefaultValue = true)]
        public string SubGroup { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseHash
        /// </summary>
        [DataMember(Name = "releaseHash", EmitDefaultValue = true)]
        public string ReleaseHash { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FullSeason
        /// </summary>
        [DataMember(Name = "fullSeason", EmitDefaultValue = true)]
        public bool FullSeason { get; set; }

        /// <summary>
        /// Gets or Sets SceneSource
        /// </summary>
        [DataMember(Name = "sceneSource", EmitDefaultValue = true)]
        public bool SceneSource { get; set; }

        /// <summary>
        /// Gets or Sets SeasonNumber
        /// </summary>
        [DataMember(Name = "seasonNumber", EmitDefaultValue = false)]
        public int SeasonNumber { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets LanguageWeight
        /// </summary>
        [DataMember(Name = "languageWeight", EmitDefaultValue = false)]
        public int LanguageWeight { get; set; }

        /// <summary>
        /// Gets or Sets AirDate
        /// </summary>
        [DataMember(Name = "airDate", EmitDefaultValue = true)]
        public string AirDate { get; set; }

        /// <summary>
        /// Gets or Sets SeriesTitle
        /// </summary>
        [DataMember(Name = "seriesTitle", EmitDefaultValue = true)]
        public string SeriesTitle { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeNumbers
        /// </summary>
        [DataMember(Name = "episodeNumbers", EmitDefaultValue = true)]
        public List<int> EpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteEpisodeNumbers
        /// </summary>
        [DataMember(Name = "absoluteEpisodeNumbers", EmitDefaultValue = true)]
        public List<int> AbsoluteEpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets MappedSeasonNumber
        /// </summary>
        [DataMember(Name = "mappedSeasonNumber", EmitDefaultValue = true)]
        public int? MappedSeasonNumber { get; set; }

        /// <summary>
        /// Gets or Sets MappedEpisodeNumbers
        /// </summary>
        [DataMember(Name = "mappedEpisodeNumbers", EmitDefaultValue = true)]
        public List<int> MappedEpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets MappedAbsoluteEpisodeNumbers
        /// </summary>
        [DataMember(Name = "mappedAbsoluteEpisodeNumbers", EmitDefaultValue = true)]
        public List<int> MappedAbsoluteEpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets MappedSeriesId
        /// </summary>
        [DataMember(Name = "mappedSeriesId", EmitDefaultValue = true)]
        public int? MappedSeriesId { get; set; }

        /// <summary>
        /// Gets or Sets MappedEpisodeInfo
        /// </summary>
        [DataMember(Name = "mappedEpisodeInfo", EmitDefaultValue = true)]
        public List<ReleaseEpisodeResource> MappedEpisodeInfo { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets TemporarilyRejected
        /// </summary>
        [DataMember(Name = "temporarilyRejected", EmitDefaultValue = true)]
        public bool TemporarilyRejected { get; set; }

        /// <summary>
        /// Gets or Sets Rejected
        /// </summary>
        [DataMember(Name = "rejected", EmitDefaultValue = true)]
        public bool Rejected { get; set; }

        /// <summary>
        /// Gets or Sets TvdbId
        /// </summary>
        [DataMember(Name = "tvdbId", EmitDefaultValue = false)]
        public int TvdbId { get; set; }

        /// <summary>
        /// Gets or Sets TvRageId
        /// </summary>
        [DataMember(Name = "tvRageId", EmitDefaultValue = false)]
        public int TvRageId { get; set; }

        /// <summary>
        /// Gets or Sets Rejections
        /// </summary>
        [DataMember(Name = "rejections", EmitDefaultValue = true)]
        public List<string> Rejections { get; set; }

        /// <summary>
        /// Gets or Sets PublishDate
        /// </summary>
        [DataMember(Name = "publishDate", EmitDefaultValue = false)]
        public DateTime PublishDate { get; set; }

        /// <summary>
        /// Gets or Sets CommentUrl
        /// </summary>
        [DataMember(Name = "commentUrl", EmitDefaultValue = true)]
        public string CommentUrl { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [DataMember(Name = "downloadUrl", EmitDefaultValue = true)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or Sets InfoUrl
        /// </summary>
        [DataMember(Name = "infoUrl", EmitDefaultValue = true)]
        public string InfoUrl { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeRequested
        /// </summary>
        [DataMember(Name = "episodeRequested", EmitDefaultValue = true)]
        public bool EpisodeRequested { get; set; }

        /// <summary>
        /// Gets or Sets DownloadAllowed
        /// </summary>
        [DataMember(Name = "downloadAllowed", EmitDefaultValue = true)]
        public bool DownloadAllowed { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseWeight
        /// </summary>
        [DataMember(Name = "releaseWeight", EmitDefaultValue = false)]
        public int ReleaseWeight { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormats
        /// </summary>
        [DataMember(Name = "customFormats", EmitDefaultValue = true)]
        public List<CustomFormatResource> CustomFormats { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormatScore
        /// </summary>
        [DataMember(Name = "customFormatScore", EmitDefaultValue = false)]
        public int CustomFormatScore { get; set; }

        /// <summary>
        /// Gets or Sets SceneMapping
        /// </summary>
        [DataMember(Name = "sceneMapping", EmitDefaultValue = false)]
        public AlternateTitleResource SceneMapping { get; set; }

        /// <summary>
        /// Gets or Sets MagnetUrl
        /// </summary>
        [DataMember(Name = "magnetUrl", EmitDefaultValue = true)]
        public string MagnetUrl { get; set; }

        /// <summary>
        /// Gets or Sets InfoHash
        /// </summary>
        [DataMember(Name = "infoHash", EmitDefaultValue = true)]
        public string InfoHash { get; set; }

        /// <summary>
        /// Gets or Sets Seeders
        /// </summary>
        [DataMember(Name = "seeders", EmitDefaultValue = true)]
        public int? Seeders { get; set; }

        /// <summary>
        /// Gets or Sets Leechers
        /// </summary>
        [DataMember(Name = "leechers", EmitDefaultValue = true)]
        public int? Leechers { get; set; }

        /// <summary>
        /// Gets or Sets IsDaily
        /// </summary>
        [DataMember(Name = "isDaily", EmitDefaultValue = true)]
        public bool IsDaily { get; set; }

        /// <summary>
        /// Gets or Sets IsAbsoluteNumbering
        /// </summary>
        [DataMember(Name = "isAbsoluteNumbering", EmitDefaultValue = true)]
        public bool IsAbsoluteNumbering { get; set; }

        /// <summary>
        /// Gets or Sets IsPossibleSpecialEpisode
        /// </summary>
        [DataMember(Name = "isPossibleSpecialEpisode", EmitDefaultValue = true)]
        public bool IsPossibleSpecialEpisode { get; set; }

        /// <summary>
        /// Gets or Sets Special
        /// </summary>
        [DataMember(Name = "special", EmitDefaultValue = true)]
        public bool Special { get; set; }

        /// <summary>
        /// Gets or Sets SeriesId
        /// </summary>
        [DataMember(Name = "seriesId", EmitDefaultValue = true)]
        public int? SeriesId { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeId
        /// </summary>
        [DataMember(Name = "episodeId", EmitDefaultValue = true)]
        public int? EpisodeId { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeIds
        /// </summary>
        [DataMember(Name = "episodeIds", EmitDefaultValue = true)]
        public List<int> EpisodeIds { get; set; }

        /// <summary>
        /// Gets or Sets DownloadClientId
        /// </summary>
        [DataMember(Name = "downloadClientId", EmitDefaultValue = true)]
        public int? DownloadClientId { get; set; }

        /// <summary>
        /// Gets or Sets ShouldOverride
        /// </summary>
        [DataMember(Name = "shouldOverride", EmitDefaultValue = true)]
        public bool? ShouldOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  QualityWeight: ").Append(QualityWeight).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  AgeHours: ").Append(AgeHours).Append("\n");
            sb.Append("  AgeMinutes: ").Append(AgeMinutes).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  IndexerId: ").Append(IndexerId).Append("\n");
            sb.Append("  Indexer: ").Append(Indexer).Append("\n");
            sb.Append("  ReleaseGroup: ").Append(ReleaseGroup).Append("\n");
            sb.Append("  SubGroup: ").Append(SubGroup).Append("\n");
            sb.Append("  ReleaseHash: ").Append(ReleaseHash).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FullSeason: ").Append(FullSeason).Append("\n");
            sb.Append("  SceneSource: ").Append(SceneSource).Append("\n");
            sb.Append("  SeasonNumber: ").Append(SeasonNumber).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LanguageWeight: ").Append(LanguageWeight).Append("\n");
            sb.Append("  AirDate: ").Append(AirDate).Append("\n");
            sb.Append("  SeriesTitle: ").Append(SeriesTitle).Append("\n");
            sb.Append("  EpisodeNumbers: ").Append(EpisodeNumbers).Append("\n");
            sb.Append("  AbsoluteEpisodeNumbers: ").Append(AbsoluteEpisodeNumbers).Append("\n");
            sb.Append("  MappedSeasonNumber: ").Append(MappedSeasonNumber).Append("\n");
            sb.Append("  MappedEpisodeNumbers: ").Append(MappedEpisodeNumbers).Append("\n");
            sb.Append("  MappedAbsoluteEpisodeNumbers: ").Append(MappedAbsoluteEpisodeNumbers).Append("\n");
            sb.Append("  MappedSeriesId: ").Append(MappedSeriesId).Append("\n");
            sb.Append("  MappedEpisodeInfo: ").Append(MappedEpisodeInfo).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  TemporarilyRejected: ").Append(TemporarilyRejected).Append("\n");
            sb.Append("  Rejected: ").Append(Rejected).Append("\n");
            sb.Append("  TvdbId: ").Append(TvdbId).Append("\n");
            sb.Append("  TvRageId: ").Append(TvRageId).Append("\n");
            sb.Append("  Rejections: ").Append(Rejections).Append("\n");
            sb.Append("  PublishDate: ").Append(PublishDate).Append("\n");
            sb.Append("  CommentUrl: ").Append(CommentUrl).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  InfoUrl: ").Append(InfoUrl).Append("\n");
            sb.Append("  EpisodeRequested: ").Append(EpisodeRequested).Append("\n");
            sb.Append("  DownloadAllowed: ").Append(DownloadAllowed).Append("\n");
            sb.Append("  ReleaseWeight: ").Append(ReleaseWeight).Append("\n");
            sb.Append("  CustomFormats: ").Append(CustomFormats).Append("\n");
            sb.Append("  CustomFormatScore: ").Append(CustomFormatScore).Append("\n");
            sb.Append("  SceneMapping: ").Append(SceneMapping).Append("\n");
            sb.Append("  MagnetUrl: ").Append(MagnetUrl).Append("\n");
            sb.Append("  InfoHash: ").Append(InfoHash).Append("\n");
            sb.Append("  Seeders: ").Append(Seeders).Append("\n");
            sb.Append("  Leechers: ").Append(Leechers).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  IsDaily: ").Append(IsDaily).Append("\n");
            sb.Append("  IsAbsoluteNumbering: ").Append(IsAbsoluteNumbering).Append("\n");
            sb.Append("  IsPossibleSpecialEpisode: ").Append(IsPossibleSpecialEpisode).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  EpisodeId: ").Append(EpisodeId).Append("\n");
            sb.Append("  EpisodeIds: ").Append(EpisodeIds).Append("\n");
            sb.Append("  DownloadClientId: ").Append(DownloadClientId).Append("\n");
            sb.Append("  ShouldOverride: ").Append(ShouldOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseResource);
        }

        /// <summary>
        /// Returns true if ReleaseResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.QualityWeight == input.QualityWeight ||
                    this.QualityWeight.Equals(input.QualityWeight)
                ) && 
                (
                    this.Age == input.Age ||
                    this.Age.Equals(input.Age)
                ) && 
                (
                    this.AgeHours == input.AgeHours ||
                    this.AgeHours.Equals(input.AgeHours)
                ) && 
                (
                    this.AgeMinutes == input.AgeMinutes ||
                    this.AgeMinutes.Equals(input.AgeMinutes)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.IndexerId == input.IndexerId ||
                    this.IndexerId.Equals(input.IndexerId)
                ) && 
                (
                    this.Indexer == input.Indexer ||
                    (this.Indexer != null &&
                    this.Indexer.Equals(input.Indexer))
                ) && 
                (
                    this.ReleaseGroup == input.ReleaseGroup ||
                    (this.ReleaseGroup != null &&
                    this.ReleaseGroup.Equals(input.ReleaseGroup))
                ) && 
                (
                    this.SubGroup == input.SubGroup ||
                    (this.SubGroup != null &&
                    this.SubGroup.Equals(input.SubGroup))
                ) && 
                (
                    this.ReleaseHash == input.ReleaseHash ||
                    (this.ReleaseHash != null &&
                    this.ReleaseHash.Equals(input.ReleaseHash))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FullSeason == input.FullSeason ||
                    this.FullSeason.Equals(input.FullSeason)
                ) && 
                (
                    this.SceneSource == input.SceneSource ||
                    this.SceneSource.Equals(input.SceneSource)
                ) && 
                (
                    this.SeasonNumber == input.SeasonNumber ||
                    this.SeasonNumber.Equals(input.SeasonNumber)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LanguageWeight == input.LanguageWeight ||
                    this.LanguageWeight.Equals(input.LanguageWeight)
                ) && 
                (
                    this.AirDate == input.AirDate ||
                    (this.AirDate != null &&
                    this.AirDate.Equals(input.AirDate))
                ) && 
                (
                    this.SeriesTitle == input.SeriesTitle ||
                    (this.SeriesTitle != null &&
                    this.SeriesTitle.Equals(input.SeriesTitle))
                ) && 
                (
                    this.EpisodeNumbers == input.EpisodeNumbers ||
                    this.EpisodeNumbers != null &&
                    input.EpisodeNumbers != null &&
                    this.EpisodeNumbers.SequenceEqual(input.EpisodeNumbers)
                ) && 
                (
                    this.AbsoluteEpisodeNumbers == input.AbsoluteEpisodeNumbers ||
                    this.AbsoluteEpisodeNumbers != null &&
                    input.AbsoluteEpisodeNumbers != null &&
                    this.AbsoluteEpisodeNumbers.SequenceEqual(input.AbsoluteEpisodeNumbers)
                ) && 
                (
                    this.MappedSeasonNumber == input.MappedSeasonNumber ||
                    (this.MappedSeasonNumber != null &&
                    this.MappedSeasonNumber.Equals(input.MappedSeasonNumber))
                ) && 
                (
                    this.MappedEpisodeNumbers == input.MappedEpisodeNumbers ||
                    this.MappedEpisodeNumbers != null &&
                    input.MappedEpisodeNumbers != null &&
                    this.MappedEpisodeNumbers.SequenceEqual(input.MappedEpisodeNumbers)
                ) && 
                (
                    this.MappedAbsoluteEpisodeNumbers == input.MappedAbsoluteEpisodeNumbers ||
                    this.MappedAbsoluteEpisodeNumbers != null &&
                    input.MappedAbsoluteEpisodeNumbers != null &&
                    this.MappedAbsoluteEpisodeNumbers.SequenceEqual(input.MappedAbsoluteEpisodeNumbers)
                ) && 
                (
                    this.MappedSeriesId == input.MappedSeriesId ||
                    (this.MappedSeriesId != null &&
                    this.MappedSeriesId.Equals(input.MappedSeriesId))
                ) && 
                (
                    this.MappedEpisodeInfo == input.MappedEpisodeInfo ||
                    this.MappedEpisodeInfo != null &&
                    input.MappedEpisodeInfo != null &&
                    this.MappedEpisodeInfo.SequenceEqual(input.MappedEpisodeInfo)
                ) && 
                (
                    this.Approved == input.Approved ||
                    this.Approved.Equals(input.Approved)
                ) && 
                (
                    this.TemporarilyRejected == input.TemporarilyRejected ||
                    this.TemporarilyRejected.Equals(input.TemporarilyRejected)
                ) && 
                (
                    this.Rejected == input.Rejected ||
                    this.Rejected.Equals(input.Rejected)
                ) && 
                (
                    this.TvdbId == input.TvdbId ||
                    this.TvdbId.Equals(input.TvdbId)
                ) && 
                (
                    this.TvRageId == input.TvRageId ||
                    this.TvRageId.Equals(input.TvRageId)
                ) && 
                (
                    this.Rejections == input.Rejections ||
                    this.Rejections != null &&
                    input.Rejections != null &&
                    this.Rejections.SequenceEqual(input.Rejections)
                ) && 
                (
                    this.PublishDate == input.PublishDate ||
                    (this.PublishDate != null &&
                    this.PublishDate.Equals(input.PublishDate))
                ) && 
                (
                    this.CommentUrl == input.CommentUrl ||
                    (this.CommentUrl != null &&
                    this.CommentUrl.Equals(input.CommentUrl))
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) && 
                (
                    this.InfoUrl == input.InfoUrl ||
                    (this.InfoUrl != null &&
                    this.InfoUrl.Equals(input.InfoUrl))
                ) && 
                (
                    this.EpisodeRequested == input.EpisodeRequested ||
                    this.EpisodeRequested.Equals(input.EpisodeRequested)
                ) && 
                (
                    this.DownloadAllowed == input.DownloadAllowed ||
                    this.DownloadAllowed.Equals(input.DownloadAllowed)
                ) && 
                (
                    this.ReleaseWeight == input.ReleaseWeight ||
                    this.ReleaseWeight.Equals(input.ReleaseWeight)
                ) && 
                (
                    this.CustomFormats == input.CustomFormats ||
                    this.CustomFormats != null &&
                    input.CustomFormats != null &&
                    this.CustomFormats.SequenceEqual(input.CustomFormats)
                ) && 
                (
                    this.CustomFormatScore == input.CustomFormatScore ||
                    this.CustomFormatScore.Equals(input.CustomFormatScore)
                ) && 
                (
                    this.SceneMapping == input.SceneMapping ||
                    (this.SceneMapping != null &&
                    this.SceneMapping.Equals(input.SceneMapping))
                ) && 
                (
                    this.MagnetUrl == input.MagnetUrl ||
                    (this.MagnetUrl != null &&
                    this.MagnetUrl.Equals(input.MagnetUrl))
                ) && 
                (
                    this.InfoHash == input.InfoHash ||
                    (this.InfoHash != null &&
                    this.InfoHash.Equals(input.InfoHash))
                ) && 
                (
                    this.Seeders == input.Seeders ||
                    (this.Seeders != null &&
                    this.Seeders.Equals(input.Seeders))
                ) && 
                (
                    this.Leechers == input.Leechers ||
                    (this.Leechers != null &&
                    this.Leechers.Equals(input.Leechers))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    this.Protocol.Equals(input.Protocol)
                ) && 
                (
                    this.IsDaily == input.IsDaily ||
                    this.IsDaily.Equals(input.IsDaily)
                ) && 
                (
                    this.IsAbsoluteNumbering == input.IsAbsoluteNumbering ||
                    this.IsAbsoluteNumbering.Equals(input.IsAbsoluteNumbering)
                ) && 
                (
                    this.IsPossibleSpecialEpisode == input.IsPossibleSpecialEpisode ||
                    this.IsPossibleSpecialEpisode.Equals(input.IsPossibleSpecialEpisode)
                ) && 
                (
                    this.Special == input.Special ||
                    this.Special.Equals(input.Special)
                ) && 
                (
                    this.SeriesId == input.SeriesId ||
                    (this.SeriesId != null &&
                    this.SeriesId.Equals(input.SeriesId))
                ) && 
                (
                    this.EpisodeId == input.EpisodeId ||
                    (this.EpisodeId != null &&
                    this.EpisodeId.Equals(input.EpisodeId))
                ) && 
                (
                    this.EpisodeIds == input.EpisodeIds ||
                    this.EpisodeIds != null &&
                    input.EpisodeIds != null &&
                    this.EpisodeIds.SequenceEqual(input.EpisodeIds)
                ) && 
                (
                    this.DownloadClientId == input.DownloadClientId ||
                    (this.DownloadClientId != null &&
                    this.DownloadClientId.Equals(input.DownloadClientId))
                ) && 
                (
                    this.ShouldOverride == input.ShouldOverride ||
                    (this.ShouldOverride != null &&
                    this.ShouldOverride.Equals(input.ShouldOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                hashCode = hashCode * 59 + this.QualityWeight.GetHashCode();
                hashCode = hashCode * 59 + this.Age.GetHashCode();
                hashCode = hashCode * 59 + this.AgeHours.GetHashCode();
                hashCode = hashCode * 59 + this.AgeMinutes.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                hashCode = hashCode * 59 + this.IndexerId.GetHashCode();
                if (this.Indexer != null)
                    hashCode = hashCode * 59 + this.Indexer.GetHashCode();
                if (this.ReleaseGroup != null)
                    hashCode = hashCode * 59 + this.ReleaseGroup.GetHashCode();
                if (this.SubGroup != null)
                    hashCode = hashCode * 59 + this.SubGroup.GetHashCode();
                if (this.ReleaseHash != null)
                    hashCode = hashCode * 59 + this.ReleaseHash.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                hashCode = hashCode * 59 + this.FullSeason.GetHashCode();
                hashCode = hashCode * 59 + this.SceneSource.GetHashCode();
                hashCode = hashCode * 59 + this.SeasonNumber.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                hashCode = hashCode * 59 + this.LanguageWeight.GetHashCode();
                if (this.AirDate != null)
                    hashCode = hashCode * 59 + this.AirDate.GetHashCode();
                if (this.SeriesTitle != null)
                    hashCode = hashCode * 59 + this.SeriesTitle.GetHashCode();
                if (this.EpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.EpisodeNumbers.GetHashCode();
                if (this.AbsoluteEpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.AbsoluteEpisodeNumbers.GetHashCode();
                if (this.MappedSeasonNumber != null)
                    hashCode = hashCode * 59 + this.MappedSeasonNumber.GetHashCode();
                if (this.MappedEpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.MappedEpisodeNumbers.GetHashCode();
                if (this.MappedAbsoluteEpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.MappedAbsoluteEpisodeNumbers.GetHashCode();
                if (this.MappedSeriesId != null)
                    hashCode = hashCode * 59 + this.MappedSeriesId.GetHashCode();
                if (this.MappedEpisodeInfo != null)
                    hashCode = hashCode * 59 + this.MappedEpisodeInfo.GetHashCode();
                hashCode = hashCode * 59 + this.Approved.GetHashCode();
                hashCode = hashCode * 59 + this.TemporarilyRejected.GetHashCode();
                hashCode = hashCode * 59 + this.Rejected.GetHashCode();
                hashCode = hashCode * 59 + this.TvdbId.GetHashCode();
                hashCode = hashCode * 59 + this.TvRageId.GetHashCode();
                if (this.Rejections != null)
                    hashCode = hashCode * 59 + this.Rejections.GetHashCode();
                if (this.PublishDate != null)
                    hashCode = hashCode * 59 + this.PublishDate.GetHashCode();
                if (this.CommentUrl != null)
                    hashCode = hashCode * 59 + this.CommentUrl.GetHashCode();
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                if (this.InfoUrl != null)
                    hashCode = hashCode * 59 + this.InfoUrl.GetHashCode();
                hashCode = hashCode * 59 + this.EpisodeRequested.GetHashCode();
                hashCode = hashCode * 59 + this.DownloadAllowed.GetHashCode();
                hashCode = hashCode * 59 + this.ReleaseWeight.GetHashCode();
                if (this.CustomFormats != null)
                    hashCode = hashCode * 59 + this.CustomFormats.GetHashCode();
                hashCode = hashCode * 59 + this.CustomFormatScore.GetHashCode();
                if (this.SceneMapping != null)
                    hashCode = hashCode * 59 + this.SceneMapping.GetHashCode();
                if (this.MagnetUrl != null)
                    hashCode = hashCode * 59 + this.MagnetUrl.GetHashCode();
                if (this.InfoHash != null)
                    hashCode = hashCode * 59 + this.InfoHash.GetHashCode();
                if (this.Seeders != null)
                    hashCode = hashCode * 59 + this.Seeders.GetHashCode();
                if (this.Leechers != null)
                    hashCode = hashCode * 59 + this.Leechers.GetHashCode();
                hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                hashCode = hashCode * 59 + this.IsDaily.GetHashCode();
                hashCode = hashCode * 59 + this.IsAbsoluteNumbering.GetHashCode();
                hashCode = hashCode * 59 + this.IsPossibleSpecialEpisode.GetHashCode();
                hashCode = hashCode * 59 + this.Special.GetHashCode();
                if (this.SeriesId != null)
                    hashCode = hashCode * 59 + this.SeriesId.GetHashCode();
                if (this.EpisodeId != null)
                    hashCode = hashCode * 59 + this.EpisodeId.GetHashCode();
                if (this.EpisodeIds != null)
                    hashCode = hashCode * 59 + this.EpisodeIds.GetHashCode();
                if (this.DownloadClientId != null)
                    hashCode = hashCode * 59 + this.DownloadClientId.GetHashCode();
                if (this.ShouldOverride != null)
                    hashCode = hashCode * 59 + this.ShouldOverride.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
