/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// QueueStatusResource
    /// </summary>
    [DataContract(Name = "QueueStatusResource")]
    public partial class QueueStatusResource : IEquatable<QueueStatusResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueStatusResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="totalCount">totalCount.</param>
        /// <param name="count">count.</param>
        /// <param name="unknownCount">unknownCount.</param>
        /// <param name="errors">errors.</param>
        /// <param name="warnings">warnings.</param>
        /// <param name="unknownErrors">unknownErrors.</param>
        /// <param name="unknownWarnings">unknownWarnings.</param>
        public QueueStatusResource(int id = default(int), int totalCount = default(int), int count = default(int), int unknownCount = default(int), bool errors = default(bool), bool warnings = default(bool), bool unknownErrors = default(bool), bool unknownWarnings = default(bool))
        {
            this.Id = id;
            this.TotalCount = totalCount;
            this.Count = count;
            this.UnknownCount = unknownCount;
            this.Errors = errors;
            this.Warnings = warnings;
            this.UnknownErrors = unknownErrors;
            this.UnknownWarnings = unknownWarnings;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets UnknownCount
        /// </summary>
        [DataMember(Name = "unknownCount", EmitDefaultValue = false)]
        public int UnknownCount { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public bool Errors { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = true)]
        public bool Warnings { get; set; }

        /// <summary>
        /// Gets or Sets UnknownErrors
        /// </summary>
        [DataMember(Name = "unknownErrors", EmitDefaultValue = true)]
        public bool UnknownErrors { get; set; }

        /// <summary>
        /// Gets or Sets UnknownWarnings
        /// </summary>
        [DataMember(Name = "unknownWarnings", EmitDefaultValue = true)]
        public bool UnknownWarnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueStatusResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  UnknownCount: ").Append(UnknownCount).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  UnknownErrors: ").Append(UnknownErrors).Append("\n");
            sb.Append("  UnknownWarnings: ").Append(UnknownWarnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueStatusResource);
        }

        /// <summary>
        /// Returns true if QueueStatusResource instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueStatusResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueStatusResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.UnknownCount == input.UnknownCount ||
                    this.UnknownCount.Equals(input.UnknownCount)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors.Equals(input.Errors)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings.Equals(input.Warnings)
                ) && 
                (
                    this.UnknownErrors == input.UnknownErrors ||
                    this.UnknownErrors.Equals(input.UnknownErrors)
                ) && 
                (
                    this.UnknownWarnings == input.UnknownWarnings ||
                    this.UnknownWarnings.Equals(input.UnknownWarnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                hashCode = hashCode * 59 + this.UnknownCount.GetHashCode();
                hashCode = hashCode * 59 + this.Errors.GetHashCode();
                hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                hashCode = hashCode * 59 + this.UnknownErrors.GetHashCode();
                hashCode = hashCode * 59 + this.UnknownWarnings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
