/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// SeriesEditorResource
    /// </summary>
    [DataContract(Name = "SeriesEditorResource")]
    public partial class SeriesEditorResource : IEquatable<SeriesEditorResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SeriesType
        /// </summary>
        [DataMember(Name = "seriesType", EmitDefaultValue = false)]
        public SeriesTypes? SeriesType { get; set; }

        /// <summary>
        /// Gets or Sets ApplyTags
        /// </summary>
        [DataMember(Name = "applyTags", EmitDefaultValue = false)]
        public ApplyTags? ApplyTags { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesEditorResource" /> class.
        /// </summary>
        /// <param name="seriesIds">seriesIds.</param>
        /// <param name="monitored">monitored.</param>
        /// <param name="qualityProfileId">qualityProfileId.</param>
        /// <param name="seriesType">seriesType.</param>
        /// <param name="seasonFolder">seasonFolder.</param>
        /// <param name="rootFolderPath">rootFolderPath.</param>
        /// <param name="tags">tags.</param>
        /// <param name="applyTags">applyTags.</param>
        /// <param name="moveFiles">moveFiles.</param>
        /// <param name="deleteFiles">deleteFiles.</param>
        /// <param name="addImportListExclusion">addImportListExclusion.</param>
        public SeriesEditorResource(List<int> seriesIds = default(List<int>), bool? monitored = default(bool?), int? qualityProfileId = default(int?), SeriesTypes? seriesType = default(SeriesTypes?), bool? seasonFolder = default(bool?), string rootFolderPath = default(string), List<int> tags = default(List<int>), ApplyTags? applyTags = default(ApplyTags?), bool moveFiles = default(bool), bool deleteFiles = default(bool), bool addImportListExclusion = default(bool))
        {
            this.SeriesIds = seriesIds;
            this.Monitored = monitored;
            this.QualityProfileId = qualityProfileId;
            this.SeriesType = seriesType;
            this.SeasonFolder = seasonFolder;
            this.RootFolderPath = rootFolderPath;
            this.Tags = tags;
            this.ApplyTags = applyTags;
            this.MoveFiles = moveFiles;
            this.DeleteFiles = deleteFiles;
            this.AddImportListExclusion = addImportListExclusion;
        }

        /// <summary>
        /// Gets or Sets SeriesIds
        /// </summary>
        [DataMember(Name = "seriesIds", EmitDefaultValue = true)]
        public List<int> SeriesIds { get; set; }

        /// <summary>
        /// Gets or Sets Monitored
        /// </summary>
        [DataMember(Name = "monitored", EmitDefaultValue = true)]
        public bool? Monitored { get; set; }

        /// <summary>
        /// Gets or Sets QualityProfileId
        /// </summary>
        [DataMember(Name = "qualityProfileId", EmitDefaultValue = true)]
        public int? QualityProfileId { get; set; }

        /// <summary>
        /// Gets or Sets SeasonFolder
        /// </summary>
        [DataMember(Name = "seasonFolder", EmitDefaultValue = true)]
        public bool? SeasonFolder { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderPath
        /// </summary>
        [DataMember(Name = "rootFolderPath", EmitDefaultValue = true)]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets MoveFiles
        /// </summary>
        [DataMember(Name = "moveFiles", EmitDefaultValue = true)]
        public bool MoveFiles { get; set; }

        /// <summary>
        /// Gets or Sets DeleteFiles
        /// </summary>
        [DataMember(Name = "deleteFiles", EmitDefaultValue = true)]
        public bool DeleteFiles { get; set; }

        /// <summary>
        /// Gets or Sets AddImportListExclusion
        /// </summary>
        [DataMember(Name = "addImportListExclusion", EmitDefaultValue = true)]
        public bool AddImportListExclusion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeriesEditorResource {\n");
            sb.Append("  SeriesIds: ").Append(SeriesIds).Append("\n");
            sb.Append("  Monitored: ").Append(Monitored).Append("\n");
            sb.Append("  QualityProfileId: ").Append(QualityProfileId).Append("\n");
            sb.Append("  SeriesType: ").Append(SeriesType).Append("\n");
            sb.Append("  SeasonFolder: ").Append(SeasonFolder).Append("\n");
            sb.Append("  RootFolderPath: ").Append(RootFolderPath).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ApplyTags: ").Append(ApplyTags).Append("\n");
            sb.Append("  MoveFiles: ").Append(MoveFiles).Append("\n");
            sb.Append("  DeleteFiles: ").Append(DeleteFiles).Append("\n");
            sb.Append("  AddImportListExclusion: ").Append(AddImportListExclusion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeriesEditorResource);
        }

        /// <summary>
        /// Returns true if SeriesEditorResource instances are equal
        /// </summary>
        /// <param name="input">Instance of SeriesEditorResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeriesEditorResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SeriesIds == input.SeriesIds ||
                    this.SeriesIds != null &&
                    input.SeriesIds != null &&
                    this.SeriesIds.SequenceEqual(input.SeriesIds)
                ) && 
                (
                    this.Monitored == input.Monitored ||
                    (this.Monitored != null &&
                    this.Monitored.Equals(input.Monitored))
                ) && 
                (
                    this.QualityProfileId == input.QualityProfileId ||
                    (this.QualityProfileId != null &&
                    this.QualityProfileId.Equals(input.QualityProfileId))
                ) && 
                (
                    this.SeriesType == input.SeriesType ||
                    this.SeriesType.Equals(input.SeriesType)
                ) && 
                (
                    this.SeasonFolder == input.SeasonFolder ||
                    (this.SeasonFolder != null &&
                    this.SeasonFolder.Equals(input.SeasonFolder))
                ) && 
                (
                    this.RootFolderPath == input.RootFolderPath ||
                    (this.RootFolderPath != null &&
                    this.RootFolderPath.Equals(input.RootFolderPath))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ApplyTags == input.ApplyTags ||
                    this.ApplyTags.Equals(input.ApplyTags)
                ) && 
                (
                    this.MoveFiles == input.MoveFiles ||
                    this.MoveFiles.Equals(input.MoveFiles)
                ) && 
                (
                    this.DeleteFiles == input.DeleteFiles ||
                    this.DeleteFiles.Equals(input.DeleteFiles)
                ) && 
                (
                    this.AddImportListExclusion == input.AddImportListExclusion ||
                    this.AddImportListExclusion.Equals(input.AddImportListExclusion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SeriesIds != null)
                    hashCode = hashCode * 59 + this.SeriesIds.GetHashCode();
                if (this.Monitored != null)
                    hashCode = hashCode * 59 + this.Monitored.GetHashCode();
                if (this.QualityProfileId != null)
                    hashCode = hashCode * 59 + this.QualityProfileId.GetHashCode();
                hashCode = hashCode * 59 + this.SeriesType.GetHashCode();
                if (this.SeasonFolder != null)
                    hashCode = hashCode * 59 + this.SeasonFolder.GetHashCode();
                if (this.RootFolderPath != null)
                    hashCode = hashCode * 59 + this.RootFolderPath.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                hashCode = hashCode * 59 + this.ApplyTags.GetHashCode();
                hashCode = hashCode * 59 + this.MoveFiles.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteFiles.GetHashCode();
                hashCode = hashCode * 59 + this.AddImportListExclusion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
