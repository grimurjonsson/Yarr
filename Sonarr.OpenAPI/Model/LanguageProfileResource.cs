/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// LanguageProfileResource
    /// </summary>
    [DataContract(Name = "LanguageProfileResource")]
    public partial class LanguageProfileResource : IEquatable<LanguageProfileResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageProfileResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="upgradeAllowed">upgradeAllowed.</param>
        /// <param name="cutoff">cutoff.</param>
        /// <param name="languages">languages.</param>
        public LanguageProfileResource(int id = default(int), string name = default(string), bool upgradeAllowed = default(bool), Language cutoff = default(Language), List<LanguageProfileItemResource> languages = default(List<LanguageProfileItemResource>))
        {
            this.Id = id;
            this.Name = name;
            this.UpgradeAllowed = upgradeAllowed;
            this.Cutoff = cutoff;
            this.Languages = languages;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeAllowed
        /// </summary>
        [DataMember(Name = "upgradeAllowed", EmitDefaultValue = true)]
        public bool UpgradeAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Cutoff
        /// </summary>
        [DataMember(Name = "cutoff", EmitDefaultValue = false)]
        public Language Cutoff { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<LanguageProfileItemResource> Languages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LanguageProfileResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpgradeAllowed: ").Append(UpgradeAllowed).Append("\n");
            sb.Append("  Cutoff: ").Append(Cutoff).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LanguageProfileResource);
        }

        /// <summary>
        /// Returns true if LanguageProfileResource instances are equal
        /// </summary>
        /// <param name="input">Instance of LanguageProfileResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LanguageProfileResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UpgradeAllowed == input.UpgradeAllowed ||
                    this.UpgradeAllowed.Equals(input.UpgradeAllowed)
                ) && 
                (
                    this.Cutoff == input.Cutoff ||
                    (this.Cutoff != null &&
                    this.Cutoff.Equals(input.Cutoff))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.UpgradeAllowed.GetHashCode();
                if (this.Cutoff != null)
                    hashCode = hashCode * 59 + this.Cutoff.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
