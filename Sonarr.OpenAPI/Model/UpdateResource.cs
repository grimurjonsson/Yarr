/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// UpdateResource
    /// </summary>
    [DataContract(Name = "UpdateResource")]
    public partial class UpdateResource : IEquatable<UpdateResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="version">version.</param>
        /// <param name="branch">branch.</param>
        /// <param name="releaseDate">releaseDate.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="url">url.</param>
        /// <param name="installed">installed.</param>
        /// <param name="installedOn">installedOn.</param>
        /// <param name="installable">installable.</param>
        /// <param name="latest">latest.</param>
        /// <param name="changes">changes.</param>
        /// <param name="hash">hash.</param>
        public UpdateResource(int id = default(int), ModelVersion version = default(ModelVersion), string branch = default(string), DateTime releaseDate = default(DateTime), string fileName = default(string), string url = default(string), bool installed = default(bool), DateTime? installedOn = default(DateTime?), bool installable = default(bool), bool latest = default(bool), UpdateChanges changes = default(UpdateChanges), string hash = default(string))
        {
            this.Id = id;
            this._Version = version;
            this.Branch = branch;
            this.ReleaseDate = releaseDate;
            this.FileName = fileName;
            this.Url = url;
            this.Installed = installed;
            this.InstalledOn = installedOn;
            this.Installable = installable;
            this.Latest = latest;
            this.Changes = changes;
            this.Hash = hash;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion _Version { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        public DateTime ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name = "fileName", EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Installed
        /// </summary>
        [DataMember(Name = "installed", EmitDefaultValue = true)]
        public bool Installed { get; set; }

        /// <summary>
        /// Gets or Sets InstalledOn
        /// </summary>
        [DataMember(Name = "installedOn", EmitDefaultValue = true)]
        public DateTime? InstalledOn { get; set; }

        /// <summary>
        /// Gets or Sets Installable
        /// </summary>
        [DataMember(Name = "installable", EmitDefaultValue = true)]
        public bool Installable { get; set; }

        /// <summary>
        /// Gets or Sets Latest
        /// </summary>
        [DataMember(Name = "latest", EmitDefaultValue = true)]
        public bool Latest { get; set; }

        /// <summary>
        /// Gets or Sets Changes
        /// </summary>
        [DataMember(Name = "changes", EmitDefaultValue = false)]
        public UpdateChanges Changes { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name = "hash", EmitDefaultValue = true)]
        public string Hash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Installed: ").Append(Installed).Append("\n");
            sb.Append("  InstalledOn: ").Append(InstalledOn).Append("\n");
            sb.Append("  Installable: ").Append(Installable).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateResource);
        }

        /// <summary>
        /// Returns true if UpdateResource instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Installed == input.Installed ||
                    this.Installed.Equals(input.Installed)
                ) && 
                (
                    this.InstalledOn == input.InstalledOn ||
                    (this.InstalledOn != null &&
                    this.InstalledOn.Equals(input.InstalledOn))
                ) && 
                (
                    this.Installable == input.Installable ||
                    this.Installable.Equals(input.Installable)
                ) && 
                (
                    this.Latest == input.Latest ||
                    this.Latest.Equals(input.Latest)
                ) && 
                (
                    this.Changes == input.Changes ||
                    (this.Changes != null &&
                    this.Changes.Equals(input.Changes))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                hashCode = hashCode * 59 + this.Installed.GetHashCode();
                if (this.InstalledOn != null)
                    hashCode = hashCode * 59 + this.InstalledOn.GetHashCode();
                hashCode = hashCode * 59 + this.Installable.GetHashCode();
                hashCode = hashCode * 59 + this.Latest.GetHashCode();
                if (this.Changes != null)
                    hashCode = hashCode * 59 + this.Changes.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
