/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// SeasonPassResource
    /// </summary>
    [DataContract(Name = "SeasonPassResource")]
    public partial class SeasonPassResource : IEquatable<SeasonPassResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeasonPassResource" /> class.
        /// </summary>
        /// <param name="series">series.</param>
        /// <param name="monitoringOptions">monitoringOptions.</param>
        public SeasonPassResource(List<SeasonPassSeriesResource> series = default(List<SeasonPassSeriesResource>), MonitoringOptions monitoringOptions = default(MonitoringOptions))
        {
            this.Series = series;
            this.MonitoringOptions = monitoringOptions;
        }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name = "series", EmitDefaultValue = true)]
        public List<SeasonPassSeriesResource> Series { get; set; }

        /// <summary>
        /// Gets or Sets MonitoringOptions
        /// </summary>
        [DataMember(Name = "monitoringOptions", EmitDefaultValue = false)]
        public MonitoringOptions MonitoringOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeasonPassResource {\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  MonitoringOptions: ").Append(MonitoringOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeasonPassResource);
        }

        /// <summary>
        /// Returns true if SeasonPassResource instances are equal
        /// </summary>
        /// <param name="input">Instance of SeasonPassResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeasonPassResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Series == input.Series ||
                    this.Series != null &&
                    input.Series != null &&
                    this.Series.SequenceEqual(input.Series)
                ) && 
                (
                    this.MonitoringOptions == input.MonitoringOptions ||
                    (this.MonitoringOptions != null &&
                    this.MonitoringOptions.Equals(input.MonitoringOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                if (this.MonitoringOptions != null)
                    hashCode = hashCode * 59 + this.MonitoringOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
