/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// ParsedEpisodeInfo
    /// </summary>
    [DataContract(Name = "ParsedEpisodeInfo")]
    public partial class ParsedEpisodeInfo : IEquatable<ParsedEpisodeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParsedEpisodeInfo" /> class.
        /// </summary>
        /// <param name="releaseTitle">releaseTitle.</param>
        /// <param name="seriesTitle">seriesTitle.</param>
        /// <param name="seriesTitleInfo">seriesTitleInfo.</param>
        /// <param name="quality">quality.</param>
        /// <param name="seasonNumber">seasonNumber.</param>
        /// <param name="episodeNumbers">episodeNumbers.</param>
        /// <param name="absoluteEpisodeNumbers">absoluteEpisodeNumbers.</param>
        /// <param name="specialAbsoluteEpisodeNumbers">specialAbsoluteEpisodeNumbers.</param>
        /// <param name="airDate">airDate.</param>
        /// <param name="languages">languages.</param>
        /// <param name="fullSeason">fullSeason.</param>
        /// <param name="isPartialSeason">isPartialSeason.</param>
        /// <param name="isMultiSeason">isMultiSeason.</param>
        /// <param name="isSeasonExtra">isSeasonExtra.</param>
        /// <param name="special">special.</param>
        /// <param name="releaseGroup">releaseGroup.</param>
        /// <param name="releaseHash">releaseHash.</param>
        /// <param name="seasonPart">seasonPart.</param>
        /// <param name="releaseTokens">releaseTokens.</param>
        /// <param name="dailyPart">dailyPart.</param>
        public ParsedEpisodeInfo(string releaseTitle = default(string), string seriesTitle = default(string), SeriesTitleInfo seriesTitleInfo = default(SeriesTitleInfo), QualityModel quality = default(QualityModel), int seasonNumber = default(int), List<int> episodeNumbers = default(List<int>), List<int> absoluteEpisodeNumbers = default(List<int>), List<double> specialAbsoluteEpisodeNumbers = default(List<double>), string airDate = default(string), List<Language> languages = default(List<Language>), bool fullSeason = default(bool), bool isPartialSeason = default(bool), bool isMultiSeason = default(bool), bool isSeasonExtra = default(bool), bool special = default(bool), string releaseGroup = default(string), string releaseHash = default(string), int seasonPart = default(int), string releaseTokens = default(string), int? dailyPart = default(int?))
        {
            this.ReleaseTitle = releaseTitle;
            this.SeriesTitle = seriesTitle;
            this.SeriesTitleInfo = seriesTitleInfo;
            this.Quality = quality;
            this.SeasonNumber = seasonNumber;
            this.EpisodeNumbers = episodeNumbers;
            this.AbsoluteEpisodeNumbers = absoluteEpisodeNumbers;
            this.SpecialAbsoluteEpisodeNumbers = specialAbsoluteEpisodeNumbers;
            this.AirDate = airDate;
            this.Languages = languages;
            this.FullSeason = fullSeason;
            this.IsPartialSeason = isPartialSeason;
            this.IsMultiSeason = isMultiSeason;
            this.IsSeasonExtra = isSeasonExtra;
            this.Special = special;
            this.ReleaseGroup = releaseGroup;
            this.ReleaseHash = releaseHash;
            this.SeasonPart = seasonPart;
            this.ReleaseTokens = releaseTokens;
            this.DailyPart = dailyPart;
        }

        /// <summary>
        /// Gets or Sets ReleaseTitle
        /// </summary>
        [DataMember(Name = "releaseTitle", EmitDefaultValue = true)]
        public string ReleaseTitle { get; set; }

        /// <summary>
        /// Gets or Sets SeriesTitle
        /// </summary>
        [DataMember(Name = "seriesTitle", EmitDefaultValue = true)]
        public string SeriesTitle { get; set; }

        /// <summary>
        /// Gets or Sets SeriesTitleInfo
        /// </summary>
        [DataMember(Name = "seriesTitleInfo", EmitDefaultValue = false)]
        public SeriesTitleInfo SeriesTitleInfo { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityModel Quality { get; set; }

        /// <summary>
        /// Gets or Sets SeasonNumber
        /// </summary>
        [DataMember(Name = "seasonNumber", EmitDefaultValue = false)]
        public int SeasonNumber { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeNumbers
        /// </summary>
        [DataMember(Name = "episodeNumbers", EmitDefaultValue = true)]
        public List<int> EpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteEpisodeNumbers
        /// </summary>
        [DataMember(Name = "absoluteEpisodeNumbers", EmitDefaultValue = true)]
        public List<int> AbsoluteEpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets SpecialAbsoluteEpisodeNumbers
        /// </summary>
        [DataMember(Name = "specialAbsoluteEpisodeNumbers", EmitDefaultValue = true)]
        public List<double> SpecialAbsoluteEpisodeNumbers { get; set; }

        /// <summary>
        /// Gets or Sets AirDate
        /// </summary>
        [DataMember(Name = "airDate", EmitDefaultValue = true)]
        public string AirDate { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = true)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Gets or Sets FullSeason
        /// </summary>
        [DataMember(Name = "fullSeason", EmitDefaultValue = true)]
        public bool FullSeason { get; set; }

        /// <summary>
        /// Gets or Sets IsPartialSeason
        /// </summary>
        [DataMember(Name = "isPartialSeason", EmitDefaultValue = true)]
        public bool IsPartialSeason { get; set; }

        /// <summary>
        /// Gets or Sets IsMultiSeason
        /// </summary>
        [DataMember(Name = "isMultiSeason", EmitDefaultValue = true)]
        public bool IsMultiSeason { get; set; }

        /// <summary>
        /// Gets or Sets IsSeasonExtra
        /// </summary>
        [DataMember(Name = "isSeasonExtra", EmitDefaultValue = true)]
        public bool IsSeasonExtra { get; set; }

        /// <summary>
        /// Gets or Sets Special
        /// </summary>
        [DataMember(Name = "special", EmitDefaultValue = true)]
        public bool Special { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroup
        /// </summary>
        [DataMember(Name = "releaseGroup", EmitDefaultValue = true)]
        public string ReleaseGroup { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseHash
        /// </summary>
        [DataMember(Name = "releaseHash", EmitDefaultValue = true)]
        public string ReleaseHash { get; set; }

        /// <summary>
        /// Gets or Sets SeasonPart
        /// </summary>
        [DataMember(Name = "seasonPart", EmitDefaultValue = false)]
        public int SeasonPart { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseTokens
        /// </summary>
        [DataMember(Name = "releaseTokens", EmitDefaultValue = true)]
        public string ReleaseTokens { get; set; }

        /// <summary>
        /// Gets or Sets DailyPart
        /// </summary>
        [DataMember(Name = "dailyPart", EmitDefaultValue = true)]
        public int? DailyPart { get; set; }

        /// <summary>
        /// Gets or Sets IsDaily
        /// </summary>
        [DataMember(Name = "isDaily", EmitDefaultValue = true)]
        public bool IsDaily { get; private set; }

        /// <summary>
        /// Returns false as IsDaily should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDaily()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsAbsoluteNumbering
        /// </summary>
        [DataMember(Name = "isAbsoluteNumbering", EmitDefaultValue = true)]
        public bool IsAbsoluteNumbering { get; private set; }

        /// <summary>
        /// Returns false as IsAbsoluteNumbering should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAbsoluteNumbering()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsPossibleSpecialEpisode
        /// </summary>
        [DataMember(Name = "isPossibleSpecialEpisode", EmitDefaultValue = true)]
        public bool IsPossibleSpecialEpisode { get; private set; }

        /// <summary>
        /// Returns false as IsPossibleSpecialEpisode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsPossibleSpecialEpisode()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsPossibleSceneSeasonSpecial
        /// </summary>
        [DataMember(Name = "isPossibleSceneSeasonSpecial", EmitDefaultValue = true)]
        public bool IsPossibleSceneSeasonSpecial { get; private set; }

        /// <summary>
        /// Returns false as IsPossibleSceneSeasonSpecial should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsPossibleSceneSeasonSpecial()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParsedEpisodeInfo {\n");
            sb.Append("  ReleaseTitle: ").Append(ReleaseTitle).Append("\n");
            sb.Append("  SeriesTitle: ").Append(SeriesTitle).Append("\n");
            sb.Append("  SeriesTitleInfo: ").Append(SeriesTitleInfo).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  SeasonNumber: ").Append(SeasonNumber).Append("\n");
            sb.Append("  EpisodeNumbers: ").Append(EpisodeNumbers).Append("\n");
            sb.Append("  AbsoluteEpisodeNumbers: ").Append(AbsoluteEpisodeNumbers).Append("\n");
            sb.Append("  SpecialAbsoluteEpisodeNumbers: ").Append(SpecialAbsoluteEpisodeNumbers).Append("\n");
            sb.Append("  AirDate: ").Append(AirDate).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  FullSeason: ").Append(FullSeason).Append("\n");
            sb.Append("  IsPartialSeason: ").Append(IsPartialSeason).Append("\n");
            sb.Append("  IsMultiSeason: ").Append(IsMultiSeason).Append("\n");
            sb.Append("  IsSeasonExtra: ").Append(IsSeasonExtra).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("  ReleaseGroup: ").Append(ReleaseGroup).Append("\n");
            sb.Append("  ReleaseHash: ").Append(ReleaseHash).Append("\n");
            sb.Append("  SeasonPart: ").Append(SeasonPart).Append("\n");
            sb.Append("  ReleaseTokens: ").Append(ReleaseTokens).Append("\n");
            sb.Append("  DailyPart: ").Append(DailyPart).Append("\n");
            sb.Append("  IsDaily: ").Append(IsDaily).Append("\n");
            sb.Append("  IsAbsoluteNumbering: ").Append(IsAbsoluteNumbering).Append("\n");
            sb.Append("  IsPossibleSpecialEpisode: ").Append(IsPossibleSpecialEpisode).Append("\n");
            sb.Append("  IsPossibleSceneSeasonSpecial: ").Append(IsPossibleSceneSeasonSpecial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParsedEpisodeInfo);
        }

        /// <summary>
        /// Returns true if ParsedEpisodeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ParsedEpisodeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParsedEpisodeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleaseTitle == input.ReleaseTitle ||
                    (this.ReleaseTitle != null &&
                    this.ReleaseTitle.Equals(input.ReleaseTitle))
                ) && 
                (
                    this.SeriesTitle == input.SeriesTitle ||
                    (this.SeriesTitle != null &&
                    this.SeriesTitle.Equals(input.SeriesTitle))
                ) && 
                (
                    this.SeriesTitleInfo == input.SeriesTitleInfo ||
                    (this.SeriesTitleInfo != null &&
                    this.SeriesTitleInfo.Equals(input.SeriesTitleInfo))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.SeasonNumber == input.SeasonNumber ||
                    this.SeasonNumber.Equals(input.SeasonNumber)
                ) && 
                (
                    this.EpisodeNumbers == input.EpisodeNumbers ||
                    this.EpisodeNumbers != null &&
                    input.EpisodeNumbers != null &&
                    this.EpisodeNumbers.SequenceEqual(input.EpisodeNumbers)
                ) && 
                (
                    this.AbsoluteEpisodeNumbers == input.AbsoluteEpisodeNumbers ||
                    this.AbsoluteEpisodeNumbers != null &&
                    input.AbsoluteEpisodeNumbers != null &&
                    this.AbsoluteEpisodeNumbers.SequenceEqual(input.AbsoluteEpisodeNumbers)
                ) && 
                (
                    this.SpecialAbsoluteEpisodeNumbers == input.SpecialAbsoluteEpisodeNumbers ||
                    this.SpecialAbsoluteEpisodeNumbers != null &&
                    input.SpecialAbsoluteEpisodeNumbers != null &&
                    this.SpecialAbsoluteEpisodeNumbers.SequenceEqual(input.SpecialAbsoluteEpisodeNumbers)
                ) && 
                (
                    this.AirDate == input.AirDate ||
                    (this.AirDate != null &&
                    this.AirDate.Equals(input.AirDate))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.FullSeason == input.FullSeason ||
                    this.FullSeason.Equals(input.FullSeason)
                ) && 
                (
                    this.IsPartialSeason == input.IsPartialSeason ||
                    this.IsPartialSeason.Equals(input.IsPartialSeason)
                ) && 
                (
                    this.IsMultiSeason == input.IsMultiSeason ||
                    this.IsMultiSeason.Equals(input.IsMultiSeason)
                ) && 
                (
                    this.IsSeasonExtra == input.IsSeasonExtra ||
                    this.IsSeasonExtra.Equals(input.IsSeasonExtra)
                ) && 
                (
                    this.Special == input.Special ||
                    this.Special.Equals(input.Special)
                ) && 
                (
                    this.ReleaseGroup == input.ReleaseGroup ||
                    (this.ReleaseGroup != null &&
                    this.ReleaseGroup.Equals(input.ReleaseGroup))
                ) && 
                (
                    this.ReleaseHash == input.ReleaseHash ||
                    (this.ReleaseHash != null &&
                    this.ReleaseHash.Equals(input.ReleaseHash))
                ) && 
                (
                    this.SeasonPart == input.SeasonPart ||
                    this.SeasonPart.Equals(input.SeasonPart)
                ) && 
                (
                    this.ReleaseTokens == input.ReleaseTokens ||
                    (this.ReleaseTokens != null &&
                    this.ReleaseTokens.Equals(input.ReleaseTokens))
                ) && 
                (
                    this.DailyPart == input.DailyPart ||
                    (this.DailyPart != null &&
                    this.DailyPart.Equals(input.DailyPart))
                ) && 
                (
                    this.IsDaily == input.IsDaily ||
                    this.IsDaily.Equals(input.IsDaily)
                ) && 
                (
                    this.IsAbsoluteNumbering == input.IsAbsoluteNumbering ||
                    this.IsAbsoluteNumbering.Equals(input.IsAbsoluteNumbering)
                ) && 
                (
                    this.IsPossibleSpecialEpisode == input.IsPossibleSpecialEpisode ||
                    this.IsPossibleSpecialEpisode.Equals(input.IsPossibleSpecialEpisode)
                ) && 
                (
                    this.IsPossibleSceneSeasonSpecial == input.IsPossibleSceneSeasonSpecial ||
                    this.IsPossibleSceneSeasonSpecial.Equals(input.IsPossibleSceneSeasonSpecial)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseTitle != null)
                    hashCode = hashCode * 59 + this.ReleaseTitle.GetHashCode();
                if (this.SeriesTitle != null)
                    hashCode = hashCode * 59 + this.SeriesTitle.GetHashCode();
                if (this.SeriesTitleInfo != null)
                    hashCode = hashCode * 59 + this.SeriesTitleInfo.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                hashCode = hashCode * 59 + this.SeasonNumber.GetHashCode();
                if (this.EpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.EpisodeNumbers.GetHashCode();
                if (this.AbsoluteEpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.AbsoluteEpisodeNumbers.GetHashCode();
                if (this.SpecialAbsoluteEpisodeNumbers != null)
                    hashCode = hashCode * 59 + this.SpecialAbsoluteEpisodeNumbers.GetHashCode();
                if (this.AirDate != null)
                    hashCode = hashCode * 59 + this.AirDate.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                hashCode = hashCode * 59 + this.FullSeason.GetHashCode();
                hashCode = hashCode * 59 + this.IsPartialSeason.GetHashCode();
                hashCode = hashCode * 59 + this.IsMultiSeason.GetHashCode();
                hashCode = hashCode * 59 + this.IsSeasonExtra.GetHashCode();
                hashCode = hashCode * 59 + this.Special.GetHashCode();
                if (this.ReleaseGroup != null)
                    hashCode = hashCode * 59 + this.ReleaseGroup.GetHashCode();
                if (this.ReleaseHash != null)
                    hashCode = hashCode * 59 + this.ReleaseHash.GetHashCode();
                hashCode = hashCode * 59 + this.SeasonPart.GetHashCode();
                if (this.ReleaseTokens != null)
                    hashCode = hashCode * 59 + this.ReleaseTokens.GetHashCode();
                if (this.DailyPart != null)
                    hashCode = hashCode * 59 + this.DailyPart.GetHashCode();
                hashCode = hashCode * 59 + this.IsDaily.GetHashCode();
                hashCode = hashCode * 59 + this.IsAbsoluteNumbering.GetHashCode();
                hashCode = hashCode * 59 + this.IsPossibleSpecialEpisode.GetHashCode();
                hashCode = hashCode * 59 + this.IsPossibleSceneSeasonSpecial.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
