/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// NotificationResource
    /// </summary>
    [DataContract(Name = "NotificationResource")]
    public partial class NotificationResource : IEquatable<NotificationResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="fields">fields.</param>
        /// <param name="implementationName">implementationName.</param>
        /// <param name="implementation">implementation.</param>
        /// <param name="configContract">configContract.</param>
        /// <param name="infoLink">infoLink.</param>
        /// <param name="message">message.</param>
        /// <param name="tags">tags.</param>
        /// <param name="presets">presets.</param>
        /// <param name="link">link.</param>
        /// <param name="onGrab">onGrab.</param>
        /// <param name="onDownload">onDownload.</param>
        /// <param name="onUpgrade">onUpgrade.</param>
        /// <param name="onRename">onRename.</param>
        /// <param name="onSeriesAdd">onSeriesAdd.</param>
        /// <param name="onSeriesDelete">onSeriesDelete.</param>
        /// <param name="onEpisodeFileDelete">onEpisodeFileDelete.</param>
        /// <param name="onEpisodeFileDeleteForUpgrade">onEpisodeFileDeleteForUpgrade.</param>
        /// <param name="onHealthIssue">onHealthIssue.</param>
        /// <param name="onHealthRestored">onHealthRestored.</param>
        /// <param name="onApplicationUpdate">onApplicationUpdate.</param>
        /// <param name="onManualInteractionRequired">onManualInteractionRequired.</param>
        /// <param name="supportsOnGrab">supportsOnGrab.</param>
        /// <param name="supportsOnDownload">supportsOnDownload.</param>
        /// <param name="supportsOnUpgrade">supportsOnUpgrade.</param>
        /// <param name="supportsOnRename">supportsOnRename.</param>
        /// <param name="supportsOnSeriesAdd">supportsOnSeriesAdd.</param>
        /// <param name="supportsOnSeriesDelete">supportsOnSeriesDelete.</param>
        /// <param name="supportsOnEpisodeFileDelete">supportsOnEpisodeFileDelete.</param>
        /// <param name="supportsOnEpisodeFileDeleteForUpgrade">supportsOnEpisodeFileDeleteForUpgrade.</param>
        /// <param name="supportsOnHealthIssue">supportsOnHealthIssue.</param>
        /// <param name="supportsOnHealthRestored">supportsOnHealthRestored.</param>
        /// <param name="supportsOnApplicationUpdate">supportsOnApplicationUpdate.</param>
        /// <param name="supportsOnManualInteractionRequired">supportsOnManualInteractionRequired.</param>
        /// <param name="includeHealthWarnings">includeHealthWarnings.</param>
        /// <param name="testCommand">testCommand.</param>
        public NotificationResource(int id = default(int), string name = default(string), List<Field> fields = default(List<Field>), string implementationName = default(string), string implementation = default(string), string configContract = default(string), string infoLink = default(string), ProviderMessage message = default(ProviderMessage), List<int> tags = default(List<int>), List<NotificationResource> presets = default(List<NotificationResource>), string link = default(string), bool onGrab = default(bool), bool onDownload = default(bool), bool onUpgrade = default(bool), bool onRename = default(bool), bool onSeriesAdd = default(bool), bool onSeriesDelete = default(bool), bool onEpisodeFileDelete = default(bool), bool onEpisodeFileDeleteForUpgrade = default(bool), bool onHealthIssue = default(bool), bool onHealthRestored = default(bool), bool onApplicationUpdate = default(bool), bool onManualInteractionRequired = default(bool), bool supportsOnGrab = default(bool), bool supportsOnDownload = default(bool), bool supportsOnUpgrade = default(bool), bool supportsOnRename = default(bool), bool supportsOnSeriesAdd = default(bool), bool supportsOnSeriesDelete = default(bool), bool supportsOnEpisodeFileDelete = default(bool), bool supportsOnEpisodeFileDeleteForUpgrade = default(bool), bool supportsOnHealthIssue = default(bool), bool supportsOnHealthRestored = default(bool), bool supportsOnApplicationUpdate = default(bool), bool supportsOnManualInteractionRequired = default(bool), bool includeHealthWarnings = default(bool), string testCommand = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Fields = fields;
            this.ImplementationName = implementationName;
            this.Implementation = implementation;
            this.ConfigContract = configContract;
            this.InfoLink = infoLink;
            this.Message = message;
            this.Tags = tags;
            this.Presets = presets;
            this.Link = link;
            this.OnGrab = onGrab;
            this.OnDownload = onDownload;
            this.OnUpgrade = onUpgrade;
            this.OnRename = onRename;
            this.OnSeriesAdd = onSeriesAdd;
            this.OnSeriesDelete = onSeriesDelete;
            this.OnEpisodeFileDelete = onEpisodeFileDelete;
            this.OnEpisodeFileDeleteForUpgrade = onEpisodeFileDeleteForUpgrade;
            this.OnHealthIssue = onHealthIssue;
            this.OnHealthRestored = onHealthRestored;
            this.OnApplicationUpdate = onApplicationUpdate;
            this.OnManualInteractionRequired = onManualInteractionRequired;
            this.SupportsOnGrab = supportsOnGrab;
            this.SupportsOnDownload = supportsOnDownload;
            this.SupportsOnUpgrade = supportsOnUpgrade;
            this.SupportsOnRename = supportsOnRename;
            this.SupportsOnSeriesAdd = supportsOnSeriesAdd;
            this.SupportsOnSeriesDelete = supportsOnSeriesDelete;
            this.SupportsOnEpisodeFileDelete = supportsOnEpisodeFileDelete;
            this.SupportsOnEpisodeFileDeleteForUpgrade = supportsOnEpisodeFileDeleteForUpgrade;
            this.SupportsOnHealthIssue = supportsOnHealthIssue;
            this.SupportsOnHealthRestored = supportsOnHealthRestored;
            this.SupportsOnApplicationUpdate = supportsOnApplicationUpdate;
            this.SupportsOnManualInteractionRequired = supportsOnManualInteractionRequired;
            this.IncludeHealthWarnings = includeHealthWarnings;
            this.TestCommand = testCommand;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = true)]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationName
        /// </summary>
        [DataMember(Name = "implementationName", EmitDefaultValue = true)]
        public string ImplementationName { get; set; }

        /// <summary>
        /// Gets or Sets Implementation
        /// </summary>
        [DataMember(Name = "implementation", EmitDefaultValue = true)]
        public string Implementation { get; set; }

        /// <summary>
        /// Gets or Sets ConfigContract
        /// </summary>
        [DataMember(Name = "configContract", EmitDefaultValue = true)]
        public string ConfigContract { get; set; }

        /// <summary>
        /// Gets or Sets InfoLink
        /// </summary>
        [DataMember(Name = "infoLink", EmitDefaultValue = true)]
        public string InfoLink { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public ProviderMessage Message { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Presets
        /// </summary>
        [DataMember(Name = "presets", EmitDefaultValue = true)]
        public List<NotificationResource> Presets { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets OnGrab
        /// </summary>
        [DataMember(Name = "onGrab", EmitDefaultValue = true)]
        public bool OnGrab { get; set; }

        /// <summary>
        /// Gets or Sets OnDownload
        /// </summary>
        [DataMember(Name = "onDownload", EmitDefaultValue = true)]
        public bool OnDownload { get; set; }

        /// <summary>
        /// Gets or Sets OnUpgrade
        /// </summary>
        [DataMember(Name = "onUpgrade", EmitDefaultValue = true)]
        public bool OnUpgrade { get; set; }

        /// <summary>
        /// Gets or Sets OnRename
        /// </summary>
        [DataMember(Name = "onRename", EmitDefaultValue = true)]
        public bool OnRename { get; set; }

        /// <summary>
        /// Gets or Sets OnSeriesAdd
        /// </summary>
        [DataMember(Name = "onSeriesAdd", EmitDefaultValue = true)]
        public bool OnSeriesAdd { get; set; }

        /// <summary>
        /// Gets or Sets OnSeriesDelete
        /// </summary>
        [DataMember(Name = "onSeriesDelete", EmitDefaultValue = true)]
        public bool OnSeriesDelete { get; set; }

        /// <summary>
        /// Gets or Sets OnEpisodeFileDelete
        /// </summary>
        [DataMember(Name = "onEpisodeFileDelete", EmitDefaultValue = true)]
        public bool OnEpisodeFileDelete { get; set; }

        /// <summary>
        /// Gets or Sets OnEpisodeFileDeleteForUpgrade
        /// </summary>
        [DataMember(Name = "onEpisodeFileDeleteForUpgrade", EmitDefaultValue = true)]
        public bool OnEpisodeFileDeleteForUpgrade { get; set; }

        /// <summary>
        /// Gets or Sets OnHealthIssue
        /// </summary>
        [DataMember(Name = "onHealthIssue", EmitDefaultValue = true)]
        public bool OnHealthIssue { get; set; }

        /// <summary>
        /// Gets or Sets OnHealthRestored
        /// </summary>
        [DataMember(Name = "onHealthRestored", EmitDefaultValue = true)]
        public bool OnHealthRestored { get; set; }

        /// <summary>
        /// Gets or Sets OnApplicationUpdate
        /// </summary>
        [DataMember(Name = "onApplicationUpdate", EmitDefaultValue = true)]
        public bool OnApplicationUpdate { get; set; }

        /// <summary>
        /// Gets or Sets OnManualInteractionRequired
        /// </summary>
        [DataMember(Name = "onManualInteractionRequired", EmitDefaultValue = true)]
        public bool OnManualInteractionRequired { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnGrab
        /// </summary>
        [DataMember(Name = "supportsOnGrab", EmitDefaultValue = true)]
        public bool SupportsOnGrab { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnDownload
        /// </summary>
        [DataMember(Name = "supportsOnDownload", EmitDefaultValue = true)]
        public bool SupportsOnDownload { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnUpgrade
        /// </summary>
        [DataMember(Name = "supportsOnUpgrade", EmitDefaultValue = true)]
        public bool SupportsOnUpgrade { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnRename
        /// </summary>
        [DataMember(Name = "supportsOnRename", EmitDefaultValue = true)]
        public bool SupportsOnRename { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnSeriesAdd
        /// </summary>
        [DataMember(Name = "supportsOnSeriesAdd", EmitDefaultValue = true)]
        public bool SupportsOnSeriesAdd { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnSeriesDelete
        /// </summary>
        [DataMember(Name = "supportsOnSeriesDelete", EmitDefaultValue = true)]
        public bool SupportsOnSeriesDelete { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnEpisodeFileDelete
        /// </summary>
        [DataMember(Name = "supportsOnEpisodeFileDelete", EmitDefaultValue = true)]
        public bool SupportsOnEpisodeFileDelete { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnEpisodeFileDeleteForUpgrade
        /// </summary>
        [DataMember(Name = "supportsOnEpisodeFileDeleteForUpgrade", EmitDefaultValue = true)]
        public bool SupportsOnEpisodeFileDeleteForUpgrade { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnHealthIssue
        /// </summary>
        [DataMember(Name = "supportsOnHealthIssue", EmitDefaultValue = true)]
        public bool SupportsOnHealthIssue { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnHealthRestored
        /// </summary>
        [DataMember(Name = "supportsOnHealthRestored", EmitDefaultValue = true)]
        public bool SupportsOnHealthRestored { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnApplicationUpdate
        /// </summary>
        [DataMember(Name = "supportsOnApplicationUpdate", EmitDefaultValue = true)]
        public bool SupportsOnApplicationUpdate { get; set; }

        /// <summary>
        /// Gets or Sets SupportsOnManualInteractionRequired
        /// </summary>
        [DataMember(Name = "supportsOnManualInteractionRequired", EmitDefaultValue = true)]
        public bool SupportsOnManualInteractionRequired { get; set; }

        /// <summary>
        /// Gets or Sets IncludeHealthWarnings
        /// </summary>
        [DataMember(Name = "includeHealthWarnings", EmitDefaultValue = true)]
        public bool IncludeHealthWarnings { get; set; }

        /// <summary>
        /// Gets or Sets TestCommand
        /// </summary>
        [DataMember(Name = "testCommand", EmitDefaultValue = true)]
        public string TestCommand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  ImplementationName: ").Append(ImplementationName).Append("\n");
            sb.Append("  Implementation: ").Append(Implementation).Append("\n");
            sb.Append("  ConfigContract: ").Append(ConfigContract).Append("\n");
            sb.Append("  InfoLink: ").Append(InfoLink).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Presets: ").Append(Presets).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  OnGrab: ").Append(OnGrab).Append("\n");
            sb.Append("  OnDownload: ").Append(OnDownload).Append("\n");
            sb.Append("  OnUpgrade: ").Append(OnUpgrade).Append("\n");
            sb.Append("  OnRename: ").Append(OnRename).Append("\n");
            sb.Append("  OnSeriesAdd: ").Append(OnSeriesAdd).Append("\n");
            sb.Append("  OnSeriesDelete: ").Append(OnSeriesDelete).Append("\n");
            sb.Append("  OnEpisodeFileDelete: ").Append(OnEpisodeFileDelete).Append("\n");
            sb.Append("  OnEpisodeFileDeleteForUpgrade: ").Append(OnEpisodeFileDeleteForUpgrade).Append("\n");
            sb.Append("  OnHealthIssue: ").Append(OnHealthIssue).Append("\n");
            sb.Append("  OnHealthRestored: ").Append(OnHealthRestored).Append("\n");
            sb.Append("  OnApplicationUpdate: ").Append(OnApplicationUpdate).Append("\n");
            sb.Append("  OnManualInteractionRequired: ").Append(OnManualInteractionRequired).Append("\n");
            sb.Append("  SupportsOnGrab: ").Append(SupportsOnGrab).Append("\n");
            sb.Append("  SupportsOnDownload: ").Append(SupportsOnDownload).Append("\n");
            sb.Append("  SupportsOnUpgrade: ").Append(SupportsOnUpgrade).Append("\n");
            sb.Append("  SupportsOnRename: ").Append(SupportsOnRename).Append("\n");
            sb.Append("  SupportsOnSeriesAdd: ").Append(SupportsOnSeriesAdd).Append("\n");
            sb.Append("  SupportsOnSeriesDelete: ").Append(SupportsOnSeriesDelete).Append("\n");
            sb.Append("  SupportsOnEpisodeFileDelete: ").Append(SupportsOnEpisodeFileDelete).Append("\n");
            sb.Append("  SupportsOnEpisodeFileDeleteForUpgrade: ").Append(SupportsOnEpisodeFileDeleteForUpgrade).Append("\n");
            sb.Append("  SupportsOnHealthIssue: ").Append(SupportsOnHealthIssue).Append("\n");
            sb.Append("  SupportsOnHealthRestored: ").Append(SupportsOnHealthRestored).Append("\n");
            sb.Append("  SupportsOnApplicationUpdate: ").Append(SupportsOnApplicationUpdate).Append("\n");
            sb.Append("  SupportsOnManualInteractionRequired: ").Append(SupportsOnManualInteractionRequired).Append("\n");
            sb.Append("  IncludeHealthWarnings: ").Append(IncludeHealthWarnings).Append("\n");
            sb.Append("  TestCommand: ").Append(TestCommand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationResource);
        }

        /// <summary>
        /// Returns true if NotificationResource instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.ImplementationName == input.ImplementationName ||
                    (this.ImplementationName != null &&
                    this.ImplementationName.Equals(input.ImplementationName))
                ) && 
                (
                    this.Implementation == input.Implementation ||
                    (this.Implementation != null &&
                    this.Implementation.Equals(input.Implementation))
                ) && 
                (
                    this.ConfigContract == input.ConfigContract ||
                    (this.ConfigContract != null &&
                    this.ConfigContract.Equals(input.ConfigContract))
                ) && 
                (
                    this.InfoLink == input.InfoLink ||
                    (this.InfoLink != null &&
                    this.InfoLink.Equals(input.InfoLink))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Presets == input.Presets ||
                    this.Presets != null &&
                    input.Presets != null &&
                    this.Presets.SequenceEqual(input.Presets)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.OnGrab == input.OnGrab ||
                    this.OnGrab.Equals(input.OnGrab)
                ) && 
                (
                    this.OnDownload == input.OnDownload ||
                    this.OnDownload.Equals(input.OnDownload)
                ) && 
                (
                    this.OnUpgrade == input.OnUpgrade ||
                    this.OnUpgrade.Equals(input.OnUpgrade)
                ) && 
                (
                    this.OnRename == input.OnRename ||
                    this.OnRename.Equals(input.OnRename)
                ) && 
                (
                    this.OnSeriesAdd == input.OnSeriesAdd ||
                    this.OnSeriesAdd.Equals(input.OnSeriesAdd)
                ) && 
                (
                    this.OnSeriesDelete == input.OnSeriesDelete ||
                    this.OnSeriesDelete.Equals(input.OnSeriesDelete)
                ) && 
                (
                    this.OnEpisodeFileDelete == input.OnEpisodeFileDelete ||
                    this.OnEpisodeFileDelete.Equals(input.OnEpisodeFileDelete)
                ) && 
                (
                    this.OnEpisodeFileDeleteForUpgrade == input.OnEpisodeFileDeleteForUpgrade ||
                    this.OnEpisodeFileDeleteForUpgrade.Equals(input.OnEpisodeFileDeleteForUpgrade)
                ) && 
                (
                    this.OnHealthIssue == input.OnHealthIssue ||
                    this.OnHealthIssue.Equals(input.OnHealthIssue)
                ) && 
                (
                    this.OnHealthRestored == input.OnHealthRestored ||
                    this.OnHealthRestored.Equals(input.OnHealthRestored)
                ) && 
                (
                    this.OnApplicationUpdate == input.OnApplicationUpdate ||
                    this.OnApplicationUpdate.Equals(input.OnApplicationUpdate)
                ) && 
                (
                    this.OnManualInteractionRequired == input.OnManualInteractionRequired ||
                    this.OnManualInteractionRequired.Equals(input.OnManualInteractionRequired)
                ) && 
                (
                    this.SupportsOnGrab == input.SupportsOnGrab ||
                    this.SupportsOnGrab.Equals(input.SupportsOnGrab)
                ) && 
                (
                    this.SupportsOnDownload == input.SupportsOnDownload ||
                    this.SupportsOnDownload.Equals(input.SupportsOnDownload)
                ) && 
                (
                    this.SupportsOnUpgrade == input.SupportsOnUpgrade ||
                    this.SupportsOnUpgrade.Equals(input.SupportsOnUpgrade)
                ) && 
                (
                    this.SupportsOnRename == input.SupportsOnRename ||
                    this.SupportsOnRename.Equals(input.SupportsOnRename)
                ) && 
                (
                    this.SupportsOnSeriesAdd == input.SupportsOnSeriesAdd ||
                    this.SupportsOnSeriesAdd.Equals(input.SupportsOnSeriesAdd)
                ) && 
                (
                    this.SupportsOnSeriesDelete == input.SupportsOnSeriesDelete ||
                    this.SupportsOnSeriesDelete.Equals(input.SupportsOnSeriesDelete)
                ) && 
                (
                    this.SupportsOnEpisodeFileDelete == input.SupportsOnEpisodeFileDelete ||
                    this.SupportsOnEpisodeFileDelete.Equals(input.SupportsOnEpisodeFileDelete)
                ) && 
                (
                    this.SupportsOnEpisodeFileDeleteForUpgrade == input.SupportsOnEpisodeFileDeleteForUpgrade ||
                    this.SupportsOnEpisodeFileDeleteForUpgrade.Equals(input.SupportsOnEpisodeFileDeleteForUpgrade)
                ) && 
                (
                    this.SupportsOnHealthIssue == input.SupportsOnHealthIssue ||
                    this.SupportsOnHealthIssue.Equals(input.SupportsOnHealthIssue)
                ) && 
                (
                    this.SupportsOnHealthRestored == input.SupportsOnHealthRestored ||
                    this.SupportsOnHealthRestored.Equals(input.SupportsOnHealthRestored)
                ) && 
                (
                    this.SupportsOnApplicationUpdate == input.SupportsOnApplicationUpdate ||
                    this.SupportsOnApplicationUpdate.Equals(input.SupportsOnApplicationUpdate)
                ) && 
                (
                    this.SupportsOnManualInteractionRequired == input.SupportsOnManualInteractionRequired ||
                    this.SupportsOnManualInteractionRequired.Equals(input.SupportsOnManualInteractionRequired)
                ) && 
                (
                    this.IncludeHealthWarnings == input.IncludeHealthWarnings ||
                    this.IncludeHealthWarnings.Equals(input.IncludeHealthWarnings)
                ) && 
                (
                    this.TestCommand == input.TestCommand ||
                    (this.TestCommand != null &&
                    this.TestCommand.Equals(input.TestCommand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.ImplementationName != null)
                    hashCode = hashCode * 59 + this.ImplementationName.GetHashCode();
                if (this.Implementation != null)
                    hashCode = hashCode * 59 + this.Implementation.GetHashCode();
                if (this.ConfigContract != null)
                    hashCode = hashCode * 59 + this.ConfigContract.GetHashCode();
                if (this.InfoLink != null)
                    hashCode = hashCode * 59 + this.InfoLink.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Presets != null)
                    hashCode = hashCode * 59 + this.Presets.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                hashCode = hashCode * 59 + this.OnGrab.GetHashCode();
                hashCode = hashCode * 59 + this.OnDownload.GetHashCode();
                hashCode = hashCode * 59 + this.OnUpgrade.GetHashCode();
                hashCode = hashCode * 59 + this.OnRename.GetHashCode();
                hashCode = hashCode * 59 + this.OnSeriesAdd.GetHashCode();
                hashCode = hashCode * 59 + this.OnSeriesDelete.GetHashCode();
                hashCode = hashCode * 59 + this.OnEpisodeFileDelete.GetHashCode();
                hashCode = hashCode * 59 + this.OnEpisodeFileDeleteForUpgrade.GetHashCode();
                hashCode = hashCode * 59 + this.OnHealthIssue.GetHashCode();
                hashCode = hashCode * 59 + this.OnHealthRestored.GetHashCode();
                hashCode = hashCode * 59 + this.OnApplicationUpdate.GetHashCode();
                hashCode = hashCode * 59 + this.OnManualInteractionRequired.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnGrab.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnDownload.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnUpgrade.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnRename.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnSeriesAdd.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnSeriesDelete.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnEpisodeFileDelete.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnEpisodeFileDeleteForUpgrade.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnHealthIssue.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnHealthRestored.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnApplicationUpdate.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsOnManualInteractionRequired.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeHealthWarnings.GetHashCode();
                if (this.TestCommand != null)
                    hashCode = hashCode * 59 + this.TestCommand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
