/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// ModelVersion
    /// </summary>
    [DataContract(Name = "_Version")]
    public partial class ModelVersion : IEquatable<ModelVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ModelVersion()
        {
        }

        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name = "major", EmitDefaultValue = false)]
        public int Major { get; private set; }

        /// <summary>
        /// Returns false as Major should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMajor()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [DataMember(Name = "minor", EmitDefaultValue = false)]
        public int Minor { get; private set; }

        /// <summary>
        /// Returns false as Minor should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinor()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name = "build", EmitDefaultValue = false)]
        public int Build { get; private set; }

        /// <summary>
        /// Returns false as Build should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuild()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; private set; }

        /// <summary>
        /// Returns false as Revision should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRevision()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MajorRevision
        /// </summary>
        [DataMember(Name = "majorRevision", EmitDefaultValue = false)]
        public int MajorRevision { get; private set; }

        /// <summary>
        /// Returns false as MajorRevision should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMajorRevision()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MinorRevision
        /// </summary>
        [DataMember(Name = "minorRevision", EmitDefaultValue = false)]
        public int MinorRevision { get; private set; }

        /// <summary>
        /// Returns false as MinorRevision should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinorRevision()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelVersion {\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  MajorRevision: ").Append(MajorRevision).Append("\n");
            sb.Append("  MinorRevision: ").Append(MinorRevision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelVersion);
        }

        /// <summary>
        /// Returns true if ModelVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Major == input.Major ||
                    this.Major.Equals(input.Major)
                ) && 
                (
                    this.Minor == input.Minor ||
                    this.Minor.Equals(input.Minor)
                ) && 
                (
                    this.Build == input.Build ||
                    this.Build.Equals(input.Build)
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.MajorRevision == input.MajorRevision ||
                    this.MajorRevision.Equals(input.MajorRevision)
                ) && 
                (
                    this.MinorRevision == input.MinorRevision ||
                    this.MinorRevision.Equals(input.MinorRevision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Major.GetHashCode();
                hashCode = hashCode * 59 + this.Minor.GetHashCode();
                hashCode = hashCode * 59 + this.Build.GetHashCode();
                hashCode = hashCode * 59 + this.Revision.GetHashCode();
                hashCode = hashCode * 59 + this.MajorRevision.GetHashCode();
                hashCode = hashCode * 59 + this.MinorRevision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
