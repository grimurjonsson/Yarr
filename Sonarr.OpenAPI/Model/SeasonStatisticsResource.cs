/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// SeasonStatisticsResource
    /// </summary>
    [DataContract(Name = "SeasonStatisticsResource")]
    public partial class SeasonStatisticsResource : IEquatable<SeasonStatisticsResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeasonStatisticsResource" /> class.
        /// </summary>
        /// <param name="nextAiring">nextAiring.</param>
        /// <param name="previousAiring">previousAiring.</param>
        /// <param name="episodeFileCount">episodeFileCount.</param>
        /// <param name="episodeCount">episodeCount.</param>
        /// <param name="totalEpisodeCount">totalEpisodeCount.</param>
        /// <param name="sizeOnDisk">sizeOnDisk.</param>
        /// <param name="releaseGroups">releaseGroups.</param>
        public SeasonStatisticsResource(DateTime? nextAiring = default(DateTime?), DateTime? previousAiring = default(DateTime?), int episodeFileCount = default(int), int episodeCount = default(int), int totalEpisodeCount = default(int), long sizeOnDisk = default(long), List<string> releaseGroups = default(List<string>))
        {
            this.NextAiring = nextAiring;
            this.PreviousAiring = previousAiring;
            this.EpisodeFileCount = episodeFileCount;
            this.EpisodeCount = episodeCount;
            this.TotalEpisodeCount = totalEpisodeCount;
            this.SizeOnDisk = sizeOnDisk;
            this.ReleaseGroups = releaseGroups;
        }

        /// <summary>
        /// Gets or Sets NextAiring
        /// </summary>
        [DataMember(Name = "nextAiring", EmitDefaultValue = true)]
        public DateTime? NextAiring { get; set; }

        /// <summary>
        /// Gets or Sets PreviousAiring
        /// </summary>
        [DataMember(Name = "previousAiring", EmitDefaultValue = true)]
        public DateTime? PreviousAiring { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeFileCount
        /// </summary>
        [DataMember(Name = "episodeFileCount", EmitDefaultValue = false)]
        public int EpisodeFileCount { get; set; }

        /// <summary>
        /// Gets or Sets EpisodeCount
        /// </summary>
        [DataMember(Name = "episodeCount", EmitDefaultValue = false)]
        public int EpisodeCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalEpisodeCount
        /// </summary>
        [DataMember(Name = "totalEpisodeCount", EmitDefaultValue = false)]
        public int TotalEpisodeCount { get; set; }

        /// <summary>
        /// Gets or Sets SizeOnDisk
        /// </summary>
        [DataMember(Name = "sizeOnDisk", EmitDefaultValue = false)]
        public long SizeOnDisk { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseGroups
        /// </summary>
        [DataMember(Name = "releaseGroups", EmitDefaultValue = true)]
        public List<string> ReleaseGroups { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfEpisodes
        /// </summary>
        [DataMember(Name = "percentOfEpisodes", EmitDefaultValue = false)]
        public double PercentOfEpisodes { get; private set; }

        /// <summary>
        /// Returns false as PercentOfEpisodes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentOfEpisodes()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeasonStatisticsResource {\n");
            sb.Append("  NextAiring: ").Append(NextAiring).Append("\n");
            sb.Append("  PreviousAiring: ").Append(PreviousAiring).Append("\n");
            sb.Append("  EpisodeFileCount: ").Append(EpisodeFileCount).Append("\n");
            sb.Append("  EpisodeCount: ").Append(EpisodeCount).Append("\n");
            sb.Append("  TotalEpisodeCount: ").Append(TotalEpisodeCount).Append("\n");
            sb.Append("  SizeOnDisk: ").Append(SizeOnDisk).Append("\n");
            sb.Append("  ReleaseGroups: ").Append(ReleaseGroups).Append("\n");
            sb.Append("  PercentOfEpisodes: ").Append(PercentOfEpisodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeasonStatisticsResource);
        }

        /// <summary>
        /// Returns true if SeasonStatisticsResource instances are equal
        /// </summary>
        /// <param name="input">Instance of SeasonStatisticsResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeasonStatisticsResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NextAiring == input.NextAiring ||
                    (this.NextAiring != null &&
                    this.NextAiring.Equals(input.NextAiring))
                ) && 
                (
                    this.PreviousAiring == input.PreviousAiring ||
                    (this.PreviousAiring != null &&
                    this.PreviousAiring.Equals(input.PreviousAiring))
                ) && 
                (
                    this.EpisodeFileCount == input.EpisodeFileCount ||
                    this.EpisodeFileCount.Equals(input.EpisodeFileCount)
                ) && 
                (
                    this.EpisodeCount == input.EpisodeCount ||
                    this.EpisodeCount.Equals(input.EpisodeCount)
                ) && 
                (
                    this.TotalEpisodeCount == input.TotalEpisodeCount ||
                    this.TotalEpisodeCount.Equals(input.TotalEpisodeCount)
                ) && 
                (
                    this.SizeOnDisk == input.SizeOnDisk ||
                    this.SizeOnDisk.Equals(input.SizeOnDisk)
                ) && 
                (
                    this.ReleaseGroups == input.ReleaseGroups ||
                    this.ReleaseGroups != null &&
                    input.ReleaseGroups != null &&
                    this.ReleaseGroups.SequenceEqual(input.ReleaseGroups)
                ) && 
                (
                    this.PercentOfEpisodes == input.PercentOfEpisodes ||
                    this.PercentOfEpisodes.Equals(input.PercentOfEpisodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextAiring != null)
                    hashCode = hashCode * 59 + this.NextAiring.GetHashCode();
                if (this.PreviousAiring != null)
                    hashCode = hashCode * 59 + this.PreviousAiring.GetHashCode();
                hashCode = hashCode * 59 + this.EpisodeFileCount.GetHashCode();
                hashCode = hashCode * 59 + this.EpisodeCount.GetHashCode();
                hashCode = hashCode * 59 + this.TotalEpisodeCount.GetHashCode();
                hashCode = hashCode * 59 + this.SizeOnDisk.GetHashCode();
                if (this.ReleaseGroups != null)
                    hashCode = hashCode * 59 + this.ReleaseGroups.GetHashCode();
                hashCode = hashCode * 59 + this.PercentOfEpisodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
