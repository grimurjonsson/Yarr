/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// MediaCover
    /// </summary>
    [DataContract(Name = "MediaCover")]
    public partial class MediaCover : IEquatable<MediaCover>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CoverType
        /// </summary>
        [DataMember(Name = "coverType", EmitDefaultValue = false)]
        public MediaCoverTypes? CoverType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaCover" /> class.
        /// </summary>
        /// <param name="coverType">coverType.</param>
        /// <param name="url">url.</param>
        /// <param name="remoteUrl">remoteUrl.</param>
        public MediaCover(MediaCoverTypes? coverType = default(MediaCoverTypes?), string url = default(string), string remoteUrl = default(string))
        {
            this.CoverType = coverType;
            this.Url = url;
            this.RemoteUrl = remoteUrl;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets RemoteUrl
        /// </summary>
        [DataMember(Name = "remoteUrl", EmitDefaultValue = true)]
        public string RemoteUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaCover {\n");
            sb.Append("  CoverType: ").Append(CoverType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RemoteUrl: ").Append(RemoteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaCover);
        }

        /// <summary>
        /// Returns true if MediaCover instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaCover to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaCover input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CoverType == input.CoverType ||
                    this.CoverType.Equals(input.CoverType)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.RemoteUrl == input.RemoteUrl ||
                    (this.RemoteUrl != null &&
                    this.RemoteUrl.Equals(input.RemoteUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CoverType.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.RemoteUrl != null)
                    hashCode = hashCode * 59 + this.RemoteUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
