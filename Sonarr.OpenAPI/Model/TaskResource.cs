/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// TaskResource
    /// </summary>
    [DataContract(Name = "TaskResource")]
    public partial class TaskResource : IEquatable<TaskResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="taskName">taskName.</param>
        /// <param name="interval">interval.</param>
        /// <param name="lastExecution">lastExecution.</param>
        /// <param name="lastStartTime">lastStartTime.</param>
        /// <param name="nextExecution">nextExecution.</param>
        /// <param name="lastDuration">lastDuration.</param>
        public TaskResource(int id = default(int), string name = default(string), string taskName = default(string), int interval = default(int), DateTime lastExecution = default(DateTime), DateTime lastStartTime = default(DateTime), DateTime nextExecution = default(DateTime), TimeSpan lastDuration = default(TimeSpan))
        {
            this.Id = id;
            this.Name = name;
            this.TaskName = taskName;
            this.Interval = interval;
            this.LastExecution = lastExecution;
            this.LastStartTime = lastStartTime;
            this.NextExecution = nextExecution;
            this.LastDuration = lastDuration;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>
        [DataMember(Name = "taskName", EmitDefaultValue = true)]
        public string TaskName { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public int Interval { get; set; }

        /// <summary>
        /// Gets or Sets LastExecution
        /// </summary>
        [DataMember(Name = "lastExecution", EmitDefaultValue = false)]
        public DateTime LastExecution { get; set; }

        /// <summary>
        /// Gets or Sets LastStartTime
        /// </summary>
        [DataMember(Name = "lastStartTime", EmitDefaultValue = false)]
        public DateTime LastStartTime { get; set; }

        /// <summary>
        /// Gets or Sets NextExecution
        /// </summary>
        [DataMember(Name = "nextExecution", EmitDefaultValue = false)]
        public DateTime NextExecution { get; set; }

        /// <summary>
        /// Gets or Sets LastDuration
        /// </summary>
        [DataMember(Name = "lastDuration", EmitDefaultValue = false)]
        public TimeSpan LastDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  LastExecution: ").Append(LastExecution).Append("\n");
            sb.Append("  LastStartTime: ").Append(LastStartTime).Append("\n");
            sb.Append("  NextExecution: ").Append(NextExecution).Append("\n");
            sb.Append("  LastDuration: ").Append(LastDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskResource);
        }

        /// <summary>
        /// Returns true if TaskResource instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.Interval == input.Interval ||
                    this.Interval.Equals(input.Interval)
                ) && 
                (
                    this.LastExecution == input.LastExecution ||
                    (this.LastExecution != null &&
                    this.LastExecution.Equals(input.LastExecution))
                ) && 
                (
                    this.LastStartTime == input.LastStartTime ||
                    (this.LastStartTime != null &&
                    this.LastStartTime.Equals(input.LastStartTime))
                ) && 
                (
                    this.NextExecution == input.NextExecution ||
                    (this.NextExecution != null &&
                    this.NextExecution.Equals(input.NextExecution))
                ) && 
                (
                    this.LastDuration == input.LastDuration ||
                    (this.LastDuration != null &&
                    this.LastDuration.Equals(input.LastDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.LastExecution != null)
                    hashCode = hashCode * 59 + this.LastExecution.GetHashCode();
                if (this.LastStartTime != null)
                    hashCode = hashCode * 59 + this.LastStartTime.GetHashCode();
                if (this.NextExecution != null)
                    hashCode = hashCode * 59 + this.NextExecution.GetHashCode();
                if (this.LastDuration != null)
                    hashCode = hashCode * 59 + this.LastDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
