/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// NamingConfigResource
    /// </summary>
    [DataContract(Name = "NamingConfigResource")]
    public partial class NamingConfigResource : IEquatable<NamingConfigResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NamingConfigResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="renameEpisodes">renameEpisodes.</param>
        /// <param name="replaceIllegalCharacters">replaceIllegalCharacters.</param>
        /// <param name="colonReplacementFormat">colonReplacementFormat.</param>
        /// <param name="multiEpisodeStyle">multiEpisodeStyle.</param>
        /// <param name="standardEpisodeFormat">standardEpisodeFormat.</param>
        /// <param name="dailyEpisodeFormat">dailyEpisodeFormat.</param>
        /// <param name="animeEpisodeFormat">animeEpisodeFormat.</param>
        /// <param name="seriesFolderFormat">seriesFolderFormat.</param>
        /// <param name="seasonFolderFormat">seasonFolderFormat.</param>
        /// <param name="specialsFolderFormat">specialsFolderFormat.</param>
        /// <param name="includeSeriesTitle">includeSeriesTitle.</param>
        /// <param name="includeEpisodeTitle">includeEpisodeTitle.</param>
        /// <param name="includeQuality">includeQuality.</param>
        /// <param name="replaceSpaces">replaceSpaces.</param>
        /// <param name="separator">separator.</param>
        /// <param name="numberStyle">numberStyle.</param>
        public NamingConfigResource(int id = default(int), bool renameEpisodes = default(bool), bool replaceIllegalCharacters = default(bool), int colonReplacementFormat = default(int), int multiEpisodeStyle = default(int), string standardEpisodeFormat = default(string), string dailyEpisodeFormat = default(string), string animeEpisodeFormat = default(string), string seriesFolderFormat = default(string), string seasonFolderFormat = default(string), string specialsFolderFormat = default(string), bool includeSeriesTitle = default(bool), bool includeEpisodeTitle = default(bool), bool includeQuality = default(bool), bool replaceSpaces = default(bool), string separator = default(string), string numberStyle = default(string))
        {
            this.Id = id;
            this.RenameEpisodes = renameEpisodes;
            this.ReplaceIllegalCharacters = replaceIllegalCharacters;
            this.ColonReplacementFormat = colonReplacementFormat;
            this.MultiEpisodeStyle = multiEpisodeStyle;
            this.StandardEpisodeFormat = standardEpisodeFormat;
            this.DailyEpisodeFormat = dailyEpisodeFormat;
            this.AnimeEpisodeFormat = animeEpisodeFormat;
            this.SeriesFolderFormat = seriesFolderFormat;
            this.SeasonFolderFormat = seasonFolderFormat;
            this.SpecialsFolderFormat = specialsFolderFormat;
            this.IncludeSeriesTitle = includeSeriesTitle;
            this.IncludeEpisodeTitle = includeEpisodeTitle;
            this.IncludeQuality = includeQuality;
            this.ReplaceSpaces = replaceSpaces;
            this.Separator = separator;
            this.NumberStyle = numberStyle;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RenameEpisodes
        /// </summary>
        [DataMember(Name = "renameEpisodes", EmitDefaultValue = true)]
        public bool RenameEpisodes { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceIllegalCharacters
        /// </summary>
        [DataMember(Name = "replaceIllegalCharacters", EmitDefaultValue = true)]
        public bool ReplaceIllegalCharacters { get; set; }

        /// <summary>
        /// Gets or Sets ColonReplacementFormat
        /// </summary>
        [DataMember(Name = "colonReplacementFormat", EmitDefaultValue = false)]
        public int ColonReplacementFormat { get; set; }

        /// <summary>
        /// Gets or Sets MultiEpisodeStyle
        /// </summary>
        [DataMember(Name = "multiEpisodeStyle", EmitDefaultValue = false)]
        public int MultiEpisodeStyle { get; set; }

        /// <summary>
        /// Gets or Sets StandardEpisodeFormat
        /// </summary>
        [DataMember(Name = "standardEpisodeFormat", EmitDefaultValue = true)]
        public string StandardEpisodeFormat { get; set; }

        /// <summary>
        /// Gets or Sets DailyEpisodeFormat
        /// </summary>
        [DataMember(Name = "dailyEpisodeFormat", EmitDefaultValue = true)]
        public string DailyEpisodeFormat { get; set; }

        /// <summary>
        /// Gets or Sets AnimeEpisodeFormat
        /// </summary>
        [DataMember(Name = "animeEpisodeFormat", EmitDefaultValue = true)]
        public string AnimeEpisodeFormat { get; set; }

        /// <summary>
        /// Gets or Sets SeriesFolderFormat
        /// </summary>
        [DataMember(Name = "seriesFolderFormat", EmitDefaultValue = true)]
        public string SeriesFolderFormat { get; set; }

        /// <summary>
        /// Gets or Sets SeasonFolderFormat
        /// </summary>
        [DataMember(Name = "seasonFolderFormat", EmitDefaultValue = true)]
        public string SeasonFolderFormat { get; set; }

        /// <summary>
        /// Gets or Sets SpecialsFolderFormat
        /// </summary>
        [DataMember(Name = "specialsFolderFormat", EmitDefaultValue = true)]
        public string SpecialsFolderFormat { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSeriesTitle
        /// </summary>
        [DataMember(Name = "includeSeriesTitle", EmitDefaultValue = true)]
        public bool IncludeSeriesTitle { get; set; }

        /// <summary>
        /// Gets or Sets IncludeEpisodeTitle
        /// </summary>
        [DataMember(Name = "includeEpisodeTitle", EmitDefaultValue = true)]
        public bool IncludeEpisodeTitle { get; set; }

        /// <summary>
        /// Gets or Sets IncludeQuality
        /// </summary>
        [DataMember(Name = "includeQuality", EmitDefaultValue = true)]
        public bool IncludeQuality { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceSpaces
        /// </summary>
        [DataMember(Name = "replaceSpaces", EmitDefaultValue = true)]
        public bool ReplaceSpaces { get; set; }

        /// <summary>
        /// Gets or Sets Separator
        /// </summary>
        [DataMember(Name = "separator", EmitDefaultValue = true)]
        public string Separator { get; set; }

        /// <summary>
        /// Gets or Sets NumberStyle
        /// </summary>
        [DataMember(Name = "numberStyle", EmitDefaultValue = true)]
        public string NumberStyle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NamingConfigResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RenameEpisodes: ").Append(RenameEpisodes).Append("\n");
            sb.Append("  ReplaceIllegalCharacters: ").Append(ReplaceIllegalCharacters).Append("\n");
            sb.Append("  ColonReplacementFormat: ").Append(ColonReplacementFormat).Append("\n");
            sb.Append("  MultiEpisodeStyle: ").Append(MultiEpisodeStyle).Append("\n");
            sb.Append("  StandardEpisodeFormat: ").Append(StandardEpisodeFormat).Append("\n");
            sb.Append("  DailyEpisodeFormat: ").Append(DailyEpisodeFormat).Append("\n");
            sb.Append("  AnimeEpisodeFormat: ").Append(AnimeEpisodeFormat).Append("\n");
            sb.Append("  SeriesFolderFormat: ").Append(SeriesFolderFormat).Append("\n");
            sb.Append("  SeasonFolderFormat: ").Append(SeasonFolderFormat).Append("\n");
            sb.Append("  SpecialsFolderFormat: ").Append(SpecialsFolderFormat).Append("\n");
            sb.Append("  IncludeSeriesTitle: ").Append(IncludeSeriesTitle).Append("\n");
            sb.Append("  IncludeEpisodeTitle: ").Append(IncludeEpisodeTitle).Append("\n");
            sb.Append("  IncludeQuality: ").Append(IncludeQuality).Append("\n");
            sb.Append("  ReplaceSpaces: ").Append(ReplaceSpaces).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  NumberStyle: ").Append(NumberStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NamingConfigResource);
        }

        /// <summary>
        /// Returns true if NamingConfigResource instances are equal
        /// </summary>
        /// <param name="input">Instance of NamingConfigResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NamingConfigResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RenameEpisodes == input.RenameEpisodes ||
                    this.RenameEpisodes.Equals(input.RenameEpisodes)
                ) && 
                (
                    this.ReplaceIllegalCharacters == input.ReplaceIllegalCharacters ||
                    this.ReplaceIllegalCharacters.Equals(input.ReplaceIllegalCharacters)
                ) && 
                (
                    this.ColonReplacementFormat == input.ColonReplacementFormat ||
                    this.ColonReplacementFormat.Equals(input.ColonReplacementFormat)
                ) && 
                (
                    this.MultiEpisodeStyle == input.MultiEpisodeStyle ||
                    this.MultiEpisodeStyle.Equals(input.MultiEpisodeStyle)
                ) && 
                (
                    this.StandardEpisodeFormat == input.StandardEpisodeFormat ||
                    (this.StandardEpisodeFormat != null &&
                    this.StandardEpisodeFormat.Equals(input.StandardEpisodeFormat))
                ) && 
                (
                    this.DailyEpisodeFormat == input.DailyEpisodeFormat ||
                    (this.DailyEpisodeFormat != null &&
                    this.DailyEpisodeFormat.Equals(input.DailyEpisodeFormat))
                ) && 
                (
                    this.AnimeEpisodeFormat == input.AnimeEpisodeFormat ||
                    (this.AnimeEpisodeFormat != null &&
                    this.AnimeEpisodeFormat.Equals(input.AnimeEpisodeFormat))
                ) && 
                (
                    this.SeriesFolderFormat == input.SeriesFolderFormat ||
                    (this.SeriesFolderFormat != null &&
                    this.SeriesFolderFormat.Equals(input.SeriesFolderFormat))
                ) && 
                (
                    this.SeasonFolderFormat == input.SeasonFolderFormat ||
                    (this.SeasonFolderFormat != null &&
                    this.SeasonFolderFormat.Equals(input.SeasonFolderFormat))
                ) && 
                (
                    this.SpecialsFolderFormat == input.SpecialsFolderFormat ||
                    (this.SpecialsFolderFormat != null &&
                    this.SpecialsFolderFormat.Equals(input.SpecialsFolderFormat))
                ) && 
                (
                    this.IncludeSeriesTitle == input.IncludeSeriesTitle ||
                    this.IncludeSeriesTitle.Equals(input.IncludeSeriesTitle)
                ) && 
                (
                    this.IncludeEpisodeTitle == input.IncludeEpisodeTitle ||
                    this.IncludeEpisodeTitle.Equals(input.IncludeEpisodeTitle)
                ) && 
                (
                    this.IncludeQuality == input.IncludeQuality ||
                    this.IncludeQuality.Equals(input.IncludeQuality)
                ) && 
                (
                    this.ReplaceSpaces == input.ReplaceSpaces ||
                    this.ReplaceSpaces.Equals(input.ReplaceSpaces)
                ) && 
                (
                    this.Separator == input.Separator ||
                    (this.Separator != null &&
                    this.Separator.Equals(input.Separator))
                ) && 
                (
                    this.NumberStyle == input.NumberStyle ||
                    (this.NumberStyle != null &&
                    this.NumberStyle.Equals(input.NumberStyle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.RenameEpisodes.GetHashCode();
                hashCode = hashCode * 59 + this.ReplaceIllegalCharacters.GetHashCode();
                hashCode = hashCode * 59 + this.ColonReplacementFormat.GetHashCode();
                hashCode = hashCode * 59 + this.MultiEpisodeStyle.GetHashCode();
                if (this.StandardEpisodeFormat != null)
                    hashCode = hashCode * 59 + this.StandardEpisodeFormat.GetHashCode();
                if (this.DailyEpisodeFormat != null)
                    hashCode = hashCode * 59 + this.DailyEpisodeFormat.GetHashCode();
                if (this.AnimeEpisodeFormat != null)
                    hashCode = hashCode * 59 + this.AnimeEpisodeFormat.GetHashCode();
                if (this.SeriesFolderFormat != null)
                    hashCode = hashCode * 59 + this.SeriesFolderFormat.GetHashCode();
                if (this.SeasonFolderFormat != null)
                    hashCode = hashCode * 59 + this.SeasonFolderFormat.GetHashCode();
                if (this.SpecialsFolderFormat != null)
                    hashCode = hashCode * 59 + this.SpecialsFolderFormat.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeSeriesTitle.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeEpisodeTitle.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeQuality.GetHashCode();
                hashCode = hashCode * 59 + this.ReplaceSpaces.GetHashCode();
                if (this.Separator != null)
                    hashCode = hashCode * 59 + this.Separator.GetHashCode();
                if (this.NumberStyle != null)
                    hashCode = hashCode * 59 + this.NumberStyle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
