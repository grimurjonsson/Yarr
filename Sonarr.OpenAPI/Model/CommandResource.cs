/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sonarr.OpenAPI.Client.OpenAPIDateConverter;

namespace Sonarr.OpenAPI.Model
{
    /// <summary>
    /// CommandResource
    /// </summary>
    [DataContract(Name = "CommandResource")]
    public partial class CommandResource : IEquatable<CommandResource>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public CommandPriority? Priority { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public CommandStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public CommandResult? Result { get; set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name = "trigger", EmitDefaultValue = false)]
        public CommandTrigger? Trigger { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandResource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="commandName">commandName.</param>
        /// <param name="message">message.</param>
        /// <param name="body">body.</param>
        /// <param name="priority">priority.</param>
        /// <param name="status">status.</param>
        /// <param name="result">result.</param>
        /// <param name="queued">queued.</param>
        /// <param name="started">started.</param>
        /// <param name="ended">ended.</param>
        /// <param name="duration">duration.</param>
        /// <param name="exception">exception.</param>
        /// <param name="trigger">trigger.</param>
        /// <param name="clientUserAgent">clientUserAgent.</param>
        /// <param name="stateChangeTime">stateChangeTime.</param>
        /// <param name="sendUpdatesToClient">sendUpdatesToClient.</param>
        /// <param name="updateScheduledTask">updateScheduledTask.</param>
        /// <param name="lastExecutionTime">lastExecutionTime.</param>
        public CommandResource(int id = default(int), string name = default(string), string commandName = default(string), string message = default(string), Command body = default(Command), CommandPriority? priority = default(CommandPriority?), CommandStatus? status = default(CommandStatus?), CommandResult? result = default(CommandResult?), DateTime queued = default(DateTime), DateTime? started = default(DateTime?), DateTime? ended = default(DateTime?), TimeSpan duration = default(TimeSpan), string exception = default(string), CommandTrigger? trigger = default(CommandTrigger?), string clientUserAgent = default(string), DateTime? stateChangeTime = default(DateTime?), bool sendUpdatesToClient = default(bool), bool updateScheduledTask = default(bool), DateTime? lastExecutionTime = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.CommandName = commandName;
            this.Message = message;
            this.Body = body;
            this.Priority = priority;
            this.Status = status;
            this.Result = result;
            this.Queued = queued;
            this.Started = started;
            this.Ended = ended;
            this.Duration = duration;
            this.Exception = exception;
            this.Trigger = trigger;
            this.ClientUserAgent = clientUserAgent;
            this.StateChangeTime = stateChangeTime;
            this.SendUpdatesToClient = sendUpdatesToClient;
            this.UpdateScheduledTask = updateScheduledTask;
            this.LastExecutionTime = lastExecutionTime;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CommandName
        /// </summary>
        [DataMember(Name = "commandName", EmitDefaultValue = true)]
        public string CommandName { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public Command Body { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name = "queued", EmitDefaultValue = false)]
        public DateTime Queued { get; set; }

        /// <summary>
        /// Gets or Sets Started
        /// </summary>
        [DataMember(Name = "started", EmitDefaultValue = true)]
        public DateTime? Started { get; set; }

        /// <summary>
        /// Gets or Sets Ended
        /// </summary>
        [DataMember(Name = "ended", EmitDefaultValue = true)]
        public DateTime? Ended { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public TimeSpan Duration { get; set; }

        /// <summary>
        /// Gets or Sets Exception
        /// </summary>
        [DataMember(Name = "exception", EmitDefaultValue = true)]
        public string Exception { get; set; }

        /// <summary>
        /// Gets or Sets ClientUserAgent
        /// </summary>
        [DataMember(Name = "clientUserAgent", EmitDefaultValue = true)]
        public string ClientUserAgent { get; set; }

        /// <summary>
        /// Gets or Sets StateChangeTime
        /// </summary>
        [DataMember(Name = "stateChangeTime", EmitDefaultValue = true)]
        public DateTime? StateChangeTime { get; set; }

        /// <summary>
        /// Gets or Sets SendUpdatesToClient
        /// </summary>
        [DataMember(Name = "sendUpdatesToClient", EmitDefaultValue = true)]
        public bool SendUpdatesToClient { get; set; }

        /// <summary>
        /// Gets or Sets UpdateScheduledTask
        /// </summary>
        [DataMember(Name = "updateScheduledTask", EmitDefaultValue = true)]
        public bool UpdateScheduledTask { get; set; }

        /// <summary>
        /// Gets or Sets LastExecutionTime
        /// </summary>
        [DataMember(Name = "lastExecutionTime", EmitDefaultValue = true)]
        public DateTime? LastExecutionTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommandResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CommandName: ").Append(CommandName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Ended: ").Append(Ended).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Exception: ").Append(Exception).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  ClientUserAgent: ").Append(ClientUserAgent).Append("\n");
            sb.Append("  StateChangeTime: ").Append(StateChangeTime).Append("\n");
            sb.Append("  SendUpdatesToClient: ").Append(SendUpdatesToClient).Append("\n");
            sb.Append("  UpdateScheduledTask: ").Append(UpdateScheduledTask).Append("\n");
            sb.Append("  LastExecutionTime: ").Append(LastExecutionTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommandResource);
        }

        /// <summary>
        /// Returns true if CommandResource instances are equal
        /// </summary>
        /// <param name="input">Instance of CommandResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CommandName == input.CommandName ||
                    (this.CommandName != null &&
                    this.CommandName.Equals(input.CommandName))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.Started == input.Started ||
                    (this.Started != null &&
                    this.Started.Equals(input.Started))
                ) && 
                (
                    this.Ended == input.Ended ||
                    (this.Ended != null &&
                    this.Ended.Equals(input.Ended))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Exception == input.Exception ||
                    (this.Exception != null &&
                    this.Exception.Equals(input.Exception))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    this.Trigger.Equals(input.Trigger)
                ) && 
                (
                    this.ClientUserAgent == input.ClientUserAgent ||
                    (this.ClientUserAgent != null &&
                    this.ClientUserAgent.Equals(input.ClientUserAgent))
                ) && 
                (
                    this.StateChangeTime == input.StateChangeTime ||
                    (this.StateChangeTime != null &&
                    this.StateChangeTime.Equals(input.StateChangeTime))
                ) && 
                (
                    this.SendUpdatesToClient == input.SendUpdatesToClient ||
                    this.SendUpdatesToClient.Equals(input.SendUpdatesToClient)
                ) && 
                (
                    this.UpdateScheduledTask == input.UpdateScheduledTask ||
                    this.UpdateScheduledTask.Equals(input.UpdateScheduledTask)
                ) && 
                (
                    this.LastExecutionTime == input.LastExecutionTime ||
                    (this.LastExecutionTime != null &&
                    this.LastExecutionTime.Equals(input.LastExecutionTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CommandName != null)
                    hashCode = hashCode * 59 + this.CommandName.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                hashCode = hashCode * 59 + this.Priority.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.Started != null)
                    hashCode = hashCode * 59 + this.Started.GetHashCode();
                if (this.Ended != null)
                    hashCode = hashCode * 59 + this.Ended.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Exception != null)
                    hashCode = hashCode * 59 + this.Exception.GetHashCode();
                hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.ClientUserAgent != null)
                    hashCode = hashCode * 59 + this.ClientUserAgent.GetHashCode();
                if (this.StateChangeTime != null)
                    hashCode = hashCode * 59 + this.StateChangeTime.GetHashCode();
                hashCode = hashCode * 59 + this.SendUpdatesToClient.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateScheduledTask.GetHashCode();
                if (this.LastExecutionTime != null)
                    hashCode = hashCode * 59 + this.LastExecutionTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
